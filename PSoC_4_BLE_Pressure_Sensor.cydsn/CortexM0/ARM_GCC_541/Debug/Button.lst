ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccVsNmL0.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"Button.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.Button_SetDriveMode,"ax",%progbits
  20              		.align	2
  21              		.global	Button_SetDriveMode
  22              		.code	16
  23              		.thumb_func
  24              		.type	Button_SetDriveMode, %function
  25              	Button_SetDriveMode:
  26              	.LFB0:
  27              		.file 1 "Generated_Source\\PSoC4\\Button.c"
   1:Generated_Source\PSoC4/Button.c **** /*******************************************************************************
   2:Generated_Source\PSoC4/Button.c **** * File Name: Button.c  
   3:Generated_Source\PSoC4/Button.c **** * Version 2.20
   4:Generated_Source\PSoC4/Button.c **** *
   5:Generated_Source\PSoC4/Button.c **** * Description:
   6:Generated_Source\PSoC4/Button.c **** *  This file contains API to enable firmware control of a Pins component.
   7:Generated_Source\PSoC4/Button.c **** *
   8:Generated_Source\PSoC4/Button.c **** ********************************************************************************
   9:Generated_Source\PSoC4/Button.c **** * Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
  10:Generated_Source\PSoC4/Button.c **** * You may use this file only in accordance with the license, terms, conditions, 
  11:Generated_Source\PSoC4/Button.c **** * disclaimers, and limitations in the end user license agreement accompanying 
  12:Generated_Source\PSoC4/Button.c **** * the software package with which this file was provided.
  13:Generated_Source\PSoC4/Button.c **** *******************************************************************************/
  14:Generated_Source\PSoC4/Button.c **** 
  15:Generated_Source\PSoC4/Button.c **** #include "cytypes.h"
  16:Generated_Source\PSoC4/Button.c **** #include "Button.h"
  17:Generated_Source\PSoC4/Button.c **** 
  18:Generated_Source\PSoC4/Button.c **** 
  19:Generated_Source\PSoC4/Button.c **** #if defined(Button__PC)
  20:Generated_Source\PSoC4/Button.c ****     #define Button_SetP4PinDriveMode(shift, mode)  \
  21:Generated_Source\PSoC4/Button.c ****     do { \
  22:Generated_Source\PSoC4/Button.c ****         Button_PC =   (Button_PC & \
  23:Generated_Source\PSoC4/Button.c ****                                 (uint32)(~(uint32)(Button_DRIVE_MODE_IND_MASK << \
  24:Generated_Source\PSoC4/Button.c ****                                 (Button_DRIVE_MODE_BITS * (shift))))) | \
  25:Generated_Source\PSoC4/Button.c ****                                 (uint32)((uint32)(mode) << \
  26:Generated_Source\PSoC4/Button.c ****                                 (Button_DRIVE_MODE_BITS * (shift))); \
  27:Generated_Source\PSoC4/Button.c ****     } while (0)
  28:Generated_Source\PSoC4/Button.c **** #else
  29:Generated_Source\PSoC4/Button.c ****     #if (CY_PSOC4_4200L)
  30:Generated_Source\PSoC4/Button.c ****         #define Button_SetP4PinDriveMode(shift, mode)  \
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccVsNmL0.s 			page 2


  31:Generated_Source\PSoC4/Button.c ****         do { \
  32:Generated_Source\PSoC4/Button.c ****             Button_USBIO_CTRL_REG = (Button_USBIO_CTRL_REG & \
  33:Generated_Source\PSoC4/Button.c ****                                     (uint32)(~(uint32)(Button_DRIVE_MODE_IND_MASK << \
  34:Generated_Source\PSoC4/Button.c ****                                     (Button_DRIVE_MODE_BITS * (shift))))) | \
  35:Generated_Source\PSoC4/Button.c ****                                     (uint32)((uint32)(mode) << \
  36:Generated_Source\PSoC4/Button.c ****                                     (Button_DRIVE_MODE_BITS * (shift))); \
  37:Generated_Source\PSoC4/Button.c ****         } while (0)
  38:Generated_Source\PSoC4/Button.c ****     #endif
  39:Generated_Source\PSoC4/Button.c **** #endif
  40:Generated_Source\PSoC4/Button.c ****   
  41:Generated_Source\PSoC4/Button.c **** 
  42:Generated_Source\PSoC4/Button.c **** #if defined(Button__PC) || (CY_PSOC4_4200L) 
  43:Generated_Source\PSoC4/Button.c ****     /*******************************************************************************
  44:Generated_Source\PSoC4/Button.c ****     * Function Name: Button_SetDriveMode
  45:Generated_Source\PSoC4/Button.c ****     ****************************************************************************//**
  46:Generated_Source\PSoC4/Button.c ****     *
  47:Generated_Source\PSoC4/Button.c ****     * \brief Sets the drive mode for each of the Pins component's pins.
  48:Generated_Source\PSoC4/Button.c ****     * 
  49:Generated_Source\PSoC4/Button.c ****     * <b>Note</b> This affects all pins in the Pins component instance. Use the
  50:Generated_Source\PSoC4/Button.c ****     * Per-Pin APIs if you wish to control individual pin's drive modes.
  51:Generated_Source\PSoC4/Button.c ****     *
  52:Generated_Source\PSoC4/Button.c ****     * <b>Note</b> USBIOs have limited drive functionality. Refer to the Drive Mode
  53:Generated_Source\PSoC4/Button.c ****     * parameter for more information.
  54:Generated_Source\PSoC4/Button.c ****     *
  55:Generated_Source\PSoC4/Button.c ****     * \param mode
  56:Generated_Source\PSoC4/Button.c ****     *  Mode for the selected signals. Valid options are documented in 
  57:Generated_Source\PSoC4/Button.c ****     *  \ref driveMode.
  58:Generated_Source\PSoC4/Button.c ****     *
  59:Generated_Source\PSoC4/Button.c ****     * \return
  60:Generated_Source\PSoC4/Button.c ****     *  None
  61:Generated_Source\PSoC4/Button.c ****     *
  62:Generated_Source\PSoC4/Button.c ****     * \sideeffect
  63:Generated_Source\PSoC4/Button.c ****     *  If you use read-modify-write operations that are not atomic, the ISR can
  64:Generated_Source\PSoC4/Button.c ****     *  cause corruption of this function. An ISR that interrupts this function 
  65:Generated_Source\PSoC4/Button.c ****     *  and performs writes to the Pins component Drive Mode registers can cause 
  66:Generated_Source\PSoC4/Button.c ****     *  corrupted port data. To avoid this issue, you should either use the Per-Pin
  67:Generated_Source\PSoC4/Button.c ****     *  APIs (primary method) or disable interrupts around this function.
  68:Generated_Source\PSoC4/Button.c ****     *
  69:Generated_Source\PSoC4/Button.c ****     * \funcusage
  70:Generated_Source\PSoC4/Button.c ****     *  \snippet Button_SUT.c usage_Button_SetDriveMode
  71:Generated_Source\PSoC4/Button.c ****     *******************************************************************************/
  72:Generated_Source\PSoC4/Button.c ****     void Button_SetDriveMode(uint8 mode)
  73:Generated_Source\PSoC4/Button.c ****     {
  28              		.loc 1 73 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 8
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32 0000 80B5     		push	{r7, lr}
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 7, -8
  35              		.cfi_offset 14, -4
  36 0002 82B0     		sub	sp, sp, #8
  37              		.cfi_def_cfa_offset 16
  38 0004 00AF     		add	r7, sp, #0
  39              		.cfi_def_cfa_register 7
  40 0006 0200     		movs	r2, r0
  41 0008 FB1D     		adds	r3, r7, #7
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccVsNmL0.s 			page 3


  42 000a 1A70     		strb	r2, [r3]
  74:Generated_Source\PSoC4/Button.c **** 		Button_SetP4PinDriveMode(Button__0__SHIFT, mode);
  43              		.loc 1 74 0
  44 000c 064B     		ldr	r3, .L2
  45 000e 064A     		ldr	r2, .L2
  46 0010 1268     		ldr	r2, [r2]
  47 0012 0649     		ldr	r1, .L2+4
  48 0014 1140     		ands	r1, r2
  49 0016 FA1D     		adds	r2, r7, #7
  50 0018 1278     		ldrb	r2, [r2]
  51 001a 5205     		lsls	r2, r2, #21
  52 001c 0A43     		orrs	r2, r1
  53 001e 1A60     		str	r2, [r3]
  75:Generated_Source\PSoC4/Button.c ****     }
  54              		.loc 1 75 0
  55 0020 C046     		nop
  56 0022 BD46     		mov	sp, r7
  57 0024 02B0     		add	sp, sp, #8
  58              		@ sp needed
  59 0026 80BD     		pop	{r7, pc}
  60              	.L3:
  61              		.align	2
  62              	.L2:
  63 0028 08020440 		.word	1074004488
  64 002c FFFF1FFF 		.word	-14680065
  65              		.cfi_endproc
  66              	.LFE0:
  67              		.size	Button_SetDriveMode, .-Button_SetDriveMode
  68              		.section	.text.Button_Write,"ax",%progbits
  69              		.align	2
  70              		.global	Button_Write
  71              		.code	16
  72              		.thumb_func
  73              		.type	Button_Write, %function
  74              	Button_Write:
  75              	.LFB1:
  76:Generated_Source\PSoC4/Button.c **** #endif
  77:Generated_Source\PSoC4/Button.c **** 
  78:Generated_Source\PSoC4/Button.c **** 
  79:Generated_Source\PSoC4/Button.c **** /*******************************************************************************
  80:Generated_Source\PSoC4/Button.c **** * Function Name: Button_Write
  81:Generated_Source\PSoC4/Button.c **** ****************************************************************************//**
  82:Generated_Source\PSoC4/Button.c **** *
  83:Generated_Source\PSoC4/Button.c **** * \brief Writes the value to the physical port (data output register), masking
  84:Generated_Source\PSoC4/Button.c **** *  and shifting the bits appropriately. 
  85:Generated_Source\PSoC4/Button.c **** *
  86:Generated_Source\PSoC4/Button.c **** * The data output register controls the signal applied to the physical pin in 
  87:Generated_Source\PSoC4/Button.c **** * conjunction with the drive mode parameter. This function avoids changing 
  88:Generated_Source\PSoC4/Button.c **** * other bits in the port by using the appropriate method (read-modify-write or
  89:Generated_Source\PSoC4/Button.c **** * bit banding).
  90:Generated_Source\PSoC4/Button.c **** *
  91:Generated_Source\PSoC4/Button.c **** * <b>Note</b> This function should not be used on a hardware digital output pin 
  92:Generated_Source\PSoC4/Button.c **** * as it is driven by the hardware signal attached to it.
  93:Generated_Source\PSoC4/Button.c **** *
  94:Generated_Source\PSoC4/Button.c **** * \param value
  95:Generated_Source\PSoC4/Button.c **** *  Value to write to the component instance.
  96:Generated_Source\PSoC4/Button.c **** *
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccVsNmL0.s 			page 4


  97:Generated_Source\PSoC4/Button.c **** * \return 
  98:Generated_Source\PSoC4/Button.c **** *  None 
  99:Generated_Source\PSoC4/Button.c **** *
 100:Generated_Source\PSoC4/Button.c **** * \sideeffect
 101:Generated_Source\PSoC4/Button.c **** *  If you use read-modify-write operations that are not atomic; the Interrupt 
 102:Generated_Source\PSoC4/Button.c **** *  Service Routines (ISR) can cause corruption of this function. An ISR that 
 103:Generated_Source\PSoC4/Button.c **** *  interrupts this function and performs writes to the Pins component data 
 104:Generated_Source\PSoC4/Button.c **** *  register can cause corrupted port data. To avoid this issue, you should 
 105:Generated_Source\PSoC4/Button.c **** *  either use the Per-Pin APIs (primary method) or disable interrupts around 
 106:Generated_Source\PSoC4/Button.c **** *  this function.
 107:Generated_Source\PSoC4/Button.c **** *
 108:Generated_Source\PSoC4/Button.c **** * \funcusage
 109:Generated_Source\PSoC4/Button.c **** *  \snippet Button_SUT.c usage_Button_Write
 110:Generated_Source\PSoC4/Button.c **** *******************************************************************************/
 111:Generated_Source\PSoC4/Button.c **** void Button_Write(uint8 value)
 112:Generated_Source\PSoC4/Button.c **** {
  76              		.loc 1 112 0
  77              		.cfi_startproc
  78              		@ args = 0, pretend = 0, frame = 16
  79              		@ frame_needed = 1, uses_anonymous_args = 0
  80 0000 80B5     		push	{r7, lr}
  81              		.cfi_def_cfa_offset 8
  82              		.cfi_offset 7, -8
  83              		.cfi_offset 14, -4
  84 0002 84B0     		sub	sp, sp, #16
  85              		.cfi_def_cfa_offset 24
  86 0004 00AF     		add	r7, sp, #0
  87              		.cfi_def_cfa_register 7
  88 0006 0200     		movs	r2, r0
  89 0008 FB1D     		adds	r3, r7, #7
  90 000a 1A70     		strb	r2, [r3]
 113:Generated_Source\PSoC4/Button.c ****     uint8 drVal = (uint8)(Button_DR & (uint8)(~Button_MASK));
  91              		.loc 1 113 0
  92 000c 0D4B     		ldr	r3, .L5
  93 000e 1B68     		ldr	r3, [r3]
  94 0010 DAB2     		uxtb	r2, r3
  95 0012 0F23     		movs	r3, #15
  96 0014 FB18     		adds	r3, r7, r3
  97 0016 7F21     		movs	r1, #127
  98 0018 0A40     		ands	r2, r1
  99 001a 1A70     		strb	r2, [r3]
 114:Generated_Source\PSoC4/Button.c ****     drVal = (drVal | ((uint8)(value << Button_SHIFT) & Button_MASK));
 100              		.loc 1 114 0
 101 001c FB1D     		adds	r3, r7, #7
 102 001e 1B78     		ldrb	r3, [r3]
 103 0020 DB01     		lsls	r3, r3, #7
 104 0022 D9B2     		uxtb	r1, r3
 105 0024 0F23     		movs	r3, #15
 106 0026 FB18     		adds	r3, r7, r3
 107 0028 0F22     		movs	r2, #15
 108 002a BA18     		adds	r2, r7, r2
 109 002c 1278     		ldrb	r2, [r2]
 110 002e 0A43     		orrs	r2, r1
 111 0030 1A70     		strb	r2, [r3]
 115:Generated_Source\PSoC4/Button.c ****     Button_DR = (uint32)drVal;
 112              		.loc 1 115 0
 113 0032 044B     		ldr	r3, .L5
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccVsNmL0.s 			page 5


 114 0034 0F22     		movs	r2, #15
 115 0036 BA18     		adds	r2, r7, r2
 116 0038 1278     		ldrb	r2, [r2]
 117 003a 1A60     		str	r2, [r3]
 116:Generated_Source\PSoC4/Button.c **** }
 118              		.loc 1 116 0
 119 003c C046     		nop
 120 003e BD46     		mov	sp, r7
 121 0040 04B0     		add	sp, sp, #16
 122              		@ sp needed
 123 0042 80BD     		pop	{r7, pc}
 124              	.L6:
 125              		.align	2
 126              	.L5:
 127 0044 00020440 		.word	1074004480
 128              		.cfi_endproc
 129              	.LFE1:
 130              		.size	Button_Write, .-Button_Write
 131              		.section	.text.Button_Read,"ax",%progbits
 132              		.align	2
 133              		.global	Button_Read
 134              		.code	16
 135              		.thumb_func
 136              		.type	Button_Read, %function
 137              	Button_Read:
 138              	.LFB2:
 117:Generated_Source\PSoC4/Button.c **** 
 118:Generated_Source\PSoC4/Button.c **** 
 119:Generated_Source\PSoC4/Button.c **** /*******************************************************************************
 120:Generated_Source\PSoC4/Button.c **** * Function Name: Button_Read
 121:Generated_Source\PSoC4/Button.c **** ****************************************************************************//**
 122:Generated_Source\PSoC4/Button.c **** *
 123:Generated_Source\PSoC4/Button.c **** * \brief Reads the associated physical port (pin status register) and masks 
 124:Generated_Source\PSoC4/Button.c **** *  the required bits according to the width and bit position of the component
 125:Generated_Source\PSoC4/Button.c **** *  instance. 
 126:Generated_Source\PSoC4/Button.c **** *
 127:Generated_Source\PSoC4/Button.c **** * The pin's status register returns the current logic level present on the 
 128:Generated_Source\PSoC4/Button.c **** * physical pin.
 129:Generated_Source\PSoC4/Button.c **** *
 130:Generated_Source\PSoC4/Button.c **** * \return 
 131:Generated_Source\PSoC4/Button.c **** *  The current value for the pins in the component as a right justified number.
 132:Generated_Source\PSoC4/Button.c **** *
 133:Generated_Source\PSoC4/Button.c **** * \funcusage
 134:Generated_Source\PSoC4/Button.c **** *  \snippet Button_SUT.c usage_Button_Read  
 135:Generated_Source\PSoC4/Button.c **** *******************************************************************************/
 136:Generated_Source\PSoC4/Button.c **** uint8 Button_Read(void)
 137:Generated_Source\PSoC4/Button.c **** {
 139              		.loc 1 137 0
 140              		.cfi_startproc
 141              		@ args = 0, pretend = 0, frame = 0
 142              		@ frame_needed = 1, uses_anonymous_args = 0
 143 0000 80B5     		push	{r7, lr}
 144              		.cfi_def_cfa_offset 8
 145              		.cfi_offset 7, -8
 146              		.cfi_offset 14, -4
 147 0002 00AF     		add	r7, sp, #0
 148              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccVsNmL0.s 			page 6


 138:Generated_Source\PSoC4/Button.c ****     return (uint8)((Button_PS & Button_MASK) >> Button_SHIFT);
 149              		.loc 1 138 0
 150 0004 044B     		ldr	r3, .L9
 151 0006 1B68     		ldr	r3, [r3]
 152 0008 8022     		movs	r2, #128
 153 000a 1340     		ands	r3, r2
 154 000c DB09     		lsrs	r3, r3, #7
 155 000e DBB2     		uxtb	r3, r3
 139:Generated_Source\PSoC4/Button.c **** }
 156              		.loc 1 139 0
 157 0010 1800     		movs	r0, r3
 158 0012 BD46     		mov	sp, r7
 159              		@ sp needed
 160 0014 80BD     		pop	{r7, pc}
 161              	.L10:
 162 0016 C046     		.align	2
 163              	.L9:
 164 0018 04020440 		.word	1074004484
 165              		.cfi_endproc
 166              	.LFE2:
 167              		.size	Button_Read, .-Button_Read
 168              		.section	.text.Button_ReadDataReg,"ax",%progbits
 169              		.align	2
 170              		.global	Button_ReadDataReg
 171              		.code	16
 172              		.thumb_func
 173              		.type	Button_ReadDataReg, %function
 174              	Button_ReadDataReg:
 175              	.LFB3:
 140:Generated_Source\PSoC4/Button.c **** 
 141:Generated_Source\PSoC4/Button.c **** 
 142:Generated_Source\PSoC4/Button.c **** /*******************************************************************************
 143:Generated_Source\PSoC4/Button.c **** * Function Name: Button_ReadDataReg
 144:Generated_Source\PSoC4/Button.c **** ****************************************************************************//**
 145:Generated_Source\PSoC4/Button.c **** *
 146:Generated_Source\PSoC4/Button.c **** * \brief Reads the associated physical port's data output register and masks 
 147:Generated_Source\PSoC4/Button.c **** *  the correct bits according to the width and bit position of the component 
 148:Generated_Source\PSoC4/Button.c **** *  instance. 
 149:Generated_Source\PSoC4/Button.c **** *
 150:Generated_Source\PSoC4/Button.c **** * The data output register controls the signal applied to the physical pin in 
 151:Generated_Source\PSoC4/Button.c **** * conjunction with the drive mode parameter. This is not the same as the 
 152:Generated_Source\PSoC4/Button.c **** * preferred Button_Read() API because the 
 153:Generated_Source\PSoC4/Button.c **** * Button_ReadDataReg() reads the data register instead of the status 
 154:Generated_Source\PSoC4/Button.c **** * register. For output pins this is a useful function to determine the value 
 155:Generated_Source\PSoC4/Button.c **** * just written to the pin.
 156:Generated_Source\PSoC4/Button.c **** *
 157:Generated_Source\PSoC4/Button.c **** * \return 
 158:Generated_Source\PSoC4/Button.c **** *  The current value of the data register masked and shifted into a right 
 159:Generated_Source\PSoC4/Button.c **** *  justified number for the component instance.
 160:Generated_Source\PSoC4/Button.c **** *
 161:Generated_Source\PSoC4/Button.c **** * \funcusage
 162:Generated_Source\PSoC4/Button.c **** *  \snippet Button_SUT.c usage_Button_ReadDataReg 
 163:Generated_Source\PSoC4/Button.c **** *******************************************************************************/
 164:Generated_Source\PSoC4/Button.c **** uint8 Button_ReadDataReg(void)
 165:Generated_Source\PSoC4/Button.c **** {
 176              		.loc 1 165 0
 177              		.cfi_startproc
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccVsNmL0.s 			page 7


 178              		@ args = 0, pretend = 0, frame = 0
 179              		@ frame_needed = 1, uses_anonymous_args = 0
 180 0000 80B5     		push	{r7, lr}
 181              		.cfi_def_cfa_offset 8
 182              		.cfi_offset 7, -8
 183              		.cfi_offset 14, -4
 184 0002 00AF     		add	r7, sp, #0
 185              		.cfi_def_cfa_register 7
 166:Generated_Source\PSoC4/Button.c ****     return (uint8)((Button_DR & Button_MASK) >> Button_SHIFT);
 186              		.loc 1 166 0
 187 0004 044B     		ldr	r3, .L13
 188 0006 1B68     		ldr	r3, [r3]
 189 0008 8022     		movs	r2, #128
 190 000a 1340     		ands	r3, r2
 191 000c DB09     		lsrs	r3, r3, #7
 192 000e DBB2     		uxtb	r3, r3
 167:Generated_Source\PSoC4/Button.c **** }
 193              		.loc 1 167 0
 194 0010 1800     		movs	r0, r3
 195 0012 BD46     		mov	sp, r7
 196              		@ sp needed
 197 0014 80BD     		pop	{r7, pc}
 198              	.L14:
 199 0016 C046     		.align	2
 200              	.L13:
 201 0018 00020440 		.word	1074004480
 202              		.cfi_endproc
 203              	.LFE3:
 204              		.size	Button_ReadDataReg, .-Button_ReadDataReg
 205              		.section	.text.Button_SetInterruptMode,"ax",%progbits
 206              		.align	2
 207              		.global	Button_SetInterruptMode
 208              		.code	16
 209              		.thumb_func
 210              		.type	Button_SetInterruptMode, %function
 211              	Button_SetInterruptMode:
 212              	.LFB4:
 168:Generated_Source\PSoC4/Button.c **** 
 169:Generated_Source\PSoC4/Button.c **** 
 170:Generated_Source\PSoC4/Button.c **** /*******************************************************************************
 171:Generated_Source\PSoC4/Button.c **** * Function Name: Button_SetInterruptMode
 172:Generated_Source\PSoC4/Button.c **** ****************************************************************************//**
 173:Generated_Source\PSoC4/Button.c **** *
 174:Generated_Source\PSoC4/Button.c **** * \brief Configures the interrupt mode for each of the Pins component's
 175:Generated_Source\PSoC4/Button.c **** *  pins. Alternatively you may set the interrupt mode for all the pins
 176:Generated_Source\PSoC4/Button.c **** *  specified in the Pins component.
 177:Generated_Source\PSoC4/Button.c **** *
 178:Generated_Source\PSoC4/Button.c **** *  <b>Note</b> The interrupt is port-wide and therefore any enabled pin
 179:Generated_Source\PSoC4/Button.c **** *  interrupt may trigger it.
 180:Generated_Source\PSoC4/Button.c **** *
 181:Generated_Source\PSoC4/Button.c **** * \param position
 182:Generated_Source\PSoC4/Button.c **** *  The pin position as listed in the Pins component. You may OR these to be 
 183:Generated_Source\PSoC4/Button.c **** *  able to configure the interrupt mode of multiple pins within a Pins 
 184:Generated_Source\PSoC4/Button.c **** *  component. Or you may use Button_INTR_ALL to configure the
 185:Generated_Source\PSoC4/Button.c **** *  interrupt mode of all the pins in the Pins component.       
 186:Generated_Source\PSoC4/Button.c **** *  - Button_0_INTR       (First pin in the list)
 187:Generated_Source\PSoC4/Button.c **** *  - Button_1_INTR       (Second pin in the list)
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccVsNmL0.s 			page 8


 188:Generated_Source\PSoC4/Button.c **** *  - ...
 189:Generated_Source\PSoC4/Button.c **** *  - Button_INTR_ALL     (All pins in Pins component)
 190:Generated_Source\PSoC4/Button.c **** *
 191:Generated_Source\PSoC4/Button.c **** * \param mode
 192:Generated_Source\PSoC4/Button.c **** *  Interrupt mode for the selected pins. Valid options are documented in
 193:Generated_Source\PSoC4/Button.c **** *  \ref intrMode.
 194:Generated_Source\PSoC4/Button.c **** *
 195:Generated_Source\PSoC4/Button.c **** * \return 
 196:Generated_Source\PSoC4/Button.c **** *  None
 197:Generated_Source\PSoC4/Button.c **** *  
 198:Generated_Source\PSoC4/Button.c **** * \sideeffect
 199:Generated_Source\PSoC4/Button.c **** *  It is recommended that the interrupt be disabled before calling this 
 200:Generated_Source\PSoC4/Button.c **** *  function to avoid unintended interrupt requests. Note that the interrupt
 201:Generated_Source\PSoC4/Button.c **** *  type is port wide, and therefore will trigger for any enabled pin on the 
 202:Generated_Source\PSoC4/Button.c **** *  port.
 203:Generated_Source\PSoC4/Button.c **** *
 204:Generated_Source\PSoC4/Button.c **** * \funcusage
 205:Generated_Source\PSoC4/Button.c **** *  \snippet Button_SUT.c usage_Button_SetInterruptMode
 206:Generated_Source\PSoC4/Button.c **** *******************************************************************************/
 207:Generated_Source\PSoC4/Button.c **** void Button_SetInterruptMode(uint16 position, uint16 mode)
 208:Generated_Source\PSoC4/Button.c **** {
 213              		.loc 1 208 0
 214              		.cfi_startproc
 215              		@ args = 0, pretend = 0, frame = 16
 216              		@ frame_needed = 1, uses_anonymous_args = 0
 217 0000 80B5     		push	{r7, lr}
 218              		.cfi_def_cfa_offset 8
 219              		.cfi_offset 7, -8
 220              		.cfi_offset 14, -4
 221 0002 84B0     		sub	sp, sp, #16
 222              		.cfi_def_cfa_offset 24
 223 0004 00AF     		add	r7, sp, #0
 224              		.cfi_def_cfa_register 7
 225 0006 0200     		movs	r2, r0
 226 0008 BB1D     		adds	r3, r7, #6
 227 000a 1A80     		strh	r2, [r3]
 228 000c 3B1D     		adds	r3, r7, #4
 229 000e 0A1C     		adds	r2, r1, #0
 230 0010 1A80     		strh	r2, [r3]
 209:Generated_Source\PSoC4/Button.c ****     uint32 intrCfg;
 210:Generated_Source\PSoC4/Button.c ****     
 211:Generated_Source\PSoC4/Button.c ****     intrCfg =  Button_INTCFG & (uint32)(~(uint32)position);
 231              		.loc 1 211 0
 232 0012 0B4B     		ldr	r3, .L16
 233 0014 1B68     		ldr	r3, [r3]
 234 0016 BA1D     		adds	r2, r7, #6
 235 0018 1288     		ldrh	r2, [r2]
 236 001a D243     		mvns	r2, r2
 237 001c 1340     		ands	r3, r2
 238 001e FB60     		str	r3, [r7, #12]
 212:Generated_Source\PSoC4/Button.c ****     Button_INTCFG = intrCfg | ((uint32)position & (uint32)mode);
 239              		.loc 1 212 0
 240 0020 074B     		ldr	r3, .L16
 241 0022 BA1D     		adds	r2, r7, #6
 242 0024 391D     		adds	r1, r7, #4
 243 0026 1288     		ldrh	r2, [r2]
 244 0028 0988     		ldrh	r1, [r1]
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccVsNmL0.s 			page 9


 245 002a 0A40     		ands	r2, r1
 246 002c 92B2     		uxth	r2, r2
 247 002e 1100     		movs	r1, r2
 248 0030 FA68     		ldr	r2, [r7, #12]
 249 0032 0A43     		orrs	r2, r1
 250 0034 1A60     		str	r2, [r3]
 213:Generated_Source\PSoC4/Button.c **** }
 251              		.loc 1 213 0
 252 0036 C046     		nop
 253 0038 BD46     		mov	sp, r7
 254 003a 04B0     		add	sp, sp, #16
 255              		@ sp needed
 256 003c 80BD     		pop	{r7, pc}
 257              	.L17:
 258 003e C046     		.align	2
 259              	.L16:
 260 0040 0C020440 		.word	1074004492
 261              		.cfi_endproc
 262              	.LFE4:
 263              		.size	Button_SetInterruptMode, .-Button_SetInterruptMode
 264              		.section	.text.Button_ClearInterrupt,"ax",%progbits
 265              		.align	2
 266              		.global	Button_ClearInterrupt
 267              		.code	16
 268              		.thumb_func
 269              		.type	Button_ClearInterrupt, %function
 270              	Button_ClearInterrupt:
 271              	.LFB5:
 214:Generated_Source\PSoC4/Button.c **** 
 215:Generated_Source\PSoC4/Button.c **** 
 216:Generated_Source\PSoC4/Button.c **** /*******************************************************************************
 217:Generated_Source\PSoC4/Button.c **** * Function Name: Button_ClearInterrupt
 218:Generated_Source\PSoC4/Button.c **** ****************************************************************************//**
 219:Generated_Source\PSoC4/Button.c **** *
 220:Generated_Source\PSoC4/Button.c **** * \brief Clears any active interrupts attached with the component and returns 
 221:Generated_Source\PSoC4/Button.c **** *  the value of the interrupt status register allowing determination of which
 222:Generated_Source\PSoC4/Button.c **** *  pins generated an interrupt event.
 223:Generated_Source\PSoC4/Button.c **** *
 224:Generated_Source\PSoC4/Button.c **** * \return 
 225:Generated_Source\PSoC4/Button.c **** *  The right-shifted current value of the interrupt status register. Each pin 
 226:Generated_Source\PSoC4/Button.c **** *  has one bit set if it generated an interrupt event. For example, bit 0 is 
 227:Generated_Source\PSoC4/Button.c **** *  for pin 0 and bit 1 is for pin 1 of the Pins component.
 228:Generated_Source\PSoC4/Button.c **** *  
 229:Generated_Source\PSoC4/Button.c **** * \sideeffect
 230:Generated_Source\PSoC4/Button.c **** *  Clears all bits of the physical port's interrupt status register, not just
 231:Generated_Source\PSoC4/Button.c **** *  those associated with the Pins component.
 232:Generated_Source\PSoC4/Button.c **** *
 233:Generated_Source\PSoC4/Button.c **** * \funcusage
 234:Generated_Source\PSoC4/Button.c **** *  \snippet Button_SUT.c usage_Button_ClearInterrupt
 235:Generated_Source\PSoC4/Button.c **** *******************************************************************************/
 236:Generated_Source\PSoC4/Button.c **** uint8 Button_ClearInterrupt(void)
 237:Generated_Source\PSoC4/Button.c **** {
 272              		.loc 1 237 0
 273              		.cfi_startproc
 274              		@ args = 0, pretend = 0, frame = 8
 275              		@ frame_needed = 1, uses_anonymous_args = 0
 276 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccVsNmL0.s 			page 10


 277              		.cfi_def_cfa_offset 8
 278              		.cfi_offset 7, -8
 279              		.cfi_offset 14, -4
 280 0002 82B0     		sub	sp, sp, #8
 281              		.cfi_def_cfa_offset 16
 282 0004 00AF     		add	r7, sp, #0
 283              		.cfi_def_cfa_register 7
 238:Generated_Source\PSoC4/Button.c **** 	uint8 maskedStatus = (uint8)(Button_INTSTAT & Button_MASK);
 284              		.loc 1 238 0
 285 0006 094B     		ldr	r3, .L20
 286 0008 1B68     		ldr	r3, [r3]
 287 000a DAB2     		uxtb	r2, r3
 288 000c FB1D     		adds	r3, r7, #7
 289 000e 7F21     		movs	r1, #127
 290 0010 8A43     		bics	r2, r1
 291 0012 1A70     		strb	r2, [r3]
 239:Generated_Source\PSoC4/Button.c **** 	Button_INTSTAT = maskedStatus;
 292              		.loc 1 239 0
 293 0014 054B     		ldr	r3, .L20
 294 0016 FA1D     		adds	r2, r7, #7
 295 0018 1278     		ldrb	r2, [r2]
 296 001a 1A60     		str	r2, [r3]
 240:Generated_Source\PSoC4/Button.c ****     return maskedStatus >> Button_SHIFT;
 297              		.loc 1 240 0
 298 001c FB1D     		adds	r3, r7, #7
 299 001e 1B78     		ldrb	r3, [r3]
 300 0020 DB09     		lsrs	r3, r3, #7
 301 0022 DBB2     		uxtb	r3, r3
 241:Generated_Source\PSoC4/Button.c **** }
 302              		.loc 1 241 0
 303 0024 1800     		movs	r0, r3
 304 0026 BD46     		mov	sp, r7
 305 0028 02B0     		add	sp, sp, #8
 306              		@ sp needed
 307 002a 80BD     		pop	{r7, pc}
 308              	.L21:
 309              		.align	2
 310              	.L20:
 311 002c 10020440 		.word	1074004496
 312              		.cfi_endproc
 313              	.LFE5:
 314              		.size	Button_ClearInterrupt, .-Button_ClearInterrupt
 315              		.text
 316              	.Letext0:
 317              		.file 2 "Generated_Source\\PSoC4\\cytypes.h"
 318              		.section	.debug_info,"",%progbits
 319              	.Ldebug_info0:
 320 0000 AC010000 		.4byte	0x1ac
 321 0004 0300     		.2byte	0x3
 322 0006 00000000 		.4byte	.Ldebug_abbrev0
 323 000a 04       		.byte	0x4
 324 000b 01       		.uleb128 0x1
 325 000c C2010000 		.4byte	.LASF28
 326 0010 0C       		.byte	0xc
 327 0011 87010000 		.4byte	.LASF29
 328 0015 A2000000 		.4byte	.LASF30
 329 0019 00000000 		.4byte	.Ldebug_ranges0+0
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccVsNmL0.s 			page 11


 330 001d 00000000 		.4byte	0
 331 0021 00000000 		.4byte	0
 332 0025 00000000 		.4byte	.Ldebug_line0
 333 0029 02       		.uleb128 0x2
 334 002a 01       		.byte	0x1
 335 002b 06       		.byte	0x6
 336 002c B6010000 		.4byte	.LASF0
 337 0030 02       		.uleb128 0x2
 338 0031 01       		.byte	0x1
 339 0032 08       		.byte	0x8
 340 0033 51000000 		.4byte	.LASF1
 341 0037 02       		.uleb128 0x2
 342 0038 02       		.byte	0x2
 343 0039 05       		.byte	0x5
 344 003a 98000000 		.4byte	.LASF2
 345 003e 02       		.uleb128 0x2
 346 003f 02       		.byte	0x2
 347 0040 07       		.byte	0x7
 348 0041 77000000 		.4byte	.LASF3
 349 0045 02       		.uleb128 0x2
 350 0046 04       		.byte	0x4
 351 0047 05       		.byte	0x5
 352 0048 AD010000 		.4byte	.LASF4
 353 004c 02       		.uleb128 0x2
 354 004d 04       		.byte	0x4
 355 004e 07       		.byte	0x7
 356 004f 65000000 		.4byte	.LASF5
 357 0053 02       		.uleb128 0x2
 358 0054 08       		.byte	0x8
 359 0055 05       		.byte	0x5
 360 0056 5A010000 		.4byte	.LASF6
 361 005a 02       		.uleb128 0x2
 362 005b 08       		.byte	0x8
 363 005c 07       		.byte	0x7
 364 005d 1C010000 		.4byte	.LASF7
 365 0061 03       		.uleb128 0x3
 366 0062 04       		.byte	0x4
 367 0063 05       		.byte	0x5
 368 0064 696E7400 		.ascii	"int\000"
 369 0068 02       		.uleb128 0x2
 370 0069 04       		.byte	0x4
 371 006a 07       		.byte	0x7
 372 006b 0F010000 		.4byte	.LASF8
 373 006f 04       		.uleb128 0x4
 374 0070 A7010000 		.4byte	.LASF9
 375 0074 02       		.byte	0x2
 376 0075 D201     		.2byte	0x1d2
 377 0077 30000000 		.4byte	0x30
 378 007b 04       		.uleb128 0x4
 379 007c 91000000 		.4byte	.LASF10
 380 0080 02       		.byte	0x2
 381 0081 D301     		.2byte	0x1d3
 382 0083 3E000000 		.4byte	0x3e
 383 0087 04       		.uleb128 0x4
 384 0088 00010000 		.4byte	.LASF11
 385 008c 02       		.byte	0x2
 386 008d D401     		.2byte	0x1d4
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccVsNmL0.s 			page 12


 387 008f 4C000000 		.4byte	0x4c
 388 0093 02       		.uleb128 0x2
 389 0094 04       		.byte	0x4
 390 0095 04       		.byte	0x4
 391 0096 37000000 		.4byte	.LASF12
 392 009a 02       		.uleb128 0x2
 393 009b 08       		.byte	0x8
 394 009c 04       		.byte	0x4
 395 009d 8A000000 		.4byte	.LASF13
 396 00a1 02       		.uleb128 0x2
 397 00a2 01       		.byte	0x1
 398 00a3 08       		.byte	0x8
 399 00a4 75010000 		.4byte	.LASF14
 400 00a8 04       		.uleb128 0x4
 401 00a9 00000000 		.4byte	.LASF15
 402 00ad 02       		.byte	0x2
 403 00ae 7E02     		.2byte	0x27e
 404 00b0 B4000000 		.4byte	0xb4
 405 00b4 05       		.uleb128 0x5
 406 00b5 87000000 		.4byte	0x87
 407 00b9 06       		.uleb128 0x6
 408 00ba 01       		.byte	0x1
 409 00bb 3D000000 		.4byte	.LASF16
 410 00bf 01       		.byte	0x1
 411 00c0 48       		.byte	0x48
 412 00c1 01       		.byte	0x1
 413 00c2 00000000 		.4byte	.LFB0
 414 00c6 30000000 		.4byte	.LFE0
 415 00ca 01       		.byte	0x1
 416 00cb 9C       		.byte	0x9c
 417 00cc 01       		.byte	0x1
 418 00cd E0000000 		.4byte	0xe0
 419 00d1 07       		.uleb128 0x7
 420 00d2 33010000 		.4byte	.LASF18
 421 00d6 01       		.byte	0x1
 422 00d7 48       		.byte	0x48
 423 00d8 6F000000 		.4byte	0x6f
 424 00dc 02       		.byte	0x2
 425 00dd 91       		.byte	0x91
 426 00de 77       		.sleb128 -9
 427 00df 00       		.byte	0
 428 00e0 06       		.uleb128 0x6
 429 00e1 01       		.byte	0x1
 430 00e2 7A010000 		.4byte	.LASF17
 431 00e6 01       		.byte	0x1
 432 00e7 6F       		.byte	0x6f
 433 00e8 01       		.byte	0x1
 434 00e9 00000000 		.4byte	.LFB1
 435 00ed 48000000 		.4byte	.LFE1
 436 00f1 01       		.byte	0x1
 437 00f2 9C       		.byte	0x9c
 438 00f3 01       		.byte	0x1
 439 00f4 15010000 		.4byte	0x115
 440 00f8 07       		.uleb128 0x7
 441 00f9 06000000 		.4byte	.LASF19
 442 00fd 01       		.byte	0x1
 443 00fe 6F       		.byte	0x6f
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccVsNmL0.s 			page 13


 444 00ff 6F000000 		.4byte	0x6f
 445 0103 02       		.byte	0x2
 446 0104 91       		.byte	0x91
 447 0105 6F       		.sleb128 -17
 448 0106 08       		.uleb128 0x8
 449 0107 5F000000 		.4byte	.LASF24
 450 010b 01       		.byte	0x1
 451 010c 71       		.byte	0x71
 452 010d 6F000000 		.4byte	0x6f
 453 0111 02       		.byte	0x2
 454 0112 91       		.byte	0x91
 455 0113 77       		.sleb128 -9
 456 0114 00       		.byte	0
 457 0115 09       		.uleb128 0x9
 458 0116 01       		.byte	0x1
 459 0117 4E010000 		.4byte	.LASF20
 460 011b 01       		.byte	0x1
 461 011c 88       		.byte	0x88
 462 011d 01       		.byte	0x1
 463 011e 6F000000 		.4byte	0x6f
 464 0122 00000000 		.4byte	.LFB2
 465 0126 1C000000 		.4byte	.LFE2
 466 012a 01       		.byte	0x1
 467 012b 9C       		.byte	0x9c
 468 012c 01       		.byte	0x1
 469 012d 09       		.uleb128 0x9
 470 012e 01       		.byte	0x1
 471 012f 0C000000 		.4byte	.LASF21
 472 0133 01       		.byte	0x1
 473 0134 A4       		.byte	0xa4
 474 0135 01       		.byte	0x1
 475 0136 6F000000 		.4byte	0x6f
 476 013a 00000000 		.4byte	.LFB3
 477 013e 1C000000 		.4byte	.LFE3
 478 0142 01       		.byte	0x1
 479 0143 9C       		.byte	0x9c
 480 0144 01       		.byte	0x1
 481 0145 06       		.uleb128 0x6
 482 0146 01       		.byte	0x1
 483 0147 1F000000 		.4byte	.LASF22
 484 014b 01       		.byte	0x1
 485 014c CF       		.byte	0xcf
 486 014d 01       		.byte	0x1
 487 014e 00000000 		.4byte	.LFB4
 488 0152 44000000 		.4byte	.LFE4
 489 0156 01       		.byte	0x1
 490 0157 9C       		.byte	0x9c
 491 0158 01       		.byte	0x1
 492 0159 88010000 		.4byte	0x188
 493 015d 07       		.uleb128 0x7
 494 015e F7000000 		.4byte	.LASF23
 495 0162 01       		.byte	0x1
 496 0163 CF       		.byte	0xcf
 497 0164 7B000000 		.4byte	0x7b
 498 0168 02       		.byte	0x2
 499 0169 91       		.byte	0x91
 500 016a 6E       		.sleb128 -18
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccVsNmL0.s 			page 14


 501 016b 07       		.uleb128 0x7
 502 016c 33010000 		.4byte	.LASF18
 503 0170 01       		.byte	0x1
 504 0171 CF       		.byte	0xcf
 505 0172 7B000000 		.4byte	0x7b
 506 0176 02       		.byte	0x2
 507 0177 91       		.byte	0x91
 508 0178 6C       		.sleb128 -20
 509 0179 08       		.uleb128 0x8
 510 017a 07010000 		.4byte	.LASF25
 511 017e 01       		.byte	0x1
 512 017f D1       		.byte	0xd1
 513 0180 87000000 		.4byte	0x87
 514 0184 02       		.byte	0x2
 515 0185 91       		.byte	0x91
 516 0186 74       		.sleb128 -12
 517 0187 00       		.byte	0
 518 0188 0A       		.uleb128 0xa
 519 0189 01       		.byte	0x1
 520 018a 38010000 		.4byte	.LASF26
 521 018e 01       		.byte	0x1
 522 018f EC       		.byte	0xec
 523 0190 01       		.byte	0x1
 524 0191 6F000000 		.4byte	0x6f
 525 0195 00000000 		.4byte	.LFB5
 526 0199 30000000 		.4byte	.LFE5
 527 019d 01       		.byte	0x1
 528 019e 9C       		.byte	0x9c
 529 019f 01       		.byte	0x1
 530 01a0 08       		.uleb128 0x8
 531 01a1 68010000 		.4byte	.LASF27
 532 01a5 01       		.byte	0x1
 533 01a6 EE       		.byte	0xee
 534 01a7 6F000000 		.4byte	0x6f
 535 01ab 02       		.byte	0x2
 536 01ac 91       		.byte	0x91
 537 01ad 77       		.sleb128 -9
 538 01ae 00       		.byte	0
 539 01af 00       		.byte	0
 540              		.section	.debug_abbrev,"",%progbits
 541              	.Ldebug_abbrev0:
 542 0000 01       		.uleb128 0x1
 543 0001 11       		.uleb128 0x11
 544 0002 01       		.byte	0x1
 545 0003 25       		.uleb128 0x25
 546 0004 0E       		.uleb128 0xe
 547 0005 13       		.uleb128 0x13
 548 0006 0B       		.uleb128 0xb
 549 0007 03       		.uleb128 0x3
 550 0008 0E       		.uleb128 0xe
 551 0009 1B       		.uleb128 0x1b
 552 000a 0E       		.uleb128 0xe
 553 000b 55       		.uleb128 0x55
 554 000c 06       		.uleb128 0x6
 555 000d 11       		.uleb128 0x11
 556 000e 01       		.uleb128 0x1
 557 000f 52       		.uleb128 0x52
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccVsNmL0.s 			page 15


 558 0010 01       		.uleb128 0x1
 559 0011 10       		.uleb128 0x10
 560 0012 06       		.uleb128 0x6
 561 0013 00       		.byte	0
 562 0014 00       		.byte	0
 563 0015 02       		.uleb128 0x2
 564 0016 24       		.uleb128 0x24
 565 0017 00       		.byte	0
 566 0018 0B       		.uleb128 0xb
 567 0019 0B       		.uleb128 0xb
 568 001a 3E       		.uleb128 0x3e
 569 001b 0B       		.uleb128 0xb
 570 001c 03       		.uleb128 0x3
 571 001d 0E       		.uleb128 0xe
 572 001e 00       		.byte	0
 573 001f 00       		.byte	0
 574 0020 03       		.uleb128 0x3
 575 0021 24       		.uleb128 0x24
 576 0022 00       		.byte	0
 577 0023 0B       		.uleb128 0xb
 578 0024 0B       		.uleb128 0xb
 579 0025 3E       		.uleb128 0x3e
 580 0026 0B       		.uleb128 0xb
 581 0027 03       		.uleb128 0x3
 582 0028 08       		.uleb128 0x8
 583 0029 00       		.byte	0
 584 002a 00       		.byte	0
 585 002b 04       		.uleb128 0x4
 586 002c 16       		.uleb128 0x16
 587 002d 00       		.byte	0
 588 002e 03       		.uleb128 0x3
 589 002f 0E       		.uleb128 0xe
 590 0030 3A       		.uleb128 0x3a
 591 0031 0B       		.uleb128 0xb
 592 0032 3B       		.uleb128 0x3b
 593 0033 05       		.uleb128 0x5
 594 0034 49       		.uleb128 0x49
 595 0035 13       		.uleb128 0x13
 596 0036 00       		.byte	0
 597 0037 00       		.byte	0
 598 0038 05       		.uleb128 0x5
 599 0039 35       		.uleb128 0x35
 600 003a 00       		.byte	0
 601 003b 49       		.uleb128 0x49
 602 003c 13       		.uleb128 0x13
 603 003d 00       		.byte	0
 604 003e 00       		.byte	0
 605 003f 06       		.uleb128 0x6
 606 0040 2E       		.uleb128 0x2e
 607 0041 01       		.byte	0x1
 608 0042 3F       		.uleb128 0x3f
 609 0043 0C       		.uleb128 0xc
 610 0044 03       		.uleb128 0x3
 611 0045 0E       		.uleb128 0xe
 612 0046 3A       		.uleb128 0x3a
 613 0047 0B       		.uleb128 0xb
 614 0048 3B       		.uleb128 0x3b
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccVsNmL0.s 			page 16


 615 0049 0B       		.uleb128 0xb
 616 004a 27       		.uleb128 0x27
 617 004b 0C       		.uleb128 0xc
 618 004c 11       		.uleb128 0x11
 619 004d 01       		.uleb128 0x1
 620 004e 12       		.uleb128 0x12
 621 004f 01       		.uleb128 0x1
 622 0050 40       		.uleb128 0x40
 623 0051 0A       		.uleb128 0xa
 624 0052 9742     		.uleb128 0x2117
 625 0054 0C       		.uleb128 0xc
 626 0055 01       		.uleb128 0x1
 627 0056 13       		.uleb128 0x13
 628 0057 00       		.byte	0
 629 0058 00       		.byte	0
 630 0059 07       		.uleb128 0x7
 631 005a 05       		.uleb128 0x5
 632 005b 00       		.byte	0
 633 005c 03       		.uleb128 0x3
 634 005d 0E       		.uleb128 0xe
 635 005e 3A       		.uleb128 0x3a
 636 005f 0B       		.uleb128 0xb
 637 0060 3B       		.uleb128 0x3b
 638 0061 0B       		.uleb128 0xb
 639 0062 49       		.uleb128 0x49
 640 0063 13       		.uleb128 0x13
 641 0064 02       		.uleb128 0x2
 642 0065 0A       		.uleb128 0xa
 643 0066 00       		.byte	0
 644 0067 00       		.byte	0
 645 0068 08       		.uleb128 0x8
 646 0069 34       		.uleb128 0x34
 647 006a 00       		.byte	0
 648 006b 03       		.uleb128 0x3
 649 006c 0E       		.uleb128 0xe
 650 006d 3A       		.uleb128 0x3a
 651 006e 0B       		.uleb128 0xb
 652 006f 3B       		.uleb128 0x3b
 653 0070 0B       		.uleb128 0xb
 654 0071 49       		.uleb128 0x49
 655 0072 13       		.uleb128 0x13
 656 0073 02       		.uleb128 0x2
 657 0074 0A       		.uleb128 0xa
 658 0075 00       		.byte	0
 659 0076 00       		.byte	0
 660 0077 09       		.uleb128 0x9
 661 0078 2E       		.uleb128 0x2e
 662 0079 00       		.byte	0
 663 007a 3F       		.uleb128 0x3f
 664 007b 0C       		.uleb128 0xc
 665 007c 03       		.uleb128 0x3
 666 007d 0E       		.uleb128 0xe
 667 007e 3A       		.uleb128 0x3a
 668 007f 0B       		.uleb128 0xb
 669 0080 3B       		.uleb128 0x3b
 670 0081 0B       		.uleb128 0xb
 671 0082 27       		.uleb128 0x27
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccVsNmL0.s 			page 17


 672 0083 0C       		.uleb128 0xc
 673 0084 49       		.uleb128 0x49
 674 0085 13       		.uleb128 0x13
 675 0086 11       		.uleb128 0x11
 676 0087 01       		.uleb128 0x1
 677 0088 12       		.uleb128 0x12
 678 0089 01       		.uleb128 0x1
 679 008a 40       		.uleb128 0x40
 680 008b 0A       		.uleb128 0xa
 681 008c 9742     		.uleb128 0x2117
 682 008e 0C       		.uleb128 0xc
 683 008f 00       		.byte	0
 684 0090 00       		.byte	0
 685 0091 0A       		.uleb128 0xa
 686 0092 2E       		.uleb128 0x2e
 687 0093 01       		.byte	0x1
 688 0094 3F       		.uleb128 0x3f
 689 0095 0C       		.uleb128 0xc
 690 0096 03       		.uleb128 0x3
 691 0097 0E       		.uleb128 0xe
 692 0098 3A       		.uleb128 0x3a
 693 0099 0B       		.uleb128 0xb
 694 009a 3B       		.uleb128 0x3b
 695 009b 0B       		.uleb128 0xb
 696 009c 27       		.uleb128 0x27
 697 009d 0C       		.uleb128 0xc
 698 009e 49       		.uleb128 0x49
 699 009f 13       		.uleb128 0x13
 700 00a0 11       		.uleb128 0x11
 701 00a1 01       		.uleb128 0x1
 702 00a2 12       		.uleb128 0x12
 703 00a3 01       		.uleb128 0x1
 704 00a4 40       		.uleb128 0x40
 705 00a5 0A       		.uleb128 0xa
 706 00a6 9742     		.uleb128 0x2117
 707 00a8 0C       		.uleb128 0xc
 708 00a9 00       		.byte	0
 709 00aa 00       		.byte	0
 710 00ab 00       		.byte	0
 711              		.section	.debug_aranges,"",%progbits
 712 0000 44000000 		.4byte	0x44
 713 0004 0200     		.2byte	0x2
 714 0006 00000000 		.4byte	.Ldebug_info0
 715 000a 04       		.byte	0x4
 716 000b 00       		.byte	0
 717 000c 0000     		.2byte	0
 718 000e 0000     		.2byte	0
 719 0010 00000000 		.4byte	.LFB0
 720 0014 30000000 		.4byte	.LFE0-.LFB0
 721 0018 00000000 		.4byte	.LFB1
 722 001c 48000000 		.4byte	.LFE1-.LFB1
 723 0020 00000000 		.4byte	.LFB2
 724 0024 1C000000 		.4byte	.LFE2-.LFB2
 725 0028 00000000 		.4byte	.LFB3
 726 002c 1C000000 		.4byte	.LFE3-.LFB3
 727 0030 00000000 		.4byte	.LFB4
 728 0034 44000000 		.4byte	.LFE4-.LFB4
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccVsNmL0.s 			page 18


 729 0038 00000000 		.4byte	.LFB5
 730 003c 30000000 		.4byte	.LFE5-.LFB5
 731 0040 00000000 		.4byte	0
 732 0044 00000000 		.4byte	0
 733              		.section	.debug_ranges,"",%progbits
 734              	.Ldebug_ranges0:
 735 0000 00000000 		.4byte	.LFB0
 736 0004 30000000 		.4byte	.LFE0
 737 0008 00000000 		.4byte	.LFB1
 738 000c 48000000 		.4byte	.LFE1
 739 0010 00000000 		.4byte	.LFB2
 740 0014 1C000000 		.4byte	.LFE2
 741 0018 00000000 		.4byte	.LFB3
 742 001c 1C000000 		.4byte	.LFE3
 743 0020 00000000 		.4byte	.LFB4
 744 0024 44000000 		.4byte	.LFE4
 745 0028 00000000 		.4byte	.LFB5
 746 002c 30000000 		.4byte	.LFE5
 747 0030 00000000 		.4byte	0
 748 0034 00000000 		.4byte	0
 749              		.section	.debug_line,"",%progbits
 750              	.Ldebug_line0:
 751 0000 BA000000 		.section	.debug_str,"MS",%progbits,1
 751      02004300 
 751      00000201 
 751      FB0E0D00 
 751      01010101 
 752              	.LASF15:
 753 0000 72656733 		.ascii	"reg32\000"
 753      3200
 754              	.LASF19:
 755 0006 76616C75 		.ascii	"value\000"
 755      6500
 756              	.LASF21:
 757 000c 42757474 		.ascii	"Button_ReadDataReg\000"
 757      6F6E5F52 
 757      65616444 
 757      61746152 
 757      656700
 758              	.LASF22:
 759 001f 42757474 		.ascii	"Button_SetInterruptMode\000"
 759      6F6E5F53 
 759      6574496E 
 759      74657272 
 759      7570744D 
 760              	.LASF12:
 761 0037 666C6F61 		.ascii	"float\000"
 761      7400
 762              	.LASF16:
 763 003d 42757474 		.ascii	"Button_SetDriveMode\000"
 763      6F6E5F53 
 763      65744472 
 763      6976654D 
 763      6F646500 
 764              	.LASF1:
 765 0051 756E7369 		.ascii	"unsigned char\000"
 765      676E6564 
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccVsNmL0.s 			page 19


 765      20636861 
 765      7200
 766              	.LASF24:
 767 005f 64725661 		.ascii	"drVal\000"
 767      6C00
 768              	.LASF5:
 769 0065 6C6F6E67 		.ascii	"long unsigned int\000"
 769      20756E73 
 769      69676E65 
 769      6420696E 
 769      7400
 770              	.LASF3:
 771 0077 73686F72 		.ascii	"short unsigned int\000"
 771      7420756E 
 771      7369676E 
 771      65642069 
 771      6E7400
 772              	.LASF13:
 773 008a 646F7562 		.ascii	"double\000"
 773      6C6500
 774              	.LASF10:
 775 0091 75696E74 		.ascii	"uint16\000"
 775      313600
 776              	.LASF2:
 777 0098 73686F72 		.ascii	"short int\000"
 777      7420696E 
 777      7400
 778              	.LASF30:
 779 00a2 433A5C55 		.ascii	"C:\\Users\\hasur\\Documents\\PSoC_4_BLE_Pressure_Se"
 779      73657273 
 779      5C686173 
 779      75725C44 
 779      6F63756D 
 780 00d1 6E736F72 		.ascii	"nsor\\PSoC_4_BLE_Pressure_Sensor.cydsn\000"
 780      5C50536F 
 780      435F345F 
 780      424C455F 
 780      50726573 
 781              	.LASF23:
 782 00f7 706F7369 		.ascii	"position\000"
 782      74696F6E 
 782      00
 783              	.LASF11:
 784 0100 75696E74 		.ascii	"uint32\000"
 784      333200
 785              	.LASF25:
 786 0107 696E7472 		.ascii	"intrCfg\000"
 786      43666700 
 787              	.LASF8:
 788 010f 756E7369 		.ascii	"unsigned int\000"
 788      676E6564 
 788      20696E74 
 788      00
 789              	.LASF7:
 790 011c 6C6F6E67 		.ascii	"long long unsigned int\000"
 790      206C6F6E 
 790      6720756E 
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccVsNmL0.s 			page 20


 790      7369676E 
 790      65642069 
 791              	.LASF18:
 792 0133 6D6F6465 		.ascii	"mode\000"
 792      00
 793              	.LASF26:
 794 0138 42757474 		.ascii	"Button_ClearInterrupt\000"
 794      6F6E5F43 
 794      6C656172 
 794      496E7465 
 794      72727570 
 795              	.LASF20:
 796 014e 42757474 		.ascii	"Button_Read\000"
 796      6F6E5F52 
 796      65616400 
 797              	.LASF6:
 798 015a 6C6F6E67 		.ascii	"long long int\000"
 798      206C6F6E 
 798      6720696E 
 798      7400
 799              	.LASF27:
 800 0168 6D61736B 		.ascii	"maskedStatus\000"
 800      65645374 
 800      61747573 
 800      00
 801              	.LASF14:
 802 0175 63686172 		.ascii	"char\000"
 802      00
 803              	.LASF17:
 804 017a 42757474 		.ascii	"Button_Write\000"
 804      6F6E5F57 
 804      72697465 
 804      00
 805              	.LASF29:
 806 0187 47656E65 		.ascii	"Generated_Source\\PSoC4\\Button.c\000"
 806      72617465 
 806      645F536F 
 806      75726365 
 806      5C50536F 
 807              	.LASF9:
 808 01a7 75696E74 		.ascii	"uint8\000"
 808      3800
 809              	.LASF4:
 810 01ad 6C6F6E67 		.ascii	"long int\000"
 810      20696E74 
 810      00
 811              	.LASF0:
 812 01b6 7369676E 		.ascii	"signed char\000"
 812      65642063 
 812      68617200 
 813              	.LASF28:
 814 01c2 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 814      43313120 
 814      352E342E 
 814      31203230 
 814      31363036 
 815 01f5 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m0 -mthumb -g -g"
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccVsNmL0.s 			page 21


 815      20726576 
 815      6973696F 
 815      6E203233 
 815      37373135 
 816 0228 64776172 		.ascii	"dwarf-3 -O0 -ffunction-sections -ffat-lto-objects\000"
 816      662D3320 
 816      2D4F3020 
 816      2D666675 
 816      6E637469 
 817              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
