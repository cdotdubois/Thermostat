ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"CyLib.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	cydelayFreqHz
  20              		.data
  21              		.align	2
  22              		.type	cydelayFreqHz, %object
  23              		.size	cydelayFreqHz, 4
  24              	cydelayFreqHz:
  25 0000 001BB700 		.word	12000000
  26              		.global	cydelayFreqKhz
  27              		.align	2
  28              		.type	cydelayFreqKhz, %object
  29              		.size	cydelayFreqKhz, 4
  30              	cydelayFreqKhz:
  31 0004 E02E0000 		.word	12000
  32              		.global	cydelayFreqMhz
  33              		.type	cydelayFreqMhz, %object
  34              		.size	cydelayFreqMhz, 1
  35              	cydelayFreqMhz:
  36 0008 0C       		.byte	12
  37              		.global	cydelay32kMs
  38 0009 000000   		.align	2
  39              		.type	cydelay32kMs, %object
  40              		.size	cydelay32kMs, 4
  41              	cydelay32kMs:
  42 000c 00007017 		.word	393216000
  43              		.bss
  44              		.align	2
  45              	CySysTickCallbacks:
  46 0000 00000000 		.space	20
  46      00000000 
  46      00000000 
  46      00000000 
  46      00000000 
  47              		.global	CySysTickInitVar
  48              		.align	2
  49              		.type	CySysTickInitVar, %object
  50              		.size	CySysTickInitVar, 4
  51              	CySysTickInitVar:
  52 0014 00000000 		.space	4
  53              		.global	cyImoFreqMhz2Reg
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 2


  54              		.section	.rodata
  55              		.align	2
  56              		.type	cyImoFreqMhz2Reg, %object
  57              		.size	cyImoFreqMhz2Reg, 46
  58              	cyImoFreqMhz2Reg:
  59 0000 03       		.byte	3
  60 0001 04       		.byte	4
  61 0002 05       		.byte	5
  62 0003 06       		.byte	6
  63 0004 07       		.byte	7
  64 0005 08       		.byte	8
  65 0006 09       		.byte	9
  66 0007 0A       		.byte	10
  67 0008 0B       		.byte	11
  68 0009 0C       		.byte	12
  69 000a 0E       		.byte	14
  70 000b 0F       		.byte	15
  71 000c 10       		.byte	16
  72 000d 11       		.byte	17
  73 000e 12       		.byte	18
  74 000f 13       		.byte	19
  75 0010 14       		.byte	20
  76 0011 15       		.byte	21
  77 0012 16       		.byte	22
  78 0013 17       		.byte	23
  79 0014 18       		.byte	24
  80 0015 19       		.byte	25
  81 0016 1B       		.byte	27
  82 0017 1C       		.byte	28
  83 0018 1D       		.byte	29
  84 0019 1E       		.byte	30
  85 001a 1F       		.byte	31
  86 001b 20       		.byte	32
  87 001c 21       		.byte	33
  88 001d 22       		.byte	34
  89 001e 23       		.byte	35
  90 001f 25       		.byte	37
  91 0020 26       		.byte	38
  92 0021 27       		.byte	39
  93 0022 28       		.byte	40
  94 0023 29       		.byte	41
  95 0024 2A       		.byte	42
  96 0025 2B       		.byte	43
  97 0026 2E       		.byte	46
  98 0027 2F       		.byte	47
  99 0028 30       		.byte	48
 100 0029 31       		.byte	49
 101 002a 32       		.byte	50
 102 002b 33       		.byte	51
 103 002c 34       		.byte	52
 104 002d 35       		.byte	53
 105              		.global	CySysClkPumpConfig
 106              		.data
 107              		.align	2
 108              		.type	CySysClkPumpConfig, %object
 109              		.size	CySysClkPumpConfig, 4
 110              	CySysClkPumpConfig:
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 3


 111 0010 01000000 		.word	1
 112              		.section	.text.CySysClkImoStart,"ax",%progbits
 113              		.align	2
 114              		.global	CySysClkImoStart
 115              		.code	16
 116              		.thumb_func
 117              		.type	CySysClkImoStart, %function
 118              	CySysClkImoStart:
 119              	.LFB2:
 120              		.file 1 "Generated_Source\\PSoC4\\CyLib.c"
   1:Generated_Source\PSoC4/CyLib.c **** /***************************************************************************//**
   2:Generated_Source\PSoC4/CyLib.c **** * \file CyLib.c
   3:Generated_Source\PSoC4/CyLib.c **** * \version 5.60
   4:Generated_Source\PSoC4/CyLib.c **** *
   5:Generated_Source\PSoC4/CyLib.c **** * \brief Provides a system API for the Clocking, Interrupts, SysTick, and
   6:Generated_Source\PSoC4/CyLib.c **** * Voltage Detect.
   7:Generated_Source\PSoC4/CyLib.c **** *
   8:Generated_Source\PSoC4/CyLib.c **** * \note Documentation of the API's in this file is located in the PSoC 4 System
   9:Generated_Source\PSoC4/CyLib.c **** * Reference Guide provided with PSoC Creator.
  10:Generated_Source\PSoC4/CyLib.c **** *
  11:Generated_Source\PSoC4/CyLib.c **** ********************************************************************************
  12:Generated_Source\PSoC4/CyLib.c **** * \copyright
  13:Generated_Source\PSoC4/CyLib.c **** * Copyright 2010-2017, Cypress Semiconductor Corporation.  All rights reserved.
  14:Generated_Source\PSoC4/CyLib.c **** * You may use this file only in accordance with the license, terms, conditions,
  15:Generated_Source\PSoC4/CyLib.c **** * disclaimers, and limitations in the end user license agreement accompanying
  16:Generated_Source\PSoC4/CyLib.c **** * the software package with which this file was provided.
  17:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
  18:Generated_Source\PSoC4/CyLib.c **** 
  19:Generated_Source\PSoC4/CyLib.c **** #include "CyLib.h"
  20:Generated_Source\PSoC4/CyLib.c **** 
  21:Generated_Source\PSoC4/CyLib.c **** /* CySysClkWriteImoFreq() || CySysClkImoEnableWcoLock() */
  22:Generated_Source\PSoC4/CyLib.c **** #if ((CY_IP_SRSSV2 && CY_IP_FMLT) || CY_IP_IMO_TRIMMABLE_BY_WCO)
  23:Generated_Source\PSoC4/CyLib.c ****     #include "CyFlash.h"
  24:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_SRSSV2 && CY_IP_FMLT) */
  25:Generated_Source\PSoC4/CyLib.c **** 
  26:Generated_Source\PSoC4/CyLib.c **** /* Do not use these definitions directly in your application */
  27:Generated_Source\PSoC4/CyLib.c **** uint32 cydelayFreqHz  = CYDEV_BCLK__SYSCLK__HZ;
  28:Generated_Source\PSoC4/CyLib.c **** uint32 cydelayFreqKhz = (CYDEV_BCLK__SYSCLK__HZ + CY_DELAY_1K_MINUS_1_THRESHOLD) / CY_DELAY_1K_THRE
  29:Generated_Source\PSoC4/CyLib.c **** uint8  cydelayFreqMhz = (uint8)((CYDEV_BCLK__SYSCLK__HZ + CY_DELAY_1M_MINUS_1_THRESHOLD) / CY_DELAY
  30:Generated_Source\PSoC4/CyLib.c **** uint32 cydelay32kMs   = CY_DELAY_MS_OVERFLOW * ((CYDEV_BCLK__SYSCLK__HZ + CY_DELAY_1K_MINUS_1_THRES
  31:Generated_Source\PSoC4/CyLib.c ****                         CY_DELAY_1K_THRESHOLD);
  32:Generated_Source\PSoC4/CyLib.c **** 
  33:Generated_Source\PSoC4/CyLib.c **** 
  34:Generated_Source\PSoC4/CyLib.c **** static cySysTickCallback CySysTickCallbacks[CY_SYS_SYST_NUM_OF_CALLBACKS];
  35:Generated_Source\PSoC4/CyLib.c **** static void CySysTickServiceCallbacks(void);
  36:Generated_Source\PSoC4/CyLib.c **** 
  37:Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_SRSSV2 && CY_IP_PLL)
  38:Generated_Source\PSoC4/CyLib.c ****     static uint32 CySysClkPllGetBypassMode(uint32 pll);
  39:Generated_Source\PSoC4/CyLib.c ****     static cystatus CySysClkPllConfigChangeAllowed(uint32 pll);
  40:Generated_Source\PSoC4/CyLib.c **** #endif /* #if (CY_IP_SRSSV2 && CY_IP_PLL) */
  41:Generated_Source\PSoC4/CyLib.c **** 
  42:Generated_Source\PSoC4/CyLib.c **** 
  43:Generated_Source\PSoC4/CyLib.c **** /***************************************************************************//**
  44:Generated_Source\PSoC4/CyLib.c **** * Indicates whether or not the SysTick has been initialized. The variable is
  45:Generated_Source\PSoC4/CyLib.c **** * initialized to 0 and set to 1 the first time CySysTickStart() is called.
  46:Generated_Source\PSoC4/CyLib.c **** *
  47:Generated_Source\PSoC4/CyLib.c **** * This allows the component to restart without reinitialization after the first
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 4


  48:Generated_Source\PSoC4/CyLib.c **** * call to the CySysTickStart() routine.
  49:Generated_Source\PSoC4/CyLib.c **** *
  50:Generated_Source\PSoC4/CyLib.c **** * If reinitialization of the SysTick is required, call CySysTickInit() before
  51:Generated_Source\PSoC4/CyLib.c **** * calling CySysTickStart(). Alternatively, the SysTick can be reinitialized by
  52:Generated_Source\PSoC4/CyLib.c **** * calling the CySysTickInit() and CySysTickEnable() functions.
  53:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
  54:Generated_Source\PSoC4/CyLib.c **** uint32 CySysTickInitVar = 0u;
  55:Generated_Source\PSoC4/CyLib.c **** 
  56:Generated_Source\PSoC4/CyLib.c **** 
  57:Generated_Source\PSoC4/CyLib.c **** #if(CY_IP_SRSSV2)
  58:Generated_Source\PSoC4/CyLib.c ****         /* Conversion between CySysClkWriteImoFreq() parameter and register's value */
  59:Generated_Source\PSoC4/CyLib.c ****         const uint8 cyImoFreqMhz2Reg[CY_SYS_CLK_IMO_FREQ_TABLE_SIZE] = {
  60:Generated_Source\PSoC4/CyLib.c ****             /*  3 MHz */ 0x03u,  /*  4 MHz */ 0x04u,  /*  5 MHz */ 0x05u,  /*  6 MHz */ 0x06u,
  61:Generated_Source\PSoC4/CyLib.c ****             /*  7 MHz */ 0x07u,  /*  8 MHz */ 0x08u,  /*  9 MHz */ 0x09u,  /* 10 MHz */ 0x0Au,
  62:Generated_Source\PSoC4/CyLib.c ****             /* 11 MHz */ 0x0Bu,  /* 12 MHz */ 0x0Cu,  /* 13 MHz */ 0x0Eu,  /* 14 MHz */ 0x0Fu,
  63:Generated_Source\PSoC4/CyLib.c ****             /* 15 MHz */ 0x10u,  /* 16 MHz */ 0x11u,  /* 17 MHz */ 0x12u,  /* 18 MHz */ 0x13u,
  64:Generated_Source\PSoC4/CyLib.c ****             /* 19 MHz */ 0x14u,  /* 20 MHz */ 0x15u,  /* 21 MHz */ 0x16u,  /* 22 MHz */ 0x17u,
  65:Generated_Source\PSoC4/CyLib.c ****             /* 23 MHz */ 0x18u,  /* 24 MHz */ 0x19u,  /* 25 MHz */ 0x1Bu,  /* 26 MHz */ 0x1Cu,
  66:Generated_Source\PSoC4/CyLib.c ****             /* 27 MHz */ 0x1Du,  /* 28 MHz */ 0x1Eu,  /* 29 MHz */ 0x1Fu,  /* 30 MHz */ 0x20u,
  67:Generated_Source\PSoC4/CyLib.c ****             /* 31 MHz */ 0x21u,  /* 32 MHz */ 0x22u,  /* 33 MHz */ 0x23u,  /* 34 MHz */ 0x25u,
  68:Generated_Source\PSoC4/CyLib.c ****             /* 35 MHz */ 0x26u,  /* 36 MHz */ 0x27u,  /* 37 MHz */ 0x28u,  /* 38 MHz */ 0x29u,
  69:Generated_Source\PSoC4/CyLib.c ****             /* 39 MHz */ 0x2Au,  /* 40 MHz */ 0x2Bu,  /* 41 MHz */ 0x2Eu,  /* 42 MHz */ 0x2Fu,
  70:Generated_Source\PSoC4/CyLib.c ****             /* 43 MHz */ 0x30u,  /* 44 MHz */ 0x31u,  /* 45 MHz */ 0x32u,  /* 46 MHz */ 0x33u,
  71:Generated_Source\PSoC4/CyLib.c ****             /* 47 MHz */ 0x34u,  /* 48 MHz */ 0x35u };
  72:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_SRSSV2) */
  73:Generated_Source\PSoC4/CyLib.c **** 
  74:Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
  75:Generated_Source\PSoC4/CyLib.c ****         /* Conversion between IMO frequency and WCO DPLL max offset steps */
  76:Generated_Source\PSoC4/CyLib.c ****         const uint8 cyImoFreqMhz2DpllOffset[CY_SYS_CLK_IMO_FREQ_WCO_DPLL_TABLE_SIZE] = {
  77:Generated_Source\PSoC4/CyLib.c ****             /* 26 MHz */  238u, /* 27 MHz */  219u, /* 28 MHz */  201u, /* 29 MHz */  185u,
  78:Generated_Source\PSoC4/CyLib.c ****             /* 30 MHz */  170u, /* 31 MHz */  155u, /* 32 MHz */  142u, /* 33 MHz */  130u,
  79:Generated_Source\PSoC4/CyLib.c ****             /* 34 MHz */  118u, /* 35 MHz */  107u, /* 36 MHz */   96u, /* 37 MHz */  86u,
  80:Generated_Source\PSoC4/CyLib.c ****             /* 38 MHz */   77u, /* 39 MHz */   68u, /* 40 MHz */   59u, /* 41 MHz */  51u,
  81:Generated_Source\PSoC4/CyLib.c ****             /* 42 MHz */   44u, /* 43 MHz */   36u, /* 44 MHz */   29u, /* 45 MHz */  23u,
  82:Generated_Source\PSoC4/CyLib.c ****             /* 46 MHz */   16u, /* 47 MHz */   10u, /* 48 MHz */   4u };
  83:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
  84:Generated_Source\PSoC4/CyLib.c **** 
  85:Generated_Source\PSoC4/CyLib.c **** /* Stored CY_SYS_CLK_IMO_TRIM4_REG when modified for USB lock */
  86:Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_IMO_TRIMMABLE_BY_USB && CY_IP_SRSSV2)
  87:Generated_Source\PSoC4/CyLib.c ****     uint32 CySysClkImoTrim4 = 0u;
  88:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_IMO_TRIMMABLE_BY_USB && CY_IP_SRSSV2) */
  89:Generated_Source\PSoC4/CyLib.c **** 
  90:Generated_Source\PSoC4/CyLib.c **** /* Stored PUMP_SEL configuration during disable (IMO output by default) */
  91:Generated_Source\PSoC4/CyLib.c **** uint32 CySysClkPumpConfig = CY_SYS_CLK_PUMP_ENABLE;
  92:Generated_Source\PSoC4/CyLib.c **** 
  93:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
  94:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysClkImoStart
  95:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
  96:Generated_Source\PSoC4/CyLib.c **** *
  97:Generated_Source\PSoC4/CyLib.c **** * Enables the IMO.
  98:Generated_Source\PSoC4/CyLib.c **** *
  99:Generated_Source\PSoC4/CyLib.c **** * For PSoC 4100M / PSoC 4200M / PSoC 4000S / PSoC 4100S / PSoC 4400 devices,
 100:Generated_Source\PSoC4/CyLib.c **** * this function will also enable WCO lock if selected in the Design Wide
 101:Generated_Source\PSoC4/CyLib.c **** * Resources tab.
 102:Generated_Source\PSoC4/CyLib.c **** *
 103:Generated_Source\PSoC4/CyLib.c **** * For PSoC 4200L / devices, this function will also enable USB lock if selected
 104:Generated_Source\PSoC4/CyLib.c **** * in the Design Wide Resources tab.
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 5


 105:Generated_Source\PSoC4/CyLib.c **** *
 106:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
 107:Generated_Source\PSoC4/CyLib.c **** void CySysClkImoStart(void)
 108:Generated_Source\PSoC4/CyLib.c **** {
 121              		.loc 1 108 0
 122              		.cfi_startproc
 123              		@ args = 0, pretend = 0, frame = 0
 124              		@ frame_needed = 1, uses_anonymous_args = 0
 125 0000 80B5     		push	{r7, lr}
 126              		.cfi_def_cfa_offset 8
 127              		.cfi_offset 7, -8
 128              		.cfi_offset 14, -4
 129 0002 00AF     		add	r7, sp, #0
 130              		.cfi_def_cfa_register 7
 109:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_CLK_IMO_CONFIG_REG |= CY_SYS_CLK_IMO_CONFIG_ENABLE;
 131              		.loc 1 109 0
 132 0004 044B     		ldr	r3, .L2
 133 0006 044A     		ldr	r2, .L2
 134 0008 1268     		ldr	r2, [r2]
 135 000a 8021     		movs	r1, #128
 136 000c 0906     		lsls	r1, r1, #24
 137 000e 0A43     		orrs	r2, r1
 138 0010 1A60     		str	r2, [r3]
 110:Generated_Source\PSoC4/CyLib.c **** 
 111:Generated_Source\PSoC4/CyLib.c ****     #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
 112:Generated_Source\PSoC4/CyLib.c ****         #if (CYDEV_IMO_TRIMMED_BY_WCO == 1u)
 113:Generated_Source\PSoC4/CyLib.c ****             CySysClkImoEnableWcoLock();
 114:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CYDEV_IMO_TRIMMED_BY_WCO == 1u) */
 115:Generated_Source\PSoC4/CyLib.c ****     #endif  /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
 116:Generated_Source\PSoC4/CyLib.c **** 
 117:Generated_Source\PSoC4/CyLib.c **** 
 118:Generated_Source\PSoC4/CyLib.c ****     #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 119:Generated_Source\PSoC4/CyLib.c ****         #if (CYDEV_IMO_TRIMMED_BY_USB == 1u)
 120:Generated_Source\PSoC4/CyLib.c ****             CySysClkImoEnableUsbLock();
 121:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CYDEV_IMO_TRIMMED_BY_USB == 1u) */
 122:Generated_Source\PSoC4/CyLib.c ****     #endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
 123:Generated_Source\PSoC4/CyLib.c **** 
 124:Generated_Source\PSoC4/CyLib.c **** }
 139              		.loc 1 124 0
 140 0012 C046     		nop
 141 0014 BD46     		mov	sp, r7
 142              		@ sp needed
 143 0016 80BD     		pop	{r7, pc}
 144              	.L3:
 145              		.align	2
 146              	.L2:
 147 0018 08010B40 		.word	1074462984
 148              		.cfi_endproc
 149              	.LFE2:
 150              		.size	CySysClkImoStart, .-CySysClkImoStart
 151              		.section	.text.CySysClkImoStop,"ax",%progbits
 152              		.align	2
 153              		.global	CySysClkImoStop
 154              		.code	16
 155              		.thumb_func
 156              		.type	CySysClkImoStop, %function
 157              	CySysClkImoStop:
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 6


 158              	.LFB3:
 125:Generated_Source\PSoC4/CyLib.c **** 
 126:Generated_Source\PSoC4/CyLib.c **** 
 127:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
 128:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysClkImoStop
 129:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
 130:Generated_Source\PSoC4/CyLib.c **** *
 131:Generated_Source\PSoC4/CyLib.c **** * Disables the IMO.
 132:Generated_Source\PSoC4/CyLib.c **** *
 133:Generated_Source\PSoC4/CyLib.c **** * For PSoC 4100M / PSoC 4200M / PSoC 4000S / PSoC 4100S / PSoC 4400 devices,
 134:Generated_Source\PSoC4/CyLib.c **** * this function will also disable WCO lock.
 135:Generated_Source\PSoC4/CyLib.c **** *
 136:Generated_Source\PSoC4/CyLib.c **** * For PSoC PSoC 4200L devices, this function will also disable USB lock.
 137:Generated_Source\PSoC4/CyLib.c **** *
 138:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
 139:Generated_Source\PSoC4/CyLib.c **** void CySysClkImoStop(void)
 140:Generated_Source\PSoC4/CyLib.c **** {
 159              		.loc 1 140 0
 160              		.cfi_startproc
 161              		@ args = 0, pretend = 0, frame = 0
 162              		@ frame_needed = 1, uses_anonymous_args = 0
 163 0000 80B5     		push	{r7, lr}
 164              		.cfi_def_cfa_offset 8
 165              		.cfi_offset 7, -8
 166              		.cfi_offset 14, -4
 167 0002 00AF     		add	r7, sp, #0
 168              		.cfi_def_cfa_register 7
 141:Generated_Source\PSoC4/CyLib.c ****     #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
 142:Generated_Source\PSoC4/CyLib.c ****         CySysClkImoDisableWcoLock();
 143:Generated_Source\PSoC4/CyLib.c ****     #endif  /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
 144:Generated_Source\PSoC4/CyLib.c **** 
 145:Generated_Source\PSoC4/CyLib.c ****     #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 146:Generated_Source\PSoC4/CyLib.c ****         CySysClkImoDisableUsbLock();
 147:Generated_Source\PSoC4/CyLib.c ****     #endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
 148:Generated_Source\PSoC4/CyLib.c **** 
 149:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_CLK_IMO_CONFIG_REG &= ( uint32 ) ( ~( uint32 )CY_SYS_CLK_IMO_CONFIG_ENABLE);
 169              		.loc 1 149 0
 170 0004 044B     		ldr	r3, .L5
 171 0006 044A     		ldr	r2, .L5
 172 0008 1268     		ldr	r2, [r2]
 173 000a 5200     		lsls	r2, r2, #1
 174 000c 5208     		lsrs	r2, r2, #1
 175 000e 1A60     		str	r2, [r3]
 150:Generated_Source\PSoC4/CyLib.c **** }
 176              		.loc 1 150 0
 177 0010 C046     		nop
 178 0012 BD46     		mov	sp, r7
 179              		@ sp needed
 180 0014 80BD     		pop	{r7, pc}
 181              	.L6:
 182 0016 C046     		.align	2
 183              	.L5:
 184 0018 08010B40 		.word	1074462984
 185              		.cfi_endproc
 186              	.LFE3:
 187              		.size	CySysClkImoStop, .-CySysClkImoStop
 188              		.section	.text.CySysClkWriteHfclkDirect,"ax",%progbits
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 7


 189              		.align	2
 190              		.global	CySysClkWriteHfclkDirect
 191              		.code	16
 192              		.thumb_func
 193              		.type	CySysClkWriteHfclkDirect, %function
 194              	CySysClkWriteHfclkDirect:
 195              	.LFB4:
 151:Generated_Source\PSoC4/CyLib.c **** 
 152:Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
 153:Generated_Source\PSoC4/CyLib.c **** 
 154:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
 155:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkImoEnableWcoLock
 156:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
 157:Generated_Source\PSoC4/CyLib.c ****     *
 158:Generated_Source\PSoC4/CyLib.c ****     * Enables the IMO to WCO lock feature. This function works only if the WCO is
 159:Generated_Source\PSoC4/CyLib.c ****     * already enabled. If the WCO is not enabled then this function returns
 160:Generated_Source\PSoC4/CyLib.c ****     * without enabling the lock feature.
 161:Generated_Source\PSoC4/CyLib.c ****     *
 162:Generated_Source\PSoC4/CyLib.c ****     * It takes up to 20 ms for the IMO to stabilize. The delay is implemented with
 163:Generated_Source\PSoC4/CyLib.c ****     * CyDelay() function. The delay interval is measured based on the system
 164:Generated_Source\PSoC4/CyLib.c ****     * frequency defined by PSoC Creator at build time. If System clock frequency
 165:Generated_Source\PSoC4/CyLib.c ****     * is changed in runtime, the CyDelayFreq() with the appropriate parameter
 166:Generated_Source\PSoC4/CyLib.c ****     * should be called.
 167:Generated_Source\PSoC4/CyLib.c ****     *
 168:Generated_Source\PSoC4/CyLib.c ****     * For PSoC 4200L devices, note that the IMO can lock to either WCO or USB
 169:Generated_Source\PSoC4/CyLib.c ****     * but not both.
 170:Generated_Source\PSoC4/CyLib.c ****     *
 171:Generated_Source\PSoC4/CyLib.c ****     * This function is applicable for PSoC 4100M / PSoC 4200M / PSoC 4000S /
 172:Generated_Source\PSoC4/CyLib.c ****     * PSoC 4100S / PSoC 4400 / PSoC 4200L.
 173:Generated_Source\PSoC4/CyLib.c ****     *
 174:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
 175:Generated_Source\PSoC4/CyLib.c ****     void CySysClkImoEnableWcoLock(void)
 176:Generated_Source\PSoC4/CyLib.c ****     {
 177:Generated_Source\PSoC4/CyLib.c ****         #if(CY_IP_SRSSV2)
 178:Generated_Source\PSoC4/CyLib.c ****             uint32 i;
 179:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_SRSSV2) */
 180:Generated_Source\PSoC4/CyLib.c **** 
 181:Generated_Source\PSoC4/CyLib.c ****         uint32 freq;
 182:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
 183:Generated_Source\PSoC4/CyLib.c ****         uint32 regTmp;
 184:Generated_Source\PSoC4/CyLib.c ****         uint32 lfLimit = 0u;
 185:Generated_Source\PSoC4/CyLib.c ****         volatile uint32 flashCtlReg;
 186:Generated_Source\PSoC4/CyLib.c **** 
 187:Generated_Source\PSoC4/CyLib.c ****         if (0u != CySysClkWcoEnabled())
 188:Generated_Source\PSoC4/CyLib.c ****         {
 189:Generated_Source\PSoC4/CyLib.c ****             interruptState = CyEnterCriticalSection();
 190:Generated_Source\PSoC4/CyLib.c **** 
 191:Generated_Source\PSoC4/CyLib.c ****             /* Set oscillator interface control port to WCO */
 192:Generated_Source\PSoC4/CyLib.c ****             #if (CY_IP_IMO_TRIMMABLE_BY_WCO && CY_IP_IMO_TRIMMABLE_BY_USB)
 193:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_CLK_OSCINTF_CTL_REG =
 194:Generated_Source\PSoC4/CyLib.c ****                     (CY_SYS_CLK_OSCINTF_CTL_REG & (uint32) ~CY_SYS_CLK_OSCINTF_CTL_PORT_SEL_MASK) |
 195:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_CLK_OSCINTF_CTL_PORT_SEL_WCO;
 196:Generated_Source\PSoC4/CyLib.c ****             #endif /* (CY_IP_IMO_TRIMMABLE_BY_WCO && CY_IP_IMO_TRIMMABLE_BY_USB) */
 197:Generated_Source\PSoC4/CyLib.c **** 
 198:Generated_Source\PSoC4/CyLib.c ****             /* Get current IMO frequency based on the register value */
 199:Generated_Source\PSoC4/CyLib.c ****             #if(CY_IP_SRSSV2)
 200:Generated_Source\PSoC4/CyLib.c ****                 freq = CY_SYS_CLK_IMO_MIN_FREQ_MHZ;
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 8


 201:Generated_Source\PSoC4/CyLib.c ****                 for(i = 0u; i < CY_SYS_CLK_IMO_FREQ_TABLE_SIZE; i++)
 202:Generated_Source\PSoC4/CyLib.c ****                 {
 203:Generated_Source\PSoC4/CyLib.c ****                     if ((uint8) (CY_SYS_CLK_IMO_TRIM2_REG & CY_SYS_CLK_IMO_FREQ_BITS_MASK) == cyImo
 204:Generated_Source\PSoC4/CyLib.c ****                     {
 205:Generated_Source\PSoC4/CyLib.c ****                         freq = i + CY_SYS_CLK_IMO_FREQ_TABLE_OFFSET;
 206:Generated_Source\PSoC4/CyLib.c ****                         break;
 207:Generated_Source\PSoC4/CyLib.c ****                     }
 208:Generated_Source\PSoC4/CyLib.c ****                 }
 209:Generated_Source\PSoC4/CyLib.c ****             #else
 210:Generated_Source\PSoC4/CyLib.c ****                 /* Calculate frequency by shifting register field value and adding constant. */
 211:Generated_Source\PSoC4/CyLib.c ****                 #if(CY_IP_SRSSLT)
 212:Generated_Source\PSoC4/CyLib.c ****                     freq = (((uint32) ((CY_SYS_CLK_IMO_SELECT_REG & ((uint32) CY_SYS_CLK_IMO_SELECT
 213:Generated_Source\PSoC4/CyLib.c ****                                         CY_SYS_CLK_IMO_SELECT_FREQ_SHIFT) + CY_SYS_CLK_IMO_MIN_FREQ
 214:Generated_Source\PSoC4/CyLib.c ****                                       ((CY_SYS_CLK_SELECT_REG >> CY_SYS_CLK_SELECT_HFCLK_DIV_SHIFT)
 215:Generated_Source\PSoC4/CyLib.c ****                                        (uint32) CY_SYS_CLK_SELECT_HFCLK_DIV_MASK));
 216:Generated_Source\PSoC4/CyLib.c ****                 #else
 217:Generated_Source\PSoC4/CyLib.c ****                     freq = ((uint32) ((CY_SYS_CLK_IMO_SELECT_REG & ((uint32) CY_SYS_CLK_IMO_SELECT_
 218:Generated_Source\PSoC4/CyLib.c ****                                        CY_SYS_CLK_IMO_SELECT_FREQ_SHIFT) + CY_SYS_CLK_IMO_MIN_FREQ_
 219:Generated_Source\PSoC4/CyLib.c ****                 #endif  /* (CY_IP_SRSSLT) */
 220:Generated_Source\PSoC4/CyLib.c **** 
 221:Generated_Source\PSoC4/CyLib.c ****             #endif  /* (CY_IP_SRSSV2) */
 222:Generated_Source\PSoC4/CyLib.c **** 
 223:Generated_Source\PSoC4/CyLib.c ****             /* For the WCO locking mode, the IMO gain needs to be CY_SYS_CLK_IMO_TRIM4_GAIN */
 224:Generated_Source\PSoC4/CyLib.c ****             #if(CY_IP_SRSSV2)
 225:Generated_Source\PSoC4/CyLib.c ****                 if ((CY_SYS_CLK_IMO_TRIM4_REG & CY_SYS_CLK_IMO_TRIM4_GAIN_MASK) == 0u)
 226:Generated_Source\PSoC4/CyLib.c ****                 {
 227:Generated_Source\PSoC4/CyLib.c **** 			         CY_SYS_CLK_IMO_TRIM4_REG = (CY_SYS_CLK_IMO_TRIM4_REG & (uint32) ~CY_SYS_CLK_IMO_TRIM4_G
 228:Generated_Source\PSoC4/CyLib.c **** 			                  				     CY_SYS_CLK_IMO_TRIM4_WCO_GAIN;
 229:Generated_Source\PSoC4/CyLib.c ****                 }
 230:Generated_Source\PSoC4/CyLib.c ****             #endif /* (CY_IP_SRSSV2) */
 231:Generated_Source\PSoC4/CyLib.c **** 
 232:Generated_Source\PSoC4/CyLib.c ****             regTmp  = CY_SYS_CLK_WCO_DPLL_REG & ~(CY_SYS_CLK_WCO_DPLL_MULT_MASK |
 233:Generated_Source\PSoC4/CyLib.c ****                                                   CY_SYS_CLK_WCO_CONFIG_DPLL_LF_IGAIN_MASK |
 234:Generated_Source\PSoC4/CyLib.c ****                                                   CY_SYS_CLK_WCO_CONFIG_DPLL_LF_PGAIN_MASK |
 235:Generated_Source\PSoC4/CyLib.c ****                                                   CY_SYS_CLK_WCO_CONFIG_DPLL_LF_LIMIT_MASK);
 236:Generated_Source\PSoC4/CyLib.c **** 
 237:Generated_Source\PSoC4/CyLib.c ****             /* Set multiplier to determine IMO frequency in multiples of the WCO frequency */
 238:Generated_Source\PSoC4/CyLib.c ****             regTmp |= (CY_SYS_CLK_WCO_DPLL_MULT_VALUE(freq) & CY_SYS_CLK_WCO_DPLL_MULT_MASK);
 239:Generated_Source\PSoC4/CyLib.c **** 
 240:Generated_Source\PSoC4/CyLib.c ****             /* Set DPLL Loop Filter Integral and Proportional Gains Setting */
 241:Generated_Source\PSoC4/CyLib.c ****             regTmp |= (CY_SYS_CLK_WCO_CONFIG_DPLL_LF_IGAIN | CY_SYS_CLK_WCO_CONFIG_DPLL_LF_PGAIN);
 242:Generated_Source\PSoC4/CyLib.c **** 
 243:Generated_Source\PSoC4/CyLib.c ****             /* Set maximum allowed IMO offset */
 244:Generated_Source\PSoC4/CyLib.c ****             if (freq < CY_SYS_CLK_IMO_FREQ_WCO_DPLL_SAFE_POINT)
 245:Generated_Source\PSoC4/CyLib.c ****             {
 246:Generated_Source\PSoC4/CyLib.c ****                 regTmp |= (CY_SYS_CLK_WCO_CONFIG_DPLL_LF_LIMIT_MAX << CY_SYS_CLK_WCO_CONFIG_DPLL_LF
 247:Generated_Source\PSoC4/CyLib.c ****             }
 248:Generated_Source\PSoC4/CyLib.c ****             else
 249:Generated_Source\PSoC4/CyLib.c ****             {
 250:Generated_Source\PSoC4/CyLib.c ****                 lfLimit = (uint32) CY_SFLASH_IMO_TRIM_REG(freq - CY_SYS_CLK_IMO_MIN_FREQ_MHZ) +
 251:Generated_Source\PSoC4/CyLib.c ****                     cyImoFreqMhz2DpllOffset[freq - CY_SYS_CLK_IMO_FREQ_WCO_DPLL_TABLE_OFFSET];
 252:Generated_Source\PSoC4/CyLib.c **** 
 253:Generated_Source\PSoC4/CyLib.c ****                 lfLimit = (lfLimit > CY_SYS_CLK_WCO_CONFIG_DPLL_LF_LIMIT_MAX) ?
 254:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_CLK_WCO_CONFIG_DPLL_LF_LIMIT_MAX : lfLimit;
 255:Generated_Source\PSoC4/CyLib.c **** 
 256:Generated_Source\PSoC4/CyLib.c ****                 regTmp |= (lfLimit << CY_SYS_CLK_WCO_CONFIG_DPLL_LF_LIMIT_SHIFT);
 257:Generated_Source\PSoC4/CyLib.c ****             }
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 9


 258:Generated_Source\PSoC4/CyLib.c **** 
 259:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_WCO_DPLL_REG = regTmp;
 260:Generated_Source\PSoC4/CyLib.c **** 
 261:Generated_Source\PSoC4/CyLib.c ****             flashCtlReg = CY_FLASH_CTL_REG;
 262:Generated_Source\PSoC4/CyLib.c ****             CySysFlashSetWaitCycles(CY_SYS_CLK_IMO_MAX_FREQ_MHZ);
 263:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_WCO_CONFIG_REG |= CY_SYS_CLK_WCO_CONFIG_DPLL_ENABLE;
 264:Generated_Source\PSoC4/CyLib.c ****             CyDelay(CY_SYS_CLK_WCO_IMO_TIMEOUT_MS);
 265:Generated_Source\PSoC4/CyLib.c ****             CY_FLASH_CTL_REG = flashCtlReg;
 266:Generated_Source\PSoC4/CyLib.c **** 
 267:Generated_Source\PSoC4/CyLib.c ****             CyExitCriticalSection(interruptState);
 268:Generated_Source\PSoC4/CyLib.c ****         }
 269:Generated_Source\PSoC4/CyLib.c ****     }
 270:Generated_Source\PSoC4/CyLib.c **** 
 271:Generated_Source\PSoC4/CyLib.c **** 
 272:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
 273:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkImoDisableWcoLock
 274:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
 275:Generated_Source\PSoC4/CyLib.c ****     *
 276:Generated_Source\PSoC4/CyLib.c ****     * Disables the IMO to WCO lock feature.
 277:Generated_Source\PSoC4/CyLib.c ****     *
 278:Generated_Source\PSoC4/CyLib.c ****     * For PSoC 4200L devices, note that the IMO can lock to either WCO or USB
 279:Generated_Source\PSoC4/CyLib.c ****     * but not both.
 280:Generated_Source\PSoC4/CyLib.c ****     *
 281:Generated_Source\PSoC4/CyLib.c ****     * This function is applicable for PSoC 4100M / PSoC 4200M / PSoC 4000S /
 282:Generated_Source\PSoC4/CyLib.c ****     * PSoC 4100S / PSoC 4400 / PSoC 4200L.
 283:Generated_Source\PSoC4/CyLib.c ****     *
 284:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
 285:Generated_Source\PSoC4/CyLib.c ****     void CySysClkImoDisableWcoLock(void)
 286:Generated_Source\PSoC4/CyLib.c ****     {
 287:Generated_Source\PSoC4/CyLib.c ****         CY_SYS_CLK_WCO_CONFIG_REG &= (uint32) ~CY_SYS_CLK_WCO_CONFIG_DPLL_ENABLE;
 288:Generated_Source\PSoC4/CyLib.c ****     }
 289:Generated_Source\PSoC4/CyLib.c **** 
 290:Generated_Source\PSoC4/CyLib.c **** 
 291:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
 292:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkImoGetWcoLock
 293:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
 294:Generated_Source\PSoC4/CyLib.c ****     *
 295:Generated_Source\PSoC4/CyLib.c ****     * Reports the IMO to WCO lock enable state.
 296:Generated_Source\PSoC4/CyLib.c ****     *
 297:Generated_Source\PSoC4/CyLib.c ****     * This function is applicable for PSoC 4100M / PSoC 4200M / PSoC 4000S /
 298:Generated_Source\PSoC4/CyLib.c ****     * PSoC 4100S / PSoC 4400 / PSoC 4200L.
 299:Generated_Source\PSoC4/CyLib.c ****     *
 300:Generated_Source\PSoC4/CyLib.c ****     * \return 1 if IMO to WCO lock is enabled.
 301:Generated_Source\PSoC4/CyLib.c ****     * \return 0 if IMO to WCO lock is disabled.
 302:Generated_Source\PSoC4/CyLib.c ****     *
 303:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
 304:Generated_Source\PSoC4/CyLib.c ****     uint32 CySysClkImoGetWcoLock(void)
 305:Generated_Source\PSoC4/CyLib.c ****     {
 306:Generated_Source\PSoC4/CyLib.c ****         return ((0u != (CY_SYS_CLK_WCO_CONFIG_REG & CY_SYS_CLK_WCO_CONFIG_DPLL_ENABLE)) ?
 307:Generated_Source\PSoC4/CyLib.c ****                 (uint32) 1u :
 308:Generated_Source\PSoC4/CyLib.c ****                 (uint32) 0u);
 309:Generated_Source\PSoC4/CyLib.c ****     }
 310:Generated_Source\PSoC4/CyLib.c **** 
 311:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
 312:Generated_Source\PSoC4/CyLib.c **** 
 313:Generated_Source\PSoC4/CyLib.c **** 
 314:Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_IMO_TRIMMABLE_BY_USB)
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 10


 315:Generated_Source\PSoC4/CyLib.c **** 
 316:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
 317:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkImoEnableUsbLock
 318:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
 319:Generated_Source\PSoC4/CyLib.c ****     *
 320:Generated_Source\PSoC4/CyLib.c ****     * Enables the IMO to USB lock feature.
 321:Generated_Source\PSoC4/CyLib.c ****     *
 322:Generated_Source\PSoC4/CyLib.c ****     * This function must be called before CySysClkWriteImoFreq().
 323:Generated_Source\PSoC4/CyLib.c ****     *
 324:Generated_Source\PSoC4/CyLib.c ****     * This function is called from CySysClkImoStart() function if USB lock
 325:Generated_Source\PSoC4/CyLib.c ****     * selected in the Design Wide Resources tab.
 326:Generated_Source\PSoC4/CyLib.c ****     *
 327:Generated_Source\PSoC4/CyLib.c ****     * This is applicable for PSoC 4200L family of devices only. For PSoC 4200L
 328:Generated_Source\PSoC4/CyLib.c ****     * devices, the IMO can lock to either WCO or USB, but not both.
 329:Generated_Source\PSoC4/CyLib.c ****     *
 330:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
 331:Generated_Source\PSoC4/CyLib.c ****     void CySysClkImoEnableUsbLock(void)
 332:Generated_Source\PSoC4/CyLib.c ****     {
 333:Generated_Source\PSoC4/CyLib.c ****         /* Set oscillator interface control port to USB */
 334:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_IMO_TRIMMABLE_BY_WCO && CY_IP_IMO_TRIMMABLE_BY_USB)
 335:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_OSCINTF_CTL_REG = (CY_SYS_CLK_OSCINTF_CTL_REG & (uint32) ~CY_SYS_CLK_OSCINTF
 336:Generated_Source\PSoC4/CyLib.c ****                                           CY_SYS_CLK_OSCINTF_CTL_PORT_SEL_USB;
 337:Generated_Source\PSoC4/CyLib.c ****         #endif /* (CY_IP_IMO_TRIMMABLE_BY_WCO && CY_IP_IMO_TRIMMABLE_BY_USB) */
 338:Generated_Source\PSoC4/CyLib.c **** 
 339:Generated_Source\PSoC4/CyLib.c ****         #if(CY_IP_SRSSV2)
 340:Generated_Source\PSoC4/CyLib.c ****             /* Save CY_SYS_CLK_IMO_TRIM4_REG and set IMO gain for USB lock */
 341:Generated_Source\PSoC4/CyLib.c ****             CySysClkImoTrim4 = CY_SYS_CLK_IMO_TRIM4_REG & (uint32) ~CY_SYS_CLK_IMO_TRIM4_GAIN_MASK;
 342:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_TRIM4_REG = (CY_SYS_CLK_IMO_TRIM4_REG & (uint32) ~CY_SYS_CLK_IMO_TRIM4_G
 343:Generated_Source\PSoC4/CyLib.c ****                                         CY_SYS_CLK_IMO_TRIM4_USB_GAIN;
 344:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_SRSSV2) */
 345:Generated_Source\PSoC4/CyLib.c **** 
 346:Generated_Source\PSoC4/CyLib.c ****         CY_SYS_CLK_USBDEVv2_CR1_REG |= CY_SYS_CLK_USBDEVv2_CR1_ENABLE_LOCK;
 347:Generated_Source\PSoC4/CyLib.c ****     }
 348:Generated_Source\PSoC4/CyLib.c **** 
 349:Generated_Source\PSoC4/CyLib.c **** 
 350:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
 351:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkImoDisableUsbLock
 352:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
 353:Generated_Source\PSoC4/CyLib.c ****     *
 354:Generated_Source\PSoC4/CyLib.c ****     * Disables the IMO to USB lock feature.
 355:Generated_Source\PSoC4/CyLib.c ****     *
 356:Generated_Source\PSoC4/CyLib.c ****     * This function is called from CySysClkImoStop() function if USB lock selected
 357:Generated_Source\PSoC4/CyLib.c ****     * in the Design Wide Resources tab.
 358:Generated_Source\PSoC4/CyLib.c ****     *
 359:Generated_Source\PSoC4/CyLib.c ****     * This is applicable for PSoC 4200L family of devices only. For PSoC 4200L
 360:Generated_Source\PSoC4/CyLib.c ****     * devices, the IMO can lock to either WCO or USB, but not both.
 361:Generated_Source\PSoC4/CyLib.c ****     *
 362:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
 363:Generated_Source\PSoC4/CyLib.c ****     void CySysClkImoDisableUsbLock(void)
 364:Generated_Source\PSoC4/CyLib.c ****     {
 365:Generated_Source\PSoC4/CyLib.c ****         CY_SYS_CLK_USBDEVv2_CR1_REG &= (uint32) ~CY_SYS_CLK_USBDEVv2_CR1_ENABLE_LOCK;
 366:Generated_Source\PSoC4/CyLib.c **** 
 367:Generated_Source\PSoC4/CyLib.c ****         #if(CY_IP_SRSSV2)
 368:Generated_Source\PSoC4/CyLib.c ****             /* Restore CY_SYS_CLK_IMO_TRIM4_REG */
 369:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_TRIM4_REG = (CY_SYS_CLK_IMO_TRIM4_REG & (uint32) ~CY_SYS_CLK_IMO_TRIM4_G
 370:Generated_Source\PSoC4/CyLib.c ****                                     CySysClkImoTrim4;
 371:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_SRSSV2) */
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 11


 372:Generated_Source\PSoC4/CyLib.c ****     }
 373:Generated_Source\PSoC4/CyLib.c **** 
 374:Generated_Source\PSoC4/CyLib.c **** 
 375:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
 376:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkImoGetUsbLock
 377:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
 378:Generated_Source\PSoC4/CyLib.c ****     *
 379:Generated_Source\PSoC4/CyLib.c ****     * Reports the IMO to USB lock enable state.
 380:Generated_Source\PSoC4/CyLib.c ****     *
 381:Generated_Source\PSoC4/CyLib.c ****     * This is applicable for PSoC 4200L family of devices only. For PSoC 4200L
 382:Generated_Source\PSoC4/CyLib.c ****     * devices, the IMO can lock to either WCO or USB, but not both.
 383:Generated_Source\PSoC4/CyLib.c ****     *
 384:Generated_Source\PSoC4/CyLib.c ****     * \return 1 if IMO to USB lock is enabled.
 385:Generated_Source\PSoC4/CyLib.c ****     * \return 0 if IMO to USB lock is disabled.
 386:Generated_Source\PSoC4/CyLib.c ****     *
 387:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
 388:Generated_Source\PSoC4/CyLib.c ****     uint32 CySysClkImoGetUsbLock(void)
 389:Generated_Source\PSoC4/CyLib.c ****     {
 390:Generated_Source\PSoC4/CyLib.c ****         return ((0u != (CY_SYS_CLK_USBDEVv2_CR1_REG & CY_SYS_CLK_USBDEVv2_CR1_ENABLE_LOCK)) ?
 391:Generated_Source\PSoC4/CyLib.c ****                 (uint32) 1u :
 392:Generated_Source\PSoC4/CyLib.c ****                 (uint32) 0u);
 393:Generated_Source\PSoC4/CyLib.c ****     }
 394:Generated_Source\PSoC4/CyLib.c **** #endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
 395:Generated_Source\PSoC4/CyLib.c **** 
 396:Generated_Source\PSoC4/CyLib.c **** 
 397:Generated_Source\PSoC4/CyLib.c **** 
 398:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
 399:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysClkWriteHfclkDirect
 400:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
 401:Generated_Source\PSoC4/CyLib.c **** *
 402:Generated_Source\PSoC4/CyLib.c **** * Selects the direct source for the HFCLK.
 403:Generated_Source\PSoC4/CyLib.c **** *
 404:Generated_Source\PSoC4/CyLib.c **** * The new source must be running and stable before calling this function.
 405:Generated_Source\PSoC4/CyLib.c **** *
 406:Generated_Source\PSoC4/CyLib.c **** * PSoC 4000:
 407:Generated_Source\PSoC4/CyLib.c **** * The SYSCLK has a maximum speed of 16 MHz, so HFCLK and SYSCLK dividers should
 408:Generated_Source\PSoC4/CyLib.c **** * be selected in a way to not to exceed 16 MHz for the System clock.
 409:Generated_Source\PSoC4/CyLib.c **** *
 410:Generated_Source\PSoC4/CyLib.c **** * If the SYSCLK clock frequency increases during device operation, call
 411:Generated_Source\PSoC4/CyLib.c **** * CySysFlashSetWaitCycles() with the appropriate parameter to adjust the number
 412:Generated_Source\PSoC4/CyLib.c **** * of clock cycles the cache will wait before sampling data comes back from
 413:Generated_Source\PSoC4/CyLib.c **** * Flash. If the SYSCLK clock frequency decreases, you can call
 414:Generated_Source\PSoC4/CyLib.c **** * CySysFlashSetWaitCycles() to improve the CPU performance. See
 415:Generated_Source\PSoC4/CyLib.c **** * CySysFlashSetWaitCycles() description for more information.
 416:Generated_Source\PSoC4/CyLib.c **** *
 417:Generated_Source\PSoC4/CyLib.c **** * Do not select PLL as the source for HFCLK if PLL output frequency exceeds
 418:Generated_Source\PSoC4/CyLib.c **** * maximum permissible value for HFCLK.
 419:Generated_Source\PSoC4/CyLib.c **** *
 420:Generated_Source\PSoC4/CyLib.c **** * \param clkSelect One of the available HFCLK direct sources.
 421:Generated_Source\PSoC4/CyLib.c **** * CY_SYS_CLK_HFCLK_IMO     IMO.
 422:Generated_Source\PSoC4/CyLib.c **** * CY_SYS_CLK_HFCLK_EXTCLK  External clock pin.
 423:Generated_Source\PSoC4/CyLib.c **** * CY_SYS_CLK_HFCLK_ECO     External crystal oscillator. Applicable for
 424:Generated_Source\PSoC4/CyLib.c **** *                          PSoC 4100 BLE / PSoC 4200 BLE / PSoC 4200L.
 425:Generated_Source\PSoC4/CyLib.c **** * CY_SYS_CLK_HFCLK_PLL0    PLL#0. Applicable for PSoC 4200L.
 426:Generated_Source\PSoC4/CyLib.c **** * CY_SYS_CLK_HFCLK_PLL1    PLL#1. Applicable for PSoC 4200L.
 427:Generated_Source\PSoC4/CyLib.c **** *
 428:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 12


 429:Generated_Source\PSoC4/CyLib.c **** void CySysClkWriteHfclkDirect(uint32 clkSelect)
 430:Generated_Source\PSoC4/CyLib.c **** {
 196              		.loc 1 430 0
 197              		.cfi_startproc
 198              		@ args = 0, pretend = 0, frame = 16
 199              		@ frame_needed = 1, uses_anonymous_args = 0
 200 0000 90B5     		push	{r4, r7, lr}
 201              		.cfi_def_cfa_offset 12
 202              		.cfi_offset 4, -12
 203              		.cfi_offset 7, -8
 204              		.cfi_offset 14, -4
 205 0002 85B0     		sub	sp, sp, #20
 206              		.cfi_def_cfa_offset 32
 207 0004 00AF     		add	r7, sp, #0
 208              		.cfi_def_cfa_register 7
 209 0006 7860     		str	r0, [r7, #4]
 431:Generated_Source\PSoC4/CyLib.c ****     uint8  interruptState;
 432:Generated_Source\PSoC4/CyLib.c ****     uint32 tmpReg;
 433:Generated_Source\PSoC4/CyLib.c **** 
 434:Generated_Source\PSoC4/CyLib.c ****     interruptState = CyEnterCriticalSection();
 210              		.loc 1 434 0
 211 0008 0F23     		movs	r3, #15
 212 000a FC18     		adds	r4, r7, r3
 213 000c FFF7FEFF 		bl	CyEnterCriticalSection
 214 0010 0300     		movs	r3, r0
 215 0012 2370     		strb	r3, [r4]
 435:Generated_Source\PSoC4/CyLib.c **** 
 436:Generated_Source\PSoC4/CyLib.c **** 
 437:Generated_Source\PSoC4/CyLib.c ****     tmpReg = CY_SYS_CLK_SELECT_REG & ~(CY_SYS_CLK_SELECT_DIRECT_SEL_MASK |
 216              		.loc 1 437 0
 217 0014 0B4B     		ldr	r3, .L8
 218 0016 1B68     		ldr	r3, [r3]
 219 0018 0722     		movs	r2, #7
 220 001a 9343     		bics	r3, r2
 221 001c BB60     		str	r3, [r7, #8]
 438:Generated_Source\PSoC4/CyLib.c ****                                        CY_SYS_CLK_SELECT_HFCLK_SEL_MASK);
 439:Generated_Source\PSoC4/CyLib.c **** 
 440:Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_SRSSV2 && CY_IP_PLL)
 441:Generated_Source\PSoC4/CyLib.c ****     if ((CY_SYS_CLK_HFCLK_PLL0 == clkSelect) || (CY_SYS_CLK_HFCLK_PLL1 == clkSelect))
 442:Generated_Source\PSoC4/CyLib.c ****     {
 443:Generated_Source\PSoC4/CyLib.c ****         tmpReg |= (clkSelect & CY_SYS_CLK_SELECT_HFCLK_SEL_MASK);
 444:Generated_Source\PSoC4/CyLib.c ****     }
 445:Generated_Source\PSoC4/CyLib.c ****     else
 446:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_SRSSV2 && CY_IP_PLL) */
 447:Generated_Source\PSoC4/CyLib.c ****     {
 448:Generated_Source\PSoC4/CyLib.c ****         tmpReg |= (clkSelect & CY_SYS_CLK_SELECT_DIRECT_SEL_MASK);
 222              		.loc 1 448 0
 223 001e 7B68     		ldr	r3, [r7, #4]
 224 0020 0722     		movs	r2, #7
 225 0022 1340     		ands	r3, r2
 226 0024 BA68     		ldr	r2, [r7, #8]
 227 0026 1343     		orrs	r3, r2
 228 0028 BB60     		str	r3, [r7, #8]
 449:Generated_Source\PSoC4/CyLib.c ****     }
 450:Generated_Source\PSoC4/CyLib.c **** 
 451:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_CLK_SELECT_REG = tmpReg;
 229              		.loc 1 451 0
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 13


 230 002a 064B     		ldr	r3, .L8
 231 002c BA68     		ldr	r2, [r7, #8]
 232 002e 1A60     		str	r2, [r3]
 452:Generated_Source\PSoC4/CyLib.c **** 
 453:Generated_Source\PSoC4/CyLib.c ****     CyExitCriticalSection(interruptState);
 233              		.loc 1 453 0
 234 0030 0F23     		movs	r3, #15
 235 0032 FB18     		adds	r3, r7, r3
 236 0034 1B78     		ldrb	r3, [r3]
 237 0036 1800     		movs	r0, r3
 238 0038 FFF7FEFF 		bl	CyExitCriticalSection
 454:Generated_Source\PSoC4/CyLib.c **** }
 239              		.loc 1 454 0
 240 003c C046     		nop
 241 003e BD46     		mov	sp, r7
 242 0040 05B0     		add	sp, sp, #20
 243              		@ sp needed
 244 0042 90BD     		pop	{r4, r7, pc}
 245              	.L9:
 246              		.align	2
 247              	.L8:
 248 0044 00010B40 		.word	1074462976
 249              		.cfi_endproc
 250              	.LFE4:
 251              		.size	CySysClkWriteHfclkDirect, .-CySysClkWriteHfclkDirect
 252              		.section	.text.CySysEnablePumpClock,"ax",%progbits
 253              		.align	2
 254              		.global	CySysEnablePumpClock
 255              		.code	16
 256              		.thumb_func
 257              		.type	CySysEnablePumpClock, %function
 258              	CySysEnablePumpClock:
 259              	.LFB5:
 455:Generated_Source\PSoC4/CyLib.c **** 
 456:Generated_Source\PSoC4/CyLib.c **** 
 457:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
 458:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysEnablePumpClock
 459:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
 460:Generated_Source\PSoC4/CyLib.c **** *
 461:Generated_Source\PSoC4/CyLib.c **** * Enables / disables the pump clock.
 462:Generated_Source\PSoC4/CyLib.c **** *
 463:Generated_Source\PSoC4/CyLib.c **** * \param enable  
 464:Generated_Source\PSoC4/CyLib.c **** * CY_SYS_CLK_PUMP_DISABLE - Disables the pump clock
 465:Generated_Source\PSoC4/CyLib.c **** * CY_SYS_CLK_PUMP_ENABLE - Enables and restores the operating source of 
 466:Generated_Source\PSoC4/CyLib.c **** * the pump clock.
 467:Generated_Source\PSoC4/CyLib.c **** *
 468:Generated_Source\PSoC4/CyLib.c **** * \sideeffect
 469:Generated_Source\PSoC4/CyLib.c **** *  Enabling/disabling the pump clock does not guarantee glitch free operation 
 470:Generated_Source\PSoC4/CyLib.c **** *  when changing the IMO parameters or clock divider settings.
 471:Generated_Source\PSoC4/CyLib.c **** *
 472:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
 473:Generated_Source\PSoC4/CyLib.c **** void CySysEnablePumpClock(uint32 enable)
 474:Generated_Source\PSoC4/CyLib.c **** {
 260              		.loc 1 474 0
 261              		.cfi_startproc
 262              		@ args = 0, pretend = 0, frame = 8
 263              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 14


 264 0000 80B5     		push	{r7, lr}
 265              		.cfi_def_cfa_offset 8
 266              		.cfi_offset 7, -8
 267              		.cfi_offset 14, -4
 268 0002 82B0     		sub	sp, sp, #8
 269              		.cfi_def_cfa_offset 16
 270 0004 00AF     		add	r7, sp, #0
 271              		.cfi_def_cfa_register 7
 272 0006 7860     		str	r0, [r7, #4]
 475:Generated_Source\PSoC4/CyLib.c ****     #if(CY_IP_SRSSV2)
 476:Generated_Source\PSoC4/CyLib.c ****         if (0u != (CY_SYS_CLK_PUMP_ENABLE & enable))
 273              		.loc 1 476 0
 274 0008 7B68     		ldr	r3, [r7, #4]
 275 000a 0122     		movs	r2, #1
 276 000c 1340     		ands	r3, r2
 277 000e 08D0     		beq	.L11
 477:Generated_Source\PSoC4/CyLib.c ****         {
 478:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_CONFIG_REG |= (CySysClkPumpConfig << CY_SYS_CLK_IMO_CONFIG_PUMP_SEL_SHIF
 278              		.loc 1 478 0
 279 0010 0C4A     		ldr	r2, .L14
 280 0012 0C4B     		ldr	r3, .L14
 281 0014 1968     		ldr	r1, [r3]
 282 0016 0C4B     		ldr	r3, .L14+4
 283 0018 1B68     		ldr	r3, [r3]
 284 001a 5B06     		lsls	r3, r3, #25
 285 001c 0B43     		orrs	r3, r1
 286 001e 1360     		str	r3, [r2]
 479:Generated_Source\PSoC4/CyLib.c ****         }
 480:Generated_Source\PSoC4/CyLib.c ****         else
 481:Generated_Source\PSoC4/CyLib.c ****         {
 482:Generated_Source\PSoC4/CyLib.c ****             CySysClkPumpConfig = (CY_SYS_CLK_IMO_CONFIG_REG >> CY_SYS_CLK_IMO_CONFIG_PUMP_SEL_SHIFT
 483:Generated_Source\PSoC4/CyLib.c ****                                   CY_SYS_CLK_IMO_CONFIG_PUMP_SEL_MASK;
 484:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_CONFIG_REG &= ~(CY_SYS_CLK_IMO_CONFIG_PUMP_SEL_MASK << CY_SYS_CLK_IMO_CO
 485:Generated_Source\PSoC4/CyLib.c ****         }
 486:Generated_Source\PSoC4/CyLib.c ****     #else /* CY_IP_SRSSLT */
 487:Generated_Source\PSoC4/CyLib.c ****         if (0u != (CY_SYS_CLK_PUMP_ENABLE & enable))
 488:Generated_Source\PSoC4/CyLib.c ****         {
 489:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_SELECT_REG |= (CySysClkPumpConfig << CY_SYS_CLK_SELECT_PUMP_SEL_SHIFT);
 490:Generated_Source\PSoC4/CyLib.c ****         }
 491:Generated_Source\PSoC4/CyLib.c ****         else
 492:Generated_Source\PSoC4/CyLib.c ****         {
 493:Generated_Source\PSoC4/CyLib.c ****             CySysClkPumpConfig = (CY_SYS_CLK_SELECT_REG >> CY_SYS_CLK_SELECT_PUMP_SEL_SHIFT) & 
 494:Generated_Source\PSoC4/CyLib.c ****                                   CY_SYS_CLK_SELECT_PUMP_SEL_MASK;
 495:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_SELECT_REG &= ~(CY_SYS_CLK_SELECT_PUMP_SEL_MASK << CY_SYS_CLK_SELECT_PUMP_SE
 496:Generated_Source\PSoC4/CyLib.c ****         }
 497:Generated_Source\PSoC4/CyLib.c ****     #endif  /* (CY_IP_SRSSV2) */
 498:Generated_Source\PSoC4/CyLib.c **** }
 287              		.loc 1 498 0
 288 0020 0CE0     		b	.L13
 289              	.L11:
 482:Generated_Source\PSoC4/CyLib.c ****                                   CY_SYS_CLK_IMO_CONFIG_PUMP_SEL_MASK;
 290              		.loc 1 482 0
 291 0022 084B     		ldr	r3, .L14
 292 0024 1B68     		ldr	r3, [r3]
 293 0026 5B0E     		lsrs	r3, r3, #25
 294 0028 0722     		movs	r2, #7
 295 002a 1A40     		ands	r2, r3
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 15


 296 002c 064B     		ldr	r3, .L14+4
 297 002e 1A60     		str	r2, [r3]
 484:Generated_Source\PSoC4/CyLib.c ****         }
 298              		.loc 1 484 0
 299 0030 044B     		ldr	r3, .L14
 300 0032 044A     		ldr	r2, .L14
 301 0034 1268     		ldr	r2, [r2]
 302 0036 0549     		ldr	r1, .L14+8
 303 0038 0A40     		ands	r2, r1
 304 003a 1A60     		str	r2, [r3]
 305              	.L13:
 306              		.loc 1 498 0
 307 003c C046     		nop
 308 003e BD46     		mov	sp, r7
 309 0040 02B0     		add	sp, sp, #8
 310              		@ sp needed
 311 0042 80BD     		pop	{r7, pc}
 312              	.L15:
 313              		.align	2
 314              	.L14:
 315 0044 08010B40 		.word	1074462984
 316 0048 00000000 		.word	CySysClkPumpConfig
 317 004c FFFFFFF1 		.word	-234881025
 318              		.cfi_endproc
 319              	.LFE5:
 320              		.size	CySysEnablePumpClock, .-CySysEnablePumpClock
 321              		.section	.text.CySysClkGetSysclkSource,"ax",%progbits
 322              		.align	2
 323              		.global	CySysClkGetSysclkSource
 324              		.code	16
 325              		.thumb_func
 326              		.type	CySysClkGetSysclkSource, %function
 327              	CySysClkGetSysclkSource:
 328              	.LFB6:
 499:Generated_Source\PSoC4/CyLib.c **** 
 500:Generated_Source\PSoC4/CyLib.c **** 
 501:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
 502:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysClkGetSysclkSource
 503:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
 504:Generated_Source\PSoC4/CyLib.c **** *
 505:Generated_Source\PSoC4/CyLib.c **** * Returns the source of the System clock.
 506:Generated_Source\PSoC4/CyLib.c **** *
 507:Generated_Source\PSoC4/CyLib.c **** * \return The same as \ref CySysClkWriteHfclkDirect() function parameters.
 508:Generated_Source\PSoC4/CyLib.c **** *
 509:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
 510:Generated_Source\PSoC4/CyLib.c **** uint32 CySysClkGetSysclkSource(void)
 511:Generated_Source\PSoC4/CyLib.c **** {
 329              		.loc 1 511 0
 330              		.cfi_startproc
 331              		@ args = 0, pretend = 0, frame = 8
 332              		@ frame_needed = 1, uses_anonymous_args = 0
 333 0000 90B5     		push	{r4, r7, lr}
 334              		.cfi_def_cfa_offset 12
 335              		.cfi_offset 4, -12
 336              		.cfi_offset 7, -8
 337              		.cfi_offset 14, -4
 338 0002 83B0     		sub	sp, sp, #12
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 16


 339              		.cfi_def_cfa_offset 24
 340 0004 00AF     		add	r7, sp, #0
 341              		.cfi_def_cfa_register 7
 512:Generated_Source\PSoC4/CyLib.c ****     uint8  interruptState;
 513:Generated_Source\PSoC4/CyLib.c ****     uint32 sysclkSource;
 514:Generated_Source\PSoC4/CyLib.c **** 
 515:Generated_Source\PSoC4/CyLib.c ****     interruptState = CyEnterCriticalSection();
 342              		.loc 1 515 0
 343 0006 FC1D     		adds	r4, r7, #7
 344 0008 FFF7FEFF 		bl	CyEnterCriticalSection
 345 000c 0300     		movs	r3, r0
 346 000e 2370     		strb	r3, [r4]
 516:Generated_Source\PSoC4/CyLib.c **** 
 517:Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_SRSSV2 && CY_IP_PLL)
 518:Generated_Source\PSoC4/CyLib.c ****     if ((CY_SYS_CLK_SELECT_REG & CY_SYS_CLK_SELECT_HFCLK_SEL_MASK) != 0u)
 519:Generated_Source\PSoC4/CyLib.c ****     {
 520:Generated_Source\PSoC4/CyLib.c ****         sysclkSource = (CY_SYS_CLK_SELECT_REG & CY_SYS_CLK_SELECT_HFCLK_SEL_MASK);
 521:Generated_Source\PSoC4/CyLib.c ****     }
 522:Generated_Source\PSoC4/CyLib.c ****     else
 523:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_SRSSV2 && CY_IP_PLL) */
 524:Generated_Source\PSoC4/CyLib.c ****     {
 525:Generated_Source\PSoC4/CyLib.c ****         sysclkSource = (CY_SYS_CLK_SELECT_REG & CY_SYS_CLK_SELECT_DIRECT_SEL_MASK);
 347              		.loc 1 525 0
 348 0010 074B     		ldr	r3, .L18
 349 0012 1B68     		ldr	r3, [r3]
 350 0014 0722     		movs	r2, #7
 351 0016 1340     		ands	r3, r2
 352 0018 3B60     		str	r3, [r7]
 526:Generated_Source\PSoC4/CyLib.c ****     }
 527:Generated_Source\PSoC4/CyLib.c **** 
 528:Generated_Source\PSoC4/CyLib.c ****     CyExitCriticalSection(interruptState);
 353              		.loc 1 528 0
 354 001a FB1D     		adds	r3, r7, #7
 355 001c 1B78     		ldrb	r3, [r3]
 356 001e 1800     		movs	r0, r3
 357 0020 FFF7FEFF 		bl	CyExitCriticalSection
 529:Generated_Source\PSoC4/CyLib.c **** 
 530:Generated_Source\PSoC4/CyLib.c ****     return (sysclkSource);
 358              		.loc 1 530 0
 359 0024 3B68     		ldr	r3, [r7]
 531:Generated_Source\PSoC4/CyLib.c **** }
 360              		.loc 1 531 0
 361 0026 1800     		movs	r0, r3
 362 0028 BD46     		mov	sp, r7
 363 002a 03B0     		add	sp, sp, #12
 364              		@ sp needed
 365 002c 90BD     		pop	{r4, r7, pc}
 366              	.L19:
 367 002e C046     		.align	2
 368              	.L18:
 369 0030 00010B40 		.word	1074462976
 370              		.cfi_endproc
 371              	.LFE6:
 372              		.size	CySysClkGetSysclkSource, .-CySysClkGetSysclkSource
 373              		.section	.text.CySysClkWriteSysclkDiv,"ax",%progbits
 374              		.align	2
 375              		.global	CySysClkWriteSysclkDiv
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 17


 376              		.code	16
 377              		.thumb_func
 378              		.type	CySysClkWriteSysclkDiv, %function
 379              	CySysClkWriteSysclkDiv:
 380              	.LFB7:
 532:Generated_Source\PSoC4/CyLib.c **** 
 533:Generated_Source\PSoC4/CyLib.c **** 
 534:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
 535:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysClkWriteSysclkDiv
 536:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
 537:Generated_Source\PSoC4/CyLib.c **** *
 538:Generated_Source\PSoC4/CyLib.c **** * Selects the prescaler divide amount for SYSCLK from HFCLK.
 539:Generated_Source\PSoC4/CyLib.c **** *
 540:Generated_Source\PSoC4/CyLib.c **** * PSoC 4000: The SYSCLK has the speed of 16 MHz, so HFCLK and SYSCLK dividers
 541:Generated_Source\PSoC4/CyLib.c **** * should be selected in a way, not to exceed 16 MHz for SYSCLK.
 542:Generated_Source\PSoC4/CyLib.c **** *
 543:Generated_Source\PSoC4/CyLib.c **** * PSoC 4100 \ PSoC 4100 BLE \ PSoC 4100M: The SYSCLK has the speed of 24 MHz,
 544:Generated_Source\PSoC4/CyLib.c **** * so HFCLK and SYSCLK dividers should be selected in a way, not to exceed 24 MHz
 545:Generated_Source\PSoC4/CyLib.c **** * for SYSCLK.
 546:Generated_Source\PSoC4/CyLib.c **** *
 547:Generated_Source\PSoC4/CyLib.c **** * If the SYSCLK clock frequency increases during the device operation, call
 548:Generated_Source\PSoC4/CyLib.c **** * \ref CySysFlashSetWaitCycles() with the appropriate parameter to adjust the
 549:Generated_Source\PSoC4/CyLib.c **** * number of clock cycles the cache will wait before sampling data comes back
 550:Generated_Source\PSoC4/CyLib.c **** * from Flash. If the SYSCLK clock frequency decreases, you can call
 551:Generated_Source\PSoC4/CyLib.c **** * \ref CySysFlashSetWaitCycles() to improve the CPU performance. See
 552:Generated_Source\PSoC4/CyLib.c **** * \ref CySysFlashSetWaitCycles() description for more information.
 553:Generated_Source\PSoC4/CyLib.c **** *
 554:Generated_Source\PSoC4/CyLib.c **** * \param divider Power of 2 prescaler selection
 555:Generated_Source\PSoC4/CyLib.c **** *  CY_SYS_CLK_SYSCLK_DIV1        SYSCLK = HFCLK / 1
 556:Generated_Source\PSoC4/CyLib.c **** *  CY_SYS_CLK_SYSCLK_DIV2        SYSCLK = HFCLK / 2
 557:Generated_Source\PSoC4/CyLib.c **** *  CY_SYS_CLK_SYSCLK_DIV4        SYSCLK = HFCLK / 4
 558:Generated_Source\PSoC4/CyLib.c **** *  CY_SYS_CLK_SYSCLK_DIV8        SYSCLK = HFCLK / 8
 559:Generated_Source\PSoC4/CyLib.c **** *  CY_SYS_CLK_SYSCLK_DIV16       SYSCLK = HFCLK / 16  (N/A for 4000 Family)
 560:Generated_Source\PSoC4/CyLib.c **** *  CY_SYS_CLK_SYSCLK_DIV32       SYSCLK = HFCLK / 32  (N/A for 4000 Family)
 561:Generated_Source\PSoC4/CyLib.c **** *  CY_SYS_CLK_SYSCLK_DIV64       SYSCLK = HFCLK / 64  (N/A for 4000 Family)
 562:Generated_Source\PSoC4/CyLib.c **** *  CY_SYS_CLK_SYSCLK_DIV128      SYSCLK = HFCLK / 128 (N/A for 4000 Family)
 563:Generated_Source\PSoC4/CyLib.c **** *
 564:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
 565:Generated_Source\PSoC4/CyLib.c **** void CySysClkWriteSysclkDiv(uint32 divider)
 566:Generated_Source\PSoC4/CyLib.c **** {
 381              		.loc 1 566 0
 382              		.cfi_startproc
 383              		@ args = 0, pretend = 0, frame = 16
 384              		@ frame_needed = 1, uses_anonymous_args = 0
 385 0000 90B5     		push	{r4, r7, lr}
 386              		.cfi_def_cfa_offset 12
 387              		.cfi_offset 4, -12
 388              		.cfi_offset 7, -8
 389              		.cfi_offset 14, -4
 390 0002 85B0     		sub	sp, sp, #20
 391              		.cfi_def_cfa_offset 32
 392 0004 00AF     		add	r7, sp, #0
 393              		.cfi_def_cfa_register 7
 394 0006 7860     		str	r0, [r7, #4]
 567:Generated_Source\PSoC4/CyLib.c ****     uint8  interruptState;
 568:Generated_Source\PSoC4/CyLib.c **** 
 569:Generated_Source\PSoC4/CyLib.c ****     interruptState = CyEnterCriticalSection();
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 18


 395              		.loc 1 569 0
 396 0008 0F23     		movs	r3, #15
 397 000a FC18     		adds	r4, r7, r3
 398 000c FFF7FEFF 		bl	CyEnterCriticalSection
 399 0010 0300     		movs	r3, r0
 400 0012 2370     		strb	r3, [r4]
 570:Generated_Source\PSoC4/CyLib.c **** 
 571:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_CLK_SELECT_REG = ((uint32)(((uint32)divider & CY_SYS_CLK_SELECT_SYSCLK_DIV_MASK) <<
 401              		.loc 1 571 0
 402 0014 0A4B     		ldr	r3, .L21
 403 0016 7A68     		ldr	r2, [r7, #4]
 404 0018 D104     		lsls	r1, r2, #19
 405 001a E022     		movs	r2, #224
 406 001c 9203     		lsls	r2, r2, #14
 407 001e 1140     		ands	r1, r2
 572:Generated_Source\PSoC4/CyLib.c ****                                     CY_SYS_CLK_SELECT_SYSCLK_DIV_SHIFT)) |
 573:Generated_Source\PSoC4/CyLib.c ****                             (CY_SYS_CLK_SELECT_REG & ((uint32)(~(uint32)(CY_SYS_CLK_SELECT_SYSCLK_D
 408              		.loc 1 573 0
 409 0020 074A     		ldr	r2, .L21
 410 0022 1268     		ldr	r2, [r2]
 411 0024 0748     		ldr	r0, .L21+4
 412 0026 0240     		ands	r2, r0
 572:Generated_Source\PSoC4/CyLib.c ****                                     CY_SYS_CLK_SELECT_SYSCLK_DIV_SHIFT)) |
 413              		.loc 1 572 0
 414 0028 0A43     		orrs	r2, r1
 571:Generated_Source\PSoC4/CyLib.c ****                                     CY_SYS_CLK_SELECT_SYSCLK_DIV_SHIFT)) |
 415              		.loc 1 571 0
 416 002a 1A60     		str	r2, [r3]
 574:Generated_Source\PSoC4/CyLib.c ****                                     CY_SYS_CLK_SELECT_SYSCLK_DIV_SHIFT))));
 575:Generated_Source\PSoC4/CyLib.c **** 
 576:Generated_Source\PSoC4/CyLib.c ****     CyExitCriticalSection(interruptState);
 417              		.loc 1 576 0
 418 002c 0F23     		movs	r3, #15
 419 002e FB18     		adds	r3, r7, r3
 420 0030 1B78     		ldrb	r3, [r3]
 421 0032 1800     		movs	r0, r3
 422 0034 FFF7FEFF 		bl	CyExitCriticalSection
 577:Generated_Source\PSoC4/CyLib.c **** }
 423              		.loc 1 577 0
 424 0038 C046     		nop
 425 003a BD46     		mov	sp, r7
 426 003c 05B0     		add	sp, sp, #20
 427              		@ sp needed
 428 003e 90BD     		pop	{r4, r7, pc}
 429              	.L22:
 430              		.align	2
 431              	.L21:
 432 0040 00010B40 		.word	1074462976
 433 0044 FFFFC7FF 		.word	-3670017
 434              		.cfi_endproc
 435              	.LFE7:
 436              		.size	CySysClkWriteSysclkDiv, .-CySysClkWriteSysclkDiv
 437              		.section	.text.CySysClkWriteImoFreq,"ax",%progbits
 438              		.align	2
 439              		.global	CySysClkWriteImoFreq
 440              		.code	16
 441              		.thumb_func
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 19


 442              		.type	CySysClkWriteImoFreq, %function
 443              	CySysClkWriteImoFreq:
 444              	.LFB8:
 578:Generated_Source\PSoC4/CyLib.c **** 
 579:Generated_Source\PSoC4/CyLib.c **** 
 580:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
 581:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysClkWriteImoFreq
 582:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
 583:Generated_Source\PSoC4/CyLib.c **** *
 584:Generated_Source\PSoC4/CyLib.c **** * Sets the frequency of the IMO.
 585:Generated_Source\PSoC4/CyLib.c **** *
 586:Generated_Source\PSoC4/CyLib.c **** * PSoC 4000: The SYSCLK has the speed of 16 MHz, so HFCLK and SYSCLK dividers
 587:Generated_Source\PSoC4/CyLib.c **** * should be selected in a way, not to exceed 16 MHz for SYSCLK.
 588:Generated_Source\PSoC4/CyLib.c **** *
 589:Generated_Source\PSoC4/CyLib.c **** * PSoC 4100 \ PSoC 4100 BLE \ PSoC 4100M: The SYSCLK has the speed of 24 MHz,
 590:Generated_Source\PSoC4/CyLib.c **** * so HFCLK and SYSCLK dividers should be selected in a way, not to exceed 24 MHz
 591:Generated_Source\PSoC4/CyLib.c **** * for SYSCLK.
 592:Generated_Source\PSoC4/CyLib.c **** *
 593:Generated_Source\PSoC4/CyLib.c **** * For PSoC 4200M and PSoC 4200L device families, if WCO lock feature is enabled
 594:Generated_Source\PSoC4/CyLib.c **** * then this API will disable the lock, write the new IMO frequency and then
 595:Generated_Source\PSoC4/CyLib.c **** * re-enable the lock.
 596:Generated_Source\PSoC4/CyLib.c **** *
 597:Generated_Source\PSoC4/CyLib.c **** * For PSoC 4200L device families, this function enables the USB lock when 24 or
 598:Generated_Source\PSoC4/CyLib.c **** * 48 MHz passed as a parameter if the USB lock option is enabled in Design Wide
 599:Generated_Source\PSoC4/CyLib.c **** * Resources tab or CySysClkImoEnableUsbLock() was called before. Note the USB
 600:Generated_Source\PSoC4/CyLib.c **** * lock is disabled during IMO frequency change.
 601:Generated_Source\PSoC4/CyLib.c **** *
 602:Generated_Source\PSoC4/CyLib.c **** * The CPU is halted if new frequency is invalid and project is compiled
 603:Generated_Source\PSoC4/CyLib.c **** * in debug mode.
 604:Generated_Source\PSoC4/CyLib.c **** *
 605:Generated_Source\PSoC4/CyLib.c **** * If the SYSCLK clock frequency increases during the device operation, call
 606:Generated_Source\PSoC4/CyLib.c **** * \ref CySysFlashSetWaitCycles() with the appropriate parameter to adjust the
 607:Generated_Source\PSoC4/CyLib.c **** * number of clock cycles the cache will wait before sampling data comes back
 608:Generated_Source\PSoC4/CyLib.c **** * from Flash. If the SYSCLK clock frequency decreases, you can call
 609:Generated_Source\PSoC4/CyLib.c **** * \ref CySysFlashSetWaitCycles() to improve the CPU performance. See
 610:Generated_Source\PSoC4/CyLib.c **** * \ref CySysFlashSetWaitCycles() description for more information.
 611:Generated_Source\PSoC4/CyLib.c **** *
 612:Generated_Source\PSoC4/CyLib.c **** * PSoC 4000: The System Clock (SYSCLK) has maximum speed of 16 MHz, so HFCLK
 613:Generated_Source\PSoC4/CyLib.c **** * and SYSCLK dividers should be selected in a way, to not to exceed 16 MHz for
 614:Generated_Source\PSoC4/CyLib.c **** * the System clock.
 615:Generated_Source\PSoC4/CyLib.c **** *
 616:Generated_Source\PSoC4/CyLib.c **** * \param freq All PSoC 4 families excluding the following: Valid range [3-48]
 617:Generated_Source\PSoC4/CyLib.c **** * with step size equals 1. PSoC 4000: Valid values are 24, 32, and 48.
 618:Generated_Source\PSoC4/CyLib.c **** * PSoC 4000S / PSoC 4100S / PSoC 4400: Valid range [24-48] with step size equals
 619:Generated_Source\PSoC4/CyLib.c **** * 4.
 620:Generated_Source\PSoC4/CyLib.c **** *
 621:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
 622:Generated_Source\PSoC4/CyLib.c **** #if(CY_IP_SRSSV2)
 623:Generated_Source\PSoC4/CyLib.c ****     void CySysClkWriteImoFreq(uint32 freq)
 624:Generated_Source\PSoC4/CyLib.c ****     {
 445              		.loc 1 624 0
 446              		.cfi_startproc
 447              		@ args = 0, pretend = 0, frame = 40
 448              		@ frame_needed = 1, uses_anonymous_args = 0
 449 0000 90B5     		push	{r4, r7, lr}
 450              		.cfi_def_cfa_offset 12
 451              		.cfi_offset 4, -12
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 20


 452              		.cfi_offset 7, -8
 453              		.cfi_offset 14, -4
 454 0002 8BB0     		sub	sp, sp, #44
 455              		.cfi_def_cfa_offset 56
 456 0004 00AF     		add	r7, sp, #0
 457              		.cfi_def_cfa_register 7
 458 0006 7860     		str	r0, [r7, #4]
 625:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_FMLT)
 626:Generated_Source\PSoC4/CyLib.c ****             volatile uint32   parameters[2u];
 627:Generated_Source\PSoC4/CyLib.c ****             volatile uint32   regValues[4u];
 628:Generated_Source\PSoC4/CyLib.c ****         #else
 629:Generated_Source\PSoC4/CyLib.c ****             uint8  bgTrim4;
 630:Generated_Source\PSoC4/CyLib.c ****             uint8  bgTrim5;
 631:Generated_Source\PSoC4/CyLib.c ****             uint8  newImoTrim2Value;
 632:Generated_Source\PSoC4/CyLib.c ****             uint8  currentImoTrim2Value;
 633:Generated_Source\PSoC4/CyLib.c ****             uint8  imoTrim1Value;
 634:Generated_Source\PSoC4/CyLib.c ****         #endif /* (CY_IP_FM) */
 635:Generated_Source\PSoC4/CyLib.c **** 
 636:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
 637:Generated_Source\PSoC4/CyLib.c ****             uint32 wcoLock = 0u;
 638:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
 639:Generated_Source\PSoC4/CyLib.c **** 
 640:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 641:Generated_Source\PSoC4/CyLib.c ****             uint32 usbLock = 0u;
 642:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
 643:Generated_Source\PSoC4/CyLib.c **** 
 644:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
 645:Generated_Source\PSoC4/CyLib.c **** 
 646:Generated_Source\PSoC4/CyLib.c **** 
 647:Generated_Source\PSoC4/CyLib.c ****         interruptState = CyEnterCriticalSection();
 459              		.loc 1 647 0
 460 0008 2723     		movs	r3, #39
 461 000a FC18     		adds	r4, r7, r3
 462 000c FFF7FEFF 		bl	CyEnterCriticalSection
 463 0010 0300     		movs	r3, r0
 464 0012 2370     		strb	r3, [r4]
 648:Generated_Source\PSoC4/CyLib.c **** 
 649:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
 650:Generated_Source\PSoC4/CyLib.c ****             if(0u != CySysClkImoGetWcoLock())
 651:Generated_Source\PSoC4/CyLib.c ****             {
 652:Generated_Source\PSoC4/CyLib.c ****                 wcoLock = 1u;
 653:Generated_Source\PSoC4/CyLib.c ****                 CySysClkImoDisableWcoLock();
 654:Generated_Source\PSoC4/CyLib.c ****             }
 655:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
 656:Generated_Source\PSoC4/CyLib.c **** 
 657:Generated_Source\PSoC4/CyLib.c **** 
 658:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 659:Generated_Source\PSoC4/CyLib.c **** 
 660:Generated_Source\PSoC4/CyLib.c ****             #if (CYDEV_IMO_TRIMMED_BY_USB == 0u)
 661:Generated_Source\PSoC4/CyLib.c ****                 if(0u != CySysClkImoGetUsbLock())
 662:Generated_Source\PSoC4/CyLib.c ****                 {
 663:Generated_Source\PSoC4/CyLib.c ****             #endif  /* (CYDEV_IMO_TRIMMED_BY_USB == 0u) */
 664:Generated_Source\PSoC4/CyLib.c **** 
 665:Generated_Source\PSoC4/CyLib.c ****                 if ((24u == freq) || (48u == freq))
 666:Generated_Source\PSoC4/CyLib.c ****                 {
 667:Generated_Source\PSoC4/CyLib.c ****                     usbLock = 1u;
 668:Generated_Source\PSoC4/CyLib.c ****                     CySysClkImoDisableUsbLock();
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 21


 669:Generated_Source\PSoC4/CyLib.c ****                 }
 670:Generated_Source\PSoC4/CyLib.c **** 
 671:Generated_Source\PSoC4/CyLib.c ****             #if (CYDEV_IMO_TRIMMED_BY_USB == 0u)
 672:Generated_Source\PSoC4/CyLib.c ****                 }
 673:Generated_Source\PSoC4/CyLib.c ****             #endif  /* (CYDEV_IMO_TRIMMED_BY_USB == 0u) */
 674:Generated_Source\PSoC4/CyLib.c **** 
 675:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CYDEV_IMO_TRIMMED_BY_USB == 0u) */
 676:Generated_Source\PSoC4/CyLib.c **** 
 677:Generated_Source\PSoC4/CyLib.c **** 
 678:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_FMLT)
 679:Generated_Source\PSoC4/CyLib.c **** 
 680:Generated_Source\PSoC4/CyLib.c ****             /* FM-Lite Clock Restore */
 681:Generated_Source\PSoC4/CyLib.c ****             regValues[0u] = CY_SYS_CLK_IMO_CONFIG_REG;
 465              		.loc 1 681 0
 466 0014 194B     		ldr	r3, .L24
 467 0016 1A68     		ldr	r2, [r3]
 468 0018 0C23     		movs	r3, #12
 469 001a FB18     		adds	r3, r7, r3
 470 001c 1A60     		str	r2, [r3]
 682:Generated_Source\PSoC4/CyLib.c ****             regValues[1u] = CY_SYS_CLK_SELECT_REG;
 471              		.loc 1 682 0
 472 001e 184B     		ldr	r3, .L24+4
 473 0020 1A68     		ldr	r2, [r3]
 474 0022 0C23     		movs	r3, #12
 475 0024 FB18     		adds	r3, r7, r3
 476 0026 5A60     		str	r2, [r3, #4]
 683:Generated_Source\PSoC4/CyLib.c ****             regValues[2u] = cyImoFreqMhz2Reg[freq - CY_SYS_CLK_IMO_FREQ_TABLE_OFFSET];
 477              		.loc 1 683 0
 478 0028 7B68     		ldr	r3, [r7, #4]
 479 002a 033B     		subs	r3, r3, #3
 480 002c 154A     		ldr	r2, .L24+8
 481 002e D35C     		ldrb	r3, [r2, r3]
 482 0030 1A00     		movs	r2, r3
 483 0032 0C23     		movs	r3, #12
 484 0034 FB18     		adds	r3, r7, r3
 485 0036 9A60     		str	r2, [r3, #8]
 684:Generated_Source\PSoC4/CyLib.c ****             regValues[3u] = CY_FLASH_CTL_REG;
 486              		.loc 1 684 0
 487 0038 134B     		ldr	r3, .L24+12
 488 003a 1A68     		ldr	r2, [r3]
 489 003c 0C23     		movs	r3, #12
 490 003e FB18     		adds	r3, r7, r3
 491 0040 DA60     		str	r2, [r3, #12]
 685:Generated_Source\PSoC4/CyLib.c **** 
 686:Generated_Source\PSoC4/CyLib.c ****             parameters[0u] =
 492              		.loc 1 686 0
 493 0042 1C23     		movs	r3, #28
 494 0044 FB18     		adds	r3, r7, r3
 495 0046 114A     		ldr	r2, .L24+16
 496 0048 1A60     		str	r2, [r3]
 687:Generated_Source\PSoC4/CyLib.c ****                 (uint32) ((CY_FLASH_KEY_TWO(CY_FLASH_API_OPCODE_CLK_RESTORE) <<  CY_FLASH_PARAM_KEY
 688:Generated_Source\PSoC4/CyLib.c ****                             CY_FLASH_KEY_ONE);
 689:Generated_Source\PSoC4/CyLib.c ****             parameters[1u] = (uint32) &regValues[0u];
 497              		.loc 1 689 0
 498 004a 0C23     		movs	r3, #12
 499 004c FA18     		adds	r2, r7, r3
 500 004e 1C23     		movs	r3, #28
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 22


 501 0050 FB18     		adds	r3, r7, r3
 502 0052 5A60     		str	r2, [r3, #4]
 690:Generated_Source\PSoC4/CyLib.c **** 
 691:Generated_Source\PSoC4/CyLib.c ****             CY_FLASH_CPUSS_SYSARG_REG = (uint32) &parameters[0u];
 503              		.loc 1 691 0
 504 0054 0E4B     		ldr	r3, .L24+20
 505 0056 1C22     		movs	r2, #28
 506 0058 BA18     		adds	r2, r7, r2
 507 005a 1A60     		str	r2, [r3]
 692:Generated_Source\PSoC4/CyLib.c ****             CY_FLASH_CPUSS_SYSREQ_REG = CY_FLASH_CPUSS_REQ_START | CY_FLASH_API_OPCODE_CLK_RESTORE;
 508              		.loc 1 692 0
 509 005c 0D4B     		ldr	r3, .L24+24
 510 005e 0E4A     		ldr	r2, .L24+28
 511 0060 1A60     		str	r2, [r3]
 693:Generated_Source\PSoC4/CyLib.c ****             (void) CY_FLASH_CPUSS_SYSARG_REG;
 512              		.loc 1 693 0
 513 0062 0B4B     		ldr	r3, .L24+20
 514 0064 1B68     		ldr	r3, [r3]
 694:Generated_Source\PSoC4/CyLib.c **** 
 695:Generated_Source\PSoC4/CyLib.c ****         #else /* (CY_IP_FM) */
 696:Generated_Source\PSoC4/CyLib.c **** 
 697:Generated_Source\PSoC4/CyLib.c ****         if ((freq >= CY_SYS_CLK_IMO_MIN_FREQ_MHZ) && (freq <= CY_SYS_CLK_IMO_MAX_FREQ_MHZ))
 698:Generated_Source\PSoC4/CyLib.c ****         {
 699:Generated_Source\PSoC4/CyLib.c ****             if(freq <= CY_SFLASH_IMO_MAXF0_REG)
 700:Generated_Source\PSoC4/CyLib.c ****             {
 701:Generated_Source\PSoC4/CyLib.c ****                 bgTrim4 = CY_SFLASH_IMO_ABS0_REG;
 702:Generated_Source\PSoC4/CyLib.c ****                 bgTrim5 = CY_SFLASH_IMO_TMPCO0_REG;
 703:Generated_Source\PSoC4/CyLib.c ****             }
 704:Generated_Source\PSoC4/CyLib.c ****             else if(freq <= CY_SFLASH_IMO_MAXF1_REG)
 705:Generated_Source\PSoC4/CyLib.c ****             {
 706:Generated_Source\PSoC4/CyLib.c ****                 bgTrim4 = CY_SFLASH_IMO_ABS1_REG;
 707:Generated_Source\PSoC4/CyLib.c ****                 bgTrim5 = CY_SFLASH_IMO_TMPCO1_REG;
 708:Generated_Source\PSoC4/CyLib.c ****             }
 709:Generated_Source\PSoC4/CyLib.c ****             else if(freq <= CY_SFLASH_IMO_MAXF2_REG)
 710:Generated_Source\PSoC4/CyLib.c ****             {
 711:Generated_Source\PSoC4/CyLib.c ****                 bgTrim4 = CY_SFLASH_IMO_ABS2_REG;
 712:Generated_Source\PSoC4/CyLib.c ****                 bgTrim5 = CY_SFLASH_IMO_TMPCO2_REG;
 713:Generated_Source\PSoC4/CyLib.c ****             }
 714:Generated_Source\PSoC4/CyLib.c ****             else if(freq <= CY_SFLASH_IMO_MAXF3_REG)
 715:Generated_Source\PSoC4/CyLib.c ****             {
 716:Generated_Source\PSoC4/CyLib.c ****                 bgTrim4 = CY_SFLASH_IMO_ABS3_REG;
 717:Generated_Source\PSoC4/CyLib.c ****                 bgTrim5 = CY_SFLASH_IMO_TMPCO3_REG;
 718:Generated_Source\PSoC4/CyLib.c ****             }
 719:Generated_Source\PSoC4/CyLib.c ****             else
 720:Generated_Source\PSoC4/CyLib.c ****             {
 721:Generated_Source\PSoC4/CyLib.c ****                 bgTrim4 = CY_SFLASH_IMO_ABS4_REG;
 722:Generated_Source\PSoC4/CyLib.c ****                 bgTrim5 = CY_SFLASH_IMO_TMPCO4_REG;
 723:Generated_Source\PSoC4/CyLib.c ****             }
 724:Generated_Source\PSoC4/CyLib.c **** 
 725:Generated_Source\PSoC4/CyLib.c ****             /* Get IMO_TRIM2 value for the new frequency */
 726:Generated_Source\PSoC4/CyLib.c ****             newImoTrim2Value = cyImoFreqMhz2Reg[freq - CY_SYS_CLK_IMO_FREQ_TABLE_OFFSET];
 727:Generated_Source\PSoC4/CyLib.c **** 
 728:Generated_Source\PSoC4/CyLib.c **** 
 729:Generated_Source\PSoC4/CyLib.c ****             /****************************************************************************
 730:Generated_Source\PSoC4/CyLib.c ****             * The IMO can have a different trim per frequency. To avoid possible corner
 731:Generated_Source\PSoC4/CyLib.c ****             * cases where a trim change can exceed the maximum frequency, the trim must
 732:Generated_Source\PSoC4/CyLib.c ****             * be applied at a frequency that is low enough.
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 23


 733:Generated_Source\PSoC4/CyLib.c ****             *
 734:Generated_Source\PSoC4/CyLib.c ****             * Comparing IMO_TRIM2 values for the current and new frequencies, since
 735:Generated_Source\PSoC4/CyLib.c ****             * IMO_TRIM2 value as a function of IMO frequency is a strictly increasing
 736:Generated_Source\PSoC4/CyLib.c ****             * function and is time-invariant.
 737:Generated_Source\PSoC4/CyLib.c ****             ***************************************************************************/
 738:Generated_Source\PSoC4/CyLib.c ****             if ((newImoTrim2Value >= CY_SYS_CLK_IMO_BOUNDARY_FREQ_TRIM2) && (freq >= CY_SYS_CLK_IMO
 739:Generated_Source\PSoC4/CyLib.c ****             {
 740:Generated_Source\PSoC4/CyLib.c ****                 /* Set boundary IMO frequency: safe for IMO above 48 MHZ trimming */
 741:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_CLK_IMO_TRIM2_REG = (uint32) cyImoFreqMhz2Reg[CY_SYS_CLK_IMO_TEMP_FREQ_MHZ -
 742:Generated_Source\PSoC4/CyLib.c ****                                                                      CY_SYS_CLK_IMO_FREQ_TABLE_OFFS
 743:Generated_Source\PSoC4/CyLib.c **** 
 744:Generated_Source\PSoC4/CyLib.c ****                 CyDelayCycles(CY_SYS_CLK_IMO_FREQ_TIMEOUT_CYCLES);
 745:Generated_Source\PSoC4/CyLib.c **** 
 746:Generated_Source\PSoC4/CyLib.c ****                 currentImoTrim2Value = CY_SYS_CLK_IMO_TEMP_FREQ_TRIM2;
 747:Generated_Source\PSoC4/CyLib.c ****             }
 748:Generated_Source\PSoC4/CyLib.c ****             else
 749:Generated_Source\PSoC4/CyLib.c ****             {
 750:Generated_Source\PSoC4/CyLib.c ****                 currentImoTrim2Value = (uint8) (CY_SYS_CLK_IMO_TRIM2_REG & CY_SYS_CLK_IMO_FREQ_BITS
 751:Generated_Source\PSoC4/CyLib.c ****             }
 752:Generated_Source\PSoC4/CyLib.c **** 
 753:Generated_Source\PSoC4/CyLib.c **** 
 754:Generated_Source\PSoC4/CyLib.c ****             /***************************************************************************
 755:Generated_Source\PSoC4/CyLib.c ****             * A trim change needs to be allowed to settle (within 5us) before the Freq
 756:Generated_Source\PSoC4/CyLib.c ****             * can be changed to a new frequency.
 757:Generated_Source\PSoC4/CyLib.c ****             *
 758:Generated_Source\PSoC4/CyLib.c ****             * Comparing IMO_TRIM2 values for the current and new frequencies, since
 759:Generated_Source\PSoC4/CyLib.c ****             * IMO_TRIM2 value as a function of IMO frequency is a strictly increasing
 760:Generated_Source\PSoC4/CyLib.c ****             * function and is time-invariant.
 761:Generated_Source\PSoC4/CyLib.c ****             ***************************************************************************/
 762:Generated_Source\PSoC4/CyLib.c ****             if (newImoTrim2Value < currentImoTrim2Value)
 763:Generated_Source\PSoC4/CyLib.c ****             {
 764:Generated_Source\PSoC4/CyLib.c ****                 /* Set new IMO frequency */
 765:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_CLK_IMO_TRIM2_REG = cyImoFreqMhz2Reg[freq - CY_SYS_CLK_IMO_FREQ_TABLE_OFFSET
 766:Generated_Source\PSoC4/CyLib.c ****                 CyDelayCycles(CY_SYS_CLK_IMO_FREQ_TIMEOUT_CYCLES);
 767:Generated_Source\PSoC4/CyLib.c ****             }
 768:Generated_Source\PSoC4/CyLib.c **** 
 769:Generated_Source\PSoC4/CyLib.c ****             /* Set trims for the new IMO frequency */
 770:Generated_Source\PSoC4/CyLib.c **** 
 771:Generated_Source\PSoC4/CyLib.c ****             #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 772:Generated_Source\PSoC4/CyLib.c ****                 if ((1u == usbLock) && (48u == freq))
 773:Generated_Source\PSoC4/CyLib.c ****                 {
 774:Generated_Source\PSoC4/CyLib.c ****                     imoTrim1Value = CY_SFLASH_IMO_TRIM_USBMODE_48_REG;
 775:Generated_Source\PSoC4/CyLib.c ****                 }
 776:Generated_Source\PSoC4/CyLib.c ****                 else if ((1u == usbLock) && (24u == freq))
 777:Generated_Source\PSoC4/CyLib.c ****                 {
 778:Generated_Source\PSoC4/CyLib.c ****                     imoTrim1Value = CY_SFLASH_IMO_TRIM_USBMODE_24_REG;
 779:Generated_Source\PSoC4/CyLib.c ****                 }
 780:Generated_Source\PSoC4/CyLib.c ****                 else
 781:Generated_Source\PSoC4/CyLib.c ****                 {
 782:Generated_Source\PSoC4/CyLib.c ****                     imoTrim1Value = (uint8) CY_SFLASH_IMO_TRIM_REG(freq - CY_SYS_CLK_IMO_FREQ_TABLE
 783:Generated_Source\PSoC4/CyLib.c ****                 }
 784:Generated_Source\PSoC4/CyLib.c ****             #else
 785:Generated_Source\PSoC4/CyLib.c ****                 imoTrim1Value = (uint8) CY_SFLASH_IMO_TRIM_REG(freq - CY_SYS_CLK_IMO_FREQ_TABLE_OFF
 786:Generated_Source\PSoC4/CyLib.c ****             #endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
 787:Generated_Source\PSoC4/CyLib.c **** 
 788:Generated_Source\PSoC4/CyLib.c **** 
 789:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_TRIM1_REG = (uint32) imoTrim1Value;
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 24


 790:Generated_Source\PSoC4/CyLib.c ****             CY_PWR_BG_TRIM4_REG  = bgTrim4;
 791:Generated_Source\PSoC4/CyLib.c ****             CY_PWR_BG_TRIM5_REG  = bgTrim5;
 792:Generated_Source\PSoC4/CyLib.c ****             CyDelayUs(CY_SYS_CLK_IMO_TRIM_TIMEOUT_US);
 793:Generated_Source\PSoC4/CyLib.c **** 
 794:Generated_Source\PSoC4/CyLib.c ****             if (newImoTrim2Value > currentImoTrim2Value)
 795:Generated_Source\PSoC4/CyLib.c ****             {
 796:Generated_Source\PSoC4/CyLib.c ****                 /* Set new IMO frequency */
 797:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_CLK_IMO_TRIM2_REG = cyImoFreqMhz2Reg[freq - CY_SYS_CLK_IMO_FREQ_TABLE_OFFSET
 798:Generated_Source\PSoC4/CyLib.c ****                 CyDelayCycles(CY_SYS_CLK_IMO_FREQ_TIMEOUT_CYCLES);
 799:Generated_Source\PSoC4/CyLib.c ****             }
 800:Generated_Source\PSoC4/CyLib.c ****         }
 801:Generated_Source\PSoC4/CyLib.c ****         else
 802:Generated_Source\PSoC4/CyLib.c ****         {
 803:Generated_Source\PSoC4/CyLib.c ****             /* Halt CPU in debug mode if new frequency is invalid */
 804:Generated_Source\PSoC4/CyLib.c ****             CYASSERT(0u != 0u);
 805:Generated_Source\PSoC4/CyLib.c ****         }
 806:Generated_Source\PSoC4/CyLib.c **** 
 807:Generated_Source\PSoC4/CyLib.c ****         #endif /* (CY_IP_FMLT) */
 808:Generated_Source\PSoC4/CyLib.c **** 
 809:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
 810:Generated_Source\PSoC4/CyLib.c ****             if (1u == wcoLock)
 811:Generated_Source\PSoC4/CyLib.c ****             {
 812:Generated_Source\PSoC4/CyLib.c ****                 CySysClkImoEnableWcoLock();
 813:Generated_Source\PSoC4/CyLib.c ****             }
 814:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
 815:Generated_Source\PSoC4/CyLib.c **** 
 816:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 817:Generated_Source\PSoC4/CyLib.c ****             if (1u == usbLock)
 818:Generated_Source\PSoC4/CyLib.c ****             {
 819:Generated_Source\PSoC4/CyLib.c ****                 CySysClkImoEnableUsbLock();
 820:Generated_Source\PSoC4/CyLib.c ****             }
 821:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
 822:Generated_Source\PSoC4/CyLib.c **** 
 823:Generated_Source\PSoC4/CyLib.c ****         CyExitCriticalSection(interruptState);
 515              		.loc 1 823 0
 516 0066 2723     		movs	r3, #39
 517 0068 FB18     		adds	r3, r7, r3
 518 006a 1B78     		ldrb	r3, [r3]
 519 006c 1800     		movs	r0, r3
 520 006e FFF7FEFF 		bl	CyExitCriticalSection
 824:Generated_Source\PSoC4/CyLib.c ****     }
 521              		.loc 1 824 0
 522 0072 C046     		nop
 523 0074 BD46     		mov	sp, r7
 524 0076 0BB0     		add	sp, sp, #44
 525              		@ sp needed
 526 0078 90BD     		pop	{r4, r7, pc}
 527              	.L25:
 528 007a C046     		.align	2
 529              	.L24:
 530 007c 08010B40 		.word	1074462984
 531 0080 00010B40 		.word	1074462976
 532 0084 00000000 		.word	cyImoFreqMhz2Reg
 533 0088 30001040 		.word	1074790448
 534 008c B6EA0000 		.word	60086
 535 0090 08001040 		.word	1074790408
 536 0094 04001040 		.word	1074790404
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 25


 537 0098 17000080 		.word	-2147483625
 538              		.cfi_endproc
 539              	.LFE8:
 540              		.size	CySysClkWriteImoFreq, .-CySysClkWriteImoFreq
 541              		.section	.text.CySysClkEcoStart,"ax",%progbits
 542              		.align	2
 543              		.global	CySysClkEcoStart
 544              		.code	16
 545              		.thumb_func
 546              		.type	CySysClkEcoStart, %function
 547              	CySysClkEcoStart:
 548              	.LFB9:
 825:Generated_Source\PSoC4/CyLib.c **** 
 826:Generated_Source\PSoC4/CyLib.c **** #else
 827:Generated_Source\PSoC4/CyLib.c **** 
 828:Generated_Source\PSoC4/CyLib.c ****     void CySysClkWriteImoFreq(uint32 freq)
 829:Generated_Source\PSoC4/CyLib.c ****     {
 830:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
 831:Generated_Source\PSoC4/CyLib.c ****         uint8  imoTrim1Value;
 832:Generated_Source\PSoC4/CyLib.c **** 
 833:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
 834:Generated_Source\PSoC4/CyLib.c ****             uint32 wcoLock = 0u;
 835:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */        
 836:Generated_Source\PSoC4/CyLib.c ****         
 837:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 838:Generated_Source\PSoC4/CyLib.c ****             uint32 usbLock = 0u;
 839:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
 840:Generated_Source\PSoC4/CyLib.c **** 
 841:Generated_Source\PSoC4/CyLib.c ****         #if (CY_PSOC4_4000)
 842:Generated_Source\PSoC4/CyLib.c ****             if ((freq == 24u) || (freq == 32u) || (freq == 48u))
 843:Generated_Source\PSoC4/CyLib.c ****         #elif (CY_CCG3)
 844:Generated_Source\PSoC4/CyLib.c ****             if ((freq == 24u) || (freq == 36u) || (freq == 48u))
 845:Generated_Source\PSoC4/CyLib.c ****         #else
 846:Generated_Source\PSoC4/CyLib.c ****             if ((freq == 24u) || (freq == 28u) || (freq == 32u) ||
 847:Generated_Source\PSoC4/CyLib.c ****                 (freq == 36u) || (freq == 40u) || (freq == 44u) ||
 848:Generated_Source\PSoC4/CyLib.c ****                 (freq == 48u))
 849:Generated_Source\PSoC4/CyLib.c ****         #endif /* (CY_PSOC4_4000) */
 850:Generated_Source\PSoC4/CyLib.c ****         {
 851:Generated_Source\PSoC4/CyLib.c ****             interruptState = CyEnterCriticalSection();
 852:Generated_Source\PSoC4/CyLib.c **** 
 853:Generated_Source\PSoC4/CyLib.c ****             #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
 854:Generated_Source\PSoC4/CyLib.c ****                 if(0u != CySysClkImoGetWcoLock())
 855:Generated_Source\PSoC4/CyLib.c ****                 {
 856:Generated_Source\PSoC4/CyLib.c ****                     wcoLock = 1u;
 857:Generated_Source\PSoC4/CyLib.c ****                     CySysClkImoDisableWcoLock();
 858:Generated_Source\PSoC4/CyLib.c ****                 }
 859:Generated_Source\PSoC4/CyLib.c ****             #endif  /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
 860:Generated_Source\PSoC4/CyLib.c **** 
 861:Generated_Source\PSoC4/CyLib.c ****             #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 862:Generated_Source\PSoC4/CyLib.c **** 
 863:Generated_Source\PSoC4/CyLib.c ****                 #if (CYDEV_IMO_TRIMMED_BY_USB == 0u)
 864:Generated_Source\PSoC4/CyLib.c ****                     if(0u != CySysClkImoGetUsbLock())
 865:Generated_Source\PSoC4/CyLib.c ****                     {
 866:Generated_Source\PSoC4/CyLib.c ****                 #endif  /* (CYDEV_IMO_TRIMMED_BY_USB == 0u) */
 867:Generated_Source\PSoC4/CyLib.c **** 
 868:Generated_Source\PSoC4/CyLib.c ****                     if (48u == freq)
 869:Generated_Source\PSoC4/CyLib.c ****                     {
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 26


 870:Generated_Source\PSoC4/CyLib.c ****                         usbLock = 1u;
 871:Generated_Source\PSoC4/CyLib.c ****                         CySysClkImoDisableUsbLock();
 872:Generated_Source\PSoC4/CyLib.c ****                     }
 873:Generated_Source\PSoC4/CyLib.c **** 
 874:Generated_Source\PSoC4/CyLib.c ****                 #if (CYDEV_IMO_TRIMMED_BY_USB == 0u)
 875:Generated_Source\PSoC4/CyLib.c ****                     }
 876:Generated_Source\PSoC4/CyLib.c ****                 #endif  /* (CYDEV_IMO_TRIMMED_BY_USB == 0u) */
 877:Generated_Source\PSoC4/CyLib.c **** 
 878:Generated_Source\PSoC4/CyLib.c ****             #endif  /* (CYDEV_IMO_TRIMMED_BY_USB == 0u) */
 879:Generated_Source\PSoC4/CyLib.c **** 
 880:Generated_Source\PSoC4/CyLib.c **** 
 881:Generated_Source\PSoC4/CyLib.c ****             /* Set IMO to 24 MHz - CLK_IMO_SELECT.FREQ = 0 */
 882:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_SELECT_REG &= ((uint32) ~CY_SYS_CLK_IMO_SELECT_FREQ_MASK);
 883:Generated_Source\PSoC4/CyLib.c **** 
 884:Generated_Source\PSoC4/CyLib.c **** 
 885:Generated_Source\PSoC4/CyLib.c ****             /* Apply coarse trim */
 886:Generated_Source\PSoC4/CyLib.c ****             #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 887:Generated_Source\PSoC4/CyLib.c ****                 if ((1u == usbLock) && (48u == freq))
 888:Generated_Source\PSoC4/CyLib.c ****                 {
 889:Generated_Source\PSoC4/CyLib.c ****                     imoTrim1Value = CY_SFLASH_IMO_TRIM_USBMODE_48_REG;
 890:Generated_Source\PSoC4/CyLib.c ****                 }
 891:Generated_Source\PSoC4/CyLib.c ****                 else if ((1u == usbLock) && (24u == freq))
 892:Generated_Source\PSoC4/CyLib.c ****                 {
 893:Generated_Source\PSoC4/CyLib.c ****                     imoTrim1Value = CY_SFLASH_IMO_TRIM_USBMODE_24_REG;
 894:Generated_Source\PSoC4/CyLib.c ****                 }
 895:Generated_Source\PSoC4/CyLib.c ****                 else
 896:Generated_Source\PSoC4/CyLib.c ****                 {
 897:Generated_Source\PSoC4/CyLib.c ****                     imoTrim1Value = (uint8) CY_SFLASH_IMO_TRIM_REG(freq - CY_SYS_CLK_IMO_MIN_FREQ_M
 898:Generated_Source\PSoC4/CyLib.c ****                 }
 899:Generated_Source\PSoC4/CyLib.c ****             #else
 900:Generated_Source\PSoC4/CyLib.c ****                 imoTrim1Value = (uint8) CY_SFLASH_IMO_TRIM_REG(freq - CY_SYS_CLK_IMO_MIN_FREQ_MHZ);
 901:Generated_Source\PSoC4/CyLib.c ****             #endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
 902:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_TRIM1_REG = (uint32) imoTrim1Value;
 903:Generated_Source\PSoC4/CyLib.c **** 
 904:Generated_Source\PSoC4/CyLib.c ****             /* Zero out fine trim */
 905:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_TRIM2_REG = CY_SYS_CLK_IMO_TRIM2_REG & ((uint32) ~CY_SYS_CLK_IMO_TRIM2_F
 906:Generated_Source\PSoC4/CyLib.c **** 
 907:Generated_Source\PSoC4/CyLib.c ****             /* Apply TC trim */
 908:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_TRIM3_REG = (CY_SYS_CLK_IMO_TRIM3_REG & ((uint32) ~CY_SYS_CLK_IMO_TRIM3_
 909:Generated_Source\PSoC4/CyLib.c ****                 (CY_SFLASH_IMO_TCTRIM_REG(freq - CY_SYS_CLK_IMO_MIN_FREQ_MHZ) & CY_SYS_CLK_IMO_TRIM
 910:Generated_Source\PSoC4/CyLib.c **** 
 911:Generated_Source\PSoC4/CyLib.c ****             CyDelayCycles(CY_SYS_CLK_IMO_TRIM_DELAY_CYCLES);
 912:Generated_Source\PSoC4/CyLib.c **** 
 913:Generated_Source\PSoC4/CyLib.c ****             if (freq > CY_SYS_CLK_IMO_MIN_FREQ_MHZ)
 914:Generated_Source\PSoC4/CyLib.c ****             {
 915:Generated_Source\PSoC4/CyLib.c ****                 /* Select nearby intermediate frequency */
 916:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_CLK_IMO_SELECT_REG = (CY_SYS_CLK_IMO_SELECT_REG & ((uint32) ~CY_SYS_CLK_IMO_
 917:Generated_Source\PSoC4/CyLib.c ****                     (((freq - 4u - CY_SYS_CLK_IMO_MIN_FREQ_MHZ) >> 2u) & CY_SYS_CLK_IMO_SELECT_FREQ
 918:Generated_Source\PSoC4/CyLib.c **** 
 919:Generated_Source\PSoC4/CyLib.c ****                 CyDelayCycles(CY_SYS_CLK_IMO_TRIM_DELAY_CYCLES);
 920:Generated_Source\PSoC4/CyLib.c **** 
 921:Generated_Source\PSoC4/CyLib.c ****                 /* Make small step to final frequency */
 922:Generated_Source\PSoC4/CyLib.c ****                 /* Select nearby intermediate frequency */
 923:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_CLK_IMO_SELECT_REG = (CY_SYS_CLK_IMO_SELECT_REG & ((uint32) ~CY_SYS_CLK_IMO_
 924:Generated_Source\PSoC4/CyLib.c ****                     (((freq - CY_SYS_CLK_IMO_MIN_FREQ_MHZ) >> 2u) & CY_SYS_CLK_IMO_SELECT_FREQ_MASK
 925:Generated_Source\PSoC4/CyLib.c ****             }
 926:Generated_Source\PSoC4/CyLib.c **** 
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 27


 927:Generated_Source\PSoC4/CyLib.c ****             #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
 928:Generated_Source\PSoC4/CyLib.c ****                 if (1u == wcoLock)
 929:Generated_Source\PSoC4/CyLib.c ****                 {
 930:Generated_Source\PSoC4/CyLib.c ****                     CySysClkImoEnableWcoLock();
 931:Generated_Source\PSoC4/CyLib.c ****                 }
 932:Generated_Source\PSoC4/CyLib.c ****             #endif  /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
 933:Generated_Source\PSoC4/CyLib.c ****         
 934:Generated_Source\PSoC4/CyLib.c ****         
 935:Generated_Source\PSoC4/CyLib.c ****             #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 936:Generated_Source\PSoC4/CyLib.c ****                 if (1u == usbLock)
 937:Generated_Source\PSoC4/CyLib.c ****                 {
 938:Generated_Source\PSoC4/CyLib.c ****                     CySysClkImoEnableUsbLock();
 939:Generated_Source\PSoC4/CyLib.c ****                 }
 940:Generated_Source\PSoC4/CyLib.c ****             #endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
 941:Generated_Source\PSoC4/CyLib.c **** 
 942:Generated_Source\PSoC4/CyLib.c ****             CyExitCriticalSection(interruptState);
 943:Generated_Source\PSoC4/CyLib.c ****         }
 944:Generated_Source\PSoC4/CyLib.c ****         else
 945:Generated_Source\PSoC4/CyLib.c ****         {
 946:Generated_Source\PSoC4/CyLib.c ****             /* Halt CPU in debug mode if new frequency is invalid */
 947:Generated_Source\PSoC4/CyLib.c ****             CYASSERT(0u != 0u);
 948:Generated_Source\PSoC4/CyLib.c ****         }
 949:Generated_Source\PSoC4/CyLib.c ****     }
 950:Generated_Source\PSoC4/CyLib.c **** 
 951:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_SRSSV2) */
 952:Generated_Source\PSoC4/CyLib.c **** 
 953:Generated_Source\PSoC4/CyLib.c **** 
 954:Generated_Source\PSoC4/CyLib.c **** #if(CY_IP_SRSSLT)
 955:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
 956:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkWriteHfclkDiv
 957:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
 958:Generated_Source\PSoC4/CyLib.c ****     *
 959:Generated_Source\PSoC4/CyLib.c ****     * Selects the pre-scaler divider value for HFCLK from IMO.
 960:Generated_Source\PSoC4/CyLib.c ****     *
 961:Generated_Source\PSoC4/CyLib.c ****     * The HFCLK predivider allows the device to divide the HFCLK selection mux
 962:Generated_Source\PSoC4/CyLib.c ****     * input before use as HFCLK. The predivider is capable of dividing the HFCLK by
 963:Generated_Source\PSoC4/CyLib.c ****     * powers of 2 between 1 and 8.
 964:Generated_Source\PSoC4/CyLib.c ****     *
 965:Generated_Source\PSoC4/CyLib.c ****     * PSoC 4000: The SYSCLK has the speed of 16 MHz, so HFCLK and SYSCLK dividers
 966:Generated_Source\PSoC4/CyLib.c ****     * should be selected in a way, not to exceed 16 MHz for SYSCLK.
 967:Generated_Source\PSoC4/CyLib.c ****     *
 968:Generated_Source\PSoC4/CyLib.c ****     * If the SYSCLK clock frequency increases during the device operation, call
 969:Generated_Source\PSoC4/CyLib.c ****     * \ref CySysFlashSetWaitCycles() with the appropriate parameter to adjust the
 970:Generated_Source\PSoC4/CyLib.c ****     * number of clock cycles the cache will wait before sampling data comes back
 971:Generated_Source\PSoC4/CyLib.c ****     * from Flash. If the SYSCLK clock frequency decreases, you can call
 972:Generated_Source\PSoC4/CyLib.c ****     * \ref CySysFlashSetWaitCycles() to improve the CPU performance. See
 973:Generated_Source\PSoC4/CyLib.c ****     * \ref CySysFlashSetWaitCycles() description for more information.
 974:Generated_Source\PSoC4/CyLib.c ****     *
 975:Generated_Source\PSoC4/CyLib.c ****     * \param \ref CY_SYS_CLK_HFCLK_DIV_NODIV    Transparent mode (w/o dividing)
 976:Generated_Source\PSoC4/CyLib.c ****     * \param \ref CY_SYS_CLK_HFCLK_DIV_2        Divide selected clock source by 2
 977:Generated_Source\PSoC4/CyLib.c ****     * \param \ref CY_SYS_CLK_HFCLK_DIV_4        Divide selected clock source by 4
 978:Generated_Source\PSoC4/CyLib.c ****     * \param \ref CY_SYS_CLK_HFCLK_DIV_8        Divide selected clock source by 8
 979:Generated_Source\PSoC4/CyLib.c ****     *
 980:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
 981:Generated_Source\PSoC4/CyLib.c ****     void CySysClkWriteHfclkDiv(uint32 divider)
 982:Generated_Source\PSoC4/CyLib.c ****     {
 983:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 28


 984:Generated_Source\PSoC4/CyLib.c **** 
 985:Generated_Source\PSoC4/CyLib.c ****         interruptState = CyEnterCriticalSection();
 986:Generated_Source\PSoC4/CyLib.c **** 
 987:Generated_Source\PSoC4/CyLib.c ****         CY_SYS_CLK_SELECT_REG = ((CY_SYS_CLK_SELECT_REG & ((uint32) (~(CY_SYS_CLK_SELECT_HFCLK_DIV_
 988:Generated_Source\PSoC4/CyLib.c ****                                         CY_SYS_CLK_SELECT_HFCLK_DIV_SHIFT)))) |
 989:Generated_Source\PSoC4/CyLib.c ****                     ((uint32)((divider & CY_SYS_CLK_SELECT_HFCLK_DIV_MASK) << CY_SYS_CLK_SELECT_HFC
 990:Generated_Source\PSoC4/CyLib.c **** 
 991:Generated_Source\PSoC4/CyLib.c ****         CyExitCriticalSection(interruptState);
 992:Generated_Source\PSoC4/CyLib.c ****     }
 993:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_SRSSLT) */
 994:Generated_Source\PSoC4/CyLib.c **** 
 995:Generated_Source\PSoC4/CyLib.c **** 
 996:Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_ECO)
 997:Generated_Source\PSoC4/CyLib.c **** 
 998:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
 999:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkEcoStart
1000:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1001:Generated_Source\PSoC4/CyLib.c ****     *
1002:Generated_Source\PSoC4/CyLib.c ****     * Starts the External Crystal Oscillator (ECO). Refer to the device datasheet
1003:Generated_Source\PSoC4/CyLib.c ****     * for the ECO startup time.
1004:Generated_Source\PSoC4/CyLib.c ****     *
1005:Generated_Source\PSoC4/CyLib.c ****     * The timeout interval is measured based on the system frequency defined by
1006:Generated_Source\PSoC4/CyLib.c ****     * PSoC Creator at build time. If System clock frequency is changed in
1007:Generated_Source\PSoC4/CyLib.c ****     * runtime, the \ref CyDelayFreq() with the appropriate parameter should be
1008:Generated_Source\PSoC4/CyLib.c ****     * called.
1009:Generated_Source\PSoC4/CyLib.c ****     *
1010:Generated_Source\PSoC4/CyLib.c ****     * PSoC 4100 BLE / PSoC 4200 BLE: The WCO must be enabled prior to enabling ECO.
1011:Generated_Source\PSoC4/CyLib.c ****     *
1012:Generated_Source\PSoC4/CyLib.c ****     * \param timeoutUs Timeout in microseconds.
1013:Generated_Source\PSoC4/CyLib.c ****     *
1014:Generated_Source\PSoC4/CyLib.c ****     * If zero is specified, the function does not wait for timeout and returns
1015:Generated_Source\PSoC4/CyLib.c ****     * CYRET_SUCCESS. If non-zero is specified, the function waits for the timeout.
1016:Generated_Source\PSoC4/CyLib.c ****     *
1017:Generated_Source\PSoC4/CyLib.c ****     * \return \ref CYRET_SUCCESS Completed successfully. The ECO is oscillating and
1018:Generated_Source\PSoC4/CyLib.c ****     * amplitude reached 60% and it does not mean 24 MHz crystal is within 50 ppm.
1019:Generated_Source\PSoC4/CyLib.c ****     *
1020:Generated_Source\PSoC4/CyLib.c ****     * \return \ref CYRET_TIMEOUT Timeout occurred. If the crystal is not oscillating
1021:Generated_Source\PSoC4/CyLib.c ****     * or amplitude didn't reach 60% after specified amount of time, CYRET_TIMEOUT
1022:Generated_Source\PSoC4/CyLib.c ****     * is returned.
1023:Generated_Source\PSoC4/CyLib.c ****     *
1024:Generated_Source\PSoC4/CyLib.c ****     * \return \ref CYRET_BAD_PARAM One or more invalid parameters.
1025:Generated_Source\PSoC4/CyLib.c ****     *
1026:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1027:Generated_Source\PSoC4/CyLib.c ****     cystatus CySysClkEcoStart(uint32 timeoutUs)
1028:Generated_Source\PSoC4/CyLib.c ****     {
 549              		.loc 1 1028 0
 550              		.cfi_startproc
 551              		@ args = 0, pretend = 0, frame = 16
 552              		@ frame_needed = 1, uses_anonymous_args = 0
 553 0000 80B5     		push	{r7, lr}
 554              		.cfi_def_cfa_offset 8
 555              		.cfi_offset 7, -8
 556              		.cfi_offset 14, -4
 557 0002 84B0     		sub	sp, sp, #16
 558              		.cfi_def_cfa_offset 24
 559 0004 00AF     		add	r7, sp, #0
 560              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 29


 561 0006 7860     		str	r0, [r7, #4]
1029:Generated_Source\PSoC4/CyLib.c ****         cystatus returnStatus = CYRET_SUCCESS;
 562              		.loc 1 1029 0
 563 0008 0023     		movs	r3, #0
 564 000a FB60     		str	r3, [r7, #12]
1030:Generated_Source\PSoC4/CyLib.c **** 
1031:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_ECO_BLESS)
1032:Generated_Source\PSoC4/CyLib.c ****             /* Enable the RF oscillator band gap */
1033:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_XTAL_BLESS_RF_CONFIG_REG |= CY_SYS_XTAL_BLESS_RF_CONFIG_RF_ENABLE;
 565              		.loc 1 1033 0
 566 000c 154B     		ldr	r3, .L32
 567 000e 154A     		ldr	r2, .L32
 568 0010 1268     		ldr	r2, [r2]
 569 0012 0121     		movs	r1, #1
 570 0014 0A43     		orrs	r2, r1
 571 0016 1A60     		str	r2, [r3]
1034:Generated_Source\PSoC4/CyLib.c **** 
1035:Generated_Source\PSoC4/CyLib.c ****             /* Update trimming register */
1036:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_XTAL_BLERD_BB_XO_REG = CY_SYS_XTAL_BLERD_BB_XO_TRIM;
 572              		.loc 1 1036 0
 573 0018 134B     		ldr	r3, .L32+4
 574 001a 144A     		ldr	r2, .L32+8
 575 001c 1A60     		str	r2, [r3]
1037:Generated_Source\PSoC4/CyLib.c **** 
1038:Generated_Source\PSoC4/CyLib.c ****             /* Enable the Crystal */
1039:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_XTAL_BLERD_DBUS_REG |= CY_SYS_XTAL_BLERD_DBUS_XTAL_ENABLE;
 576              		.loc 1 1039 0
 577 001e 144B     		ldr	r3, .L32+12
 578 0020 134A     		ldr	r2, .L32+12
 579 0022 1268     		ldr	r2, [r2]
 580 0024 8021     		movs	r1, #128
 581 0026 0902     		lsls	r1, r1, #8
 582 0028 0A43     		orrs	r2, r1
 583 002a 1A60     		str	r2, [r3]
1040:Generated_Source\PSoC4/CyLib.c ****         
1041:Generated_Source\PSoC4/CyLib.c ****         #elif (CY_IP_ECO_BLESSV3)
1042:Generated_Source\PSoC4/CyLib.c ****             uint32 regConfig;
1043:Generated_Source\PSoC4/CyLib.c ****             uint32 intrRegMaskStore = 0u;
1044:Generated_Source\PSoC4/CyLib.c ****             
1045:Generated_Source\PSoC4/CyLib.c ****             if (0u != (CY_SYS_BLESS_MT_CFG_REG & (CY_SYS_BLESS_MT_CFG_ENABLE_BLERD <<  CYFLD_BLE_BL
1046:Generated_Source\PSoC4/CyLib.c ****             {
1047:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_BLESS_MT_CFG_REG |= (CY_SYS_BLESS_MT_CFG_DPSLP_ECO_ON  <<  CYFLD_BLE_BLESS_D
1048:Generated_Source\PSoC4/CyLib.c ****             }
1049:Generated_Source\PSoC4/CyLib.c ****             else
1050:Generated_Source\PSoC4/CyLib.c ****             {
1051:Generated_Source\PSoC4/CyLib.c ****                 /* Init BLE core */
1052:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_BLESS_MT_DELAY_CFG_REG = CY_SYS_BLESS_MT_DELAY_CFG_INIT;
1053:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_BLESS_MT_DELAY_CFG2_REG = CY_SYS_BLESS_MT_DELAY_CFG2_INIT;
1054:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_BLESS_MT_DELAY_CFG3_REG = CY_SYS_BLESS_MT_DELAY_CFG3_INIT;
1055:Generated_Source\PSoC4/CyLib.c ****             
1056:Generated_Source\PSoC4/CyLib.c ****                 /* RCB init */
1057:Generated_Source\PSoC4/CyLib.c ****                 regConfig = CY_SYS_RCB_CTRL_REG;
1058:Generated_Source\PSoC4/CyLib.c ****                 regConfig &= CY_SYS_RCB_CTRL_CLEAR;
1059:Generated_Source\PSoC4/CyLib.c ****                 regConfig |= CY_SYS_RCB_CTRL_INIT;
1060:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_RCB_CTRL_REG = regConfig;
1061:Generated_Source\PSoC4/CyLib.c ****                 
1062:Generated_Source\PSoC4/CyLib.c ****                 intrRegMaskStore = CY_SYS_BLESS_INTR_MASK_REG;
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 30


1063:Generated_Source\PSoC4/CyLib.c ****                 if(0u != (CY_SYS_BLESS_BLERD_ACTIVE_INTR_MASK & intrRegMaskStore))
1064:Generated_Source\PSoC4/CyLib.c ****                 {
1065:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_BLESS_INTR_MASK_REG &= ~CY_SYS_BLESS_BLERD_ACTIVE_INTR_MASK;
1066:Generated_Source\PSoC4/CyLib.c ****                 }
1067:Generated_Source\PSoC4/CyLib.c ****                 
1068:Generated_Source\PSoC4/CyLib.c ****                 /* Enable BLE core */
1069:Generated_Source\PSoC4/CyLib.c ****                 regConfig = CY_SYS_BLESS_MT_CFG_REG;
1070:Generated_Source\PSoC4/CyLib.c ****                 regConfig &= CY_SYS_BLESS_MT_CFG_CLEAR;
1071:Generated_Source\PSoC4/CyLib.c ****                 regConfig |= CY_SYS_BLESS_MT_CFG_INIT;
1072:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_BLESS_MT_CFG_REG = regConfig;
1073:Generated_Source\PSoC4/CyLib.c **** 
1074:Generated_Source\PSoC4/CyLib.c ****                 while(0u == ((CY_SYS_BLESS_BLERD_ACTIVE_INTR_STAT & CY_SYS_BLESS_INTR_STAT_REG)))
1075:Generated_Source\PSoC4/CyLib.c ****                 {
1076:Generated_Source\PSoC4/CyLib.c ****                     /* Wait until BLERD55 moves to active state */
1077:Generated_Source\PSoC4/CyLib.c ****                 }
1078:Generated_Source\PSoC4/CyLib.c **** 
1079:Generated_Source\PSoC4/CyLib.c ****                 if(0u != (CY_SYS_BLESS_BLERD_ACTIVE_INTR_MASK & intrRegMaskStore))
1080:Generated_Source\PSoC4/CyLib.c ****                 {
1081:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_BLESS_INTR_MASK_REG |= CY_SYS_BLESS_BLERD_ACTIVE_INTR_MASK;
1082:Generated_Source\PSoC4/CyLib.c ****                 }
1083:Generated_Source\PSoC4/CyLib.c ****                 
1084:Generated_Source\PSoC4/CyLib.c ****                 /* Send write commands to RBUS */
1085:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_RCB_TX_FIFO_WR_REG = CY_SYS_RCB_RBUS_FREQ_NRST_SET;
1086:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_RCB_TX_FIFO_WR_REG = CY_SYS_RCB_RBUS_DIG_CLK_SET;
1087:Generated_Source\PSoC4/CyLib.c ****                 
1088:Generated_Source\PSoC4/CyLib.c ****                 #if (CY_SYS_BLE_CLK_ECO_FREQ_32MHZ == CYDEV_ECO_CLK_MHZ)
1089:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_RCB_TX_FIFO_WR_REG = CY_SYS_RCB_RBUS_FREQ_XTAL_DIV_SET;
1090:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_RCB_TX_FIFO_WR_REG = (CY_SYS_RCB_RBUS_RF_DCXO_CFG_SET | CY_SYS_RCB_RBUS_
1091:Generated_Source\PSoC4/CyLib.c ****                 #else
1092:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_RCB_TX_FIFO_WR_REG = CY_SYS_RCB_RBUS_FREQ_XTAL_NODIV_SET;
1093:Generated_Source\PSoC4/CyLib.c ****                 #endif
1094:Generated_Source\PSoC4/CyLib.c ****                 
1095:Generated_Source\PSoC4/CyLib.c ****                 intrRegMaskStore = CY_SYS_BLESS_INTR_MASK_REG;
1096:Generated_Source\PSoC4/CyLib.c ****                 if(0u != (CY_SYS_RCB_INTR_RCB_DONE & intrRegMaskStore))
1097:Generated_Source\PSoC4/CyLib.c ****                 {
1098:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_BLESS_INTR_MASK_REG &= ~(CY_SYS_RCB_INTR_RCB_DONE | CY_SYS_RCB_INTR_RCB_
1099:Generated_Source\PSoC4/CyLib.c ****                 }
1100:Generated_Source\PSoC4/CyLib.c ****                 
1101:Generated_Source\PSoC4/CyLib.c ****                 /* Send read commands to RBUS */
1102:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_RCB_TX_FIFO_WR_REG = (CY_SYS_RCB_RBUS_RD_CMD | 
1103:Generated_Source\PSoC4/CyLib.c ****                                             (CY_SYS_RCB_RBUS_RF_DCXO_CFG_SET & ~CY_SYS_RCB_RBUS_VAL
1104:Generated_Source\PSoC4/CyLib.c ****                                             
1105:Generated_Source\PSoC4/CyLib.c ****                 while (0u == (CY_SYS_RCB_INTR_RCB_RX_FIFO_NOT_EMPTY & CY_SYS_RCB_INTR_REG))
1106:Generated_Source\PSoC4/CyLib.c ****                 {
1107:Generated_Source\PSoC4/CyLib.c ****                     /* Wait until RX_FIFO_NOT_EMPTY state */
1108:Generated_Source\PSoC4/CyLib.c ****                 }
1109:Generated_Source\PSoC4/CyLib.c **** 
1110:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_RCB_INTR_REG |= CY_SYS_RCB_INTR_RCB_DONE;
1111:Generated_Source\PSoC4/CyLib.c ****                 
1112:Generated_Source\PSoC4/CyLib.c ****                 regConfig = CY_SYS_RCB_RX_FIFO_RD_REG & CY_SYS_RCB_RBUS_TRIM_MASK;
1113:Generated_Source\PSoC4/CyLib.c ****                 
1114:Generated_Source\PSoC4/CyLib.c ****                 /* Send write commands to RBUS */
1115:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_RCB_TX_FIFO_WR_REG = (CY_SYS_RCB_RBUS_RF_DCXO_CFG_SET | regConfig | CY_SYS_R
1116:Generated_Source\PSoC4/CyLib.c ****                 
1117:Generated_Source\PSoC4/CyLib.c ****                 while (0u == (CY_SYS_RCB_INTR_RCB_DONE & CY_SYS_RCB_INTR_REG))
1118:Generated_Source\PSoC4/CyLib.c ****                 {
1119:Generated_Source\PSoC4/CyLib.c ****                     /* Wait until RCB_DONE state */
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 31


1120:Generated_Source\PSoC4/CyLib.c ****                 }
1121:Generated_Source\PSoC4/CyLib.c ****                 
1122:Generated_Source\PSoC4/CyLib.c ****                 /* Clear Interrupt */
1123:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_RCB_INTR_REG = CY_SYS_RCB_INTR_CLEAR;
1124:Generated_Source\PSoC4/CyLib.c ****                 
1125:Generated_Source\PSoC4/CyLib.c ****                 if(0u != ((CY_SYS_RCB_INTR_RCB_DONE | CY_SYS_RCB_INTR_RCB_RX_FIFO_NOT_EMPTY) & intr
1126:Generated_Source\PSoC4/CyLib.c ****                 {
1127:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_BLESS_INTR_MASK_REG |= intrRegMaskStore;
1128:Generated_Source\PSoC4/CyLib.c ****                 }
1129:Generated_Source\PSoC4/CyLib.c ****                 
1130:Generated_Source\PSoC4/CyLib.c ****             }
1131:Generated_Source\PSoC4/CyLib.c ****         #else /* CY_IP_ECO_SRSSV2 */
1132:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_ECO_CONFIG_REG |= CY_SYS_CLK_ECO_CONFIG_ENABLE;
1133:Generated_Source\PSoC4/CyLib.c ****             CyDelayUs(CY_SYS_CLK_ECO_CONFIG_CLK_EN_TIMEOUT_US);
1134:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_ECO_CONFIG_REG |= CY_SYS_CLK_ECO_CONFIG_CLK_EN;
1135:Generated_Source\PSoC4/CyLib.c ****         #endif /* (CY_IP_ECO_BLESS) */
1136:Generated_Source\PSoC4/CyLib.c **** 
1137:Generated_Source\PSoC4/CyLib.c ****         if(timeoutUs > 0u)
 584              		.loc 1 1137 0
 585 002c 7B68     		ldr	r3, [r7, #4]
 586 002e 002B     		cmp	r3, #0
 587 0030 12D0     		beq	.L27
1138:Generated_Source\PSoC4/CyLib.c ****         {
1139:Generated_Source\PSoC4/CyLib.c ****             returnStatus = CYRET_TIMEOUT;
 588              		.loc 1 1139 0
 589 0032 1023     		movs	r3, #16
 590 0034 FB60     		str	r3, [r7, #12]
1140:Generated_Source\PSoC4/CyLib.c **** 
1141:Generated_Source\PSoC4/CyLib.c ****             for( ; timeoutUs > 0u; timeoutUs--)
 591              		.loc 1 1141 0
 592 0036 0CE0     		b	.L28
 593              	.L30:
1142:Generated_Source\PSoC4/CyLib.c ****             {
1143:Generated_Source\PSoC4/CyLib.c ****                 CyDelayUs(1u);
 594              		.loc 1 1143 0
 595 0038 0120     		movs	r0, #1
 596 003a FFF7FEFF 		bl	CyDelayUs
1144:Generated_Source\PSoC4/CyLib.c **** 
1145:Generated_Source\PSoC4/CyLib.c ****                 if(0u != CySysClkEcoReadStatus())
 597              		.loc 1 1145 0
 598 003e FFF7FEFF 		bl	CySysClkEcoReadStatus
 599 0042 031E     		subs	r3, r0, #0
 600 0044 02D0     		beq	.L29
1146:Generated_Source\PSoC4/CyLib.c ****                 {
1147:Generated_Source\PSoC4/CyLib.c ****                     returnStatus = CYRET_SUCCESS;
 601              		.loc 1 1147 0
 602 0046 0023     		movs	r3, #0
 603 0048 FB60     		str	r3, [r7, #12]
1148:Generated_Source\PSoC4/CyLib.c ****                     break;
 604              		.loc 1 1148 0
 605 004a 05E0     		b	.L27
 606              	.L29:
1141:Generated_Source\PSoC4/CyLib.c ****             {
 607              		.loc 1 1141 0
 608 004c 7B68     		ldr	r3, [r7, #4]
 609 004e 013B     		subs	r3, r3, #1
 610 0050 7B60     		str	r3, [r7, #4]
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 32


 611              	.L28:
1141:Generated_Source\PSoC4/CyLib.c ****             {
 612              		.loc 1 1141 0 is_stmt 0 discriminator 1
 613 0052 7B68     		ldr	r3, [r7, #4]
 614 0054 002B     		cmp	r3, #0
 615 0056 EFD1     		bne	.L30
 616              	.L27:
1149:Generated_Source\PSoC4/CyLib.c ****                 }
1150:Generated_Source\PSoC4/CyLib.c ****             }
1151:Generated_Source\PSoC4/CyLib.c **** 
1152:Generated_Source\PSoC4/CyLib.c ****         }
1153:Generated_Source\PSoC4/CyLib.c **** 
1154:Generated_Source\PSoC4/CyLib.c ****         return(returnStatus);
 617              		.loc 1 1154 0 is_stmt 1
 618 0058 FB68     		ldr	r3, [r7, #12]
1155:Generated_Source\PSoC4/CyLib.c ****     }
 619              		.loc 1 1155 0
 620 005a 1800     		movs	r0, r3
 621 005c BD46     		mov	sp, r7
 622 005e 04B0     		add	sp, sp, #16
 623              		@ sp needed
 624 0060 80BD     		pop	{r7, pc}
 625              	.L33:
 626 0062 C046     		.align	2
 627              	.L32:
 628 0064 60F02E40 		.word	1076818016
 629 0068 78002E40 		.word	1076756600
 630 006c 02200000 		.word	8194
 631 0070 10002E40 		.word	1076756496
 632              		.cfi_endproc
 633              	.LFE9:
 634              		.size	CySysClkEcoStart, .-CySysClkEcoStart
 635              		.section	.text.CySysClkEcoStop,"ax",%progbits
 636              		.align	2
 637              		.global	CySysClkEcoStop
 638              		.code	16
 639              		.thumb_func
 640              		.type	CySysClkEcoStop, %function
 641              	CySysClkEcoStop:
 642              	.LFB10:
1156:Generated_Source\PSoC4/CyLib.c **** 
1157:Generated_Source\PSoC4/CyLib.c **** 
1158:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1159:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkEcoStop
1160:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1161:Generated_Source\PSoC4/CyLib.c ****     *
1162:Generated_Source\PSoC4/CyLib.c ****     * Stops the megahertz crystal.
1163:Generated_Source\PSoC4/CyLib.c ****     *
1164:Generated_Source\PSoC4/CyLib.c ****     * If ECO is disabled when it is sourcing HFCLK, the CPU will halt. In addition,
1165:Generated_Source\PSoC4/CyLib.c ****     * for PSoC 4100 BLE / PSoC 4200 BLE devices, the BLE sub-system will stop
1166:Generated_Source\PSoC4/CyLib.c ****     * functioning.
1167:Generated_Source\PSoC4/CyLib.c ****     *
1168:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1169:Generated_Source\PSoC4/CyLib.c ****     void CySysClkEcoStop(void)
1170:Generated_Source\PSoC4/CyLib.c ****     {
 643              		.loc 1 1170 0
 644              		.cfi_startproc
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 33


 645              		@ args = 0, pretend = 0, frame = 0
 646              		@ frame_needed = 1, uses_anonymous_args = 0
 647 0000 80B5     		push	{r7, lr}
 648              		.cfi_def_cfa_offset 8
 649              		.cfi_offset 7, -8
 650              		.cfi_offset 14, -4
 651 0002 00AF     		add	r7, sp, #0
 652              		.cfi_def_cfa_register 7
1171:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_WCO_BLESS)
1172:Generated_Source\PSoC4/CyLib.c ****             /* Disable the RF oscillator band gap */
1173:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_XTAL_BLESS_RF_CONFIG_REG &= (uint32) ~CY_SYS_XTAL_BLESS_RF_CONFIG_RF_ENABLE;
 653              		.loc 1 1173 0
 654 0004 074B     		ldr	r3, .L35
 655 0006 074A     		ldr	r2, .L35
 656 0008 1268     		ldr	r2, [r2]
 657 000a 0121     		movs	r1, #1
 658 000c 8A43     		bics	r2, r1
 659 000e 1A60     		str	r2, [r3]
1174:Generated_Source\PSoC4/CyLib.c **** 
1175:Generated_Source\PSoC4/CyLib.c ****             /* Disable the Crystal */
1176:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_XTAL_BLERD_DBUS_REG &= (uint32) ~CY_SYS_XTAL_BLERD_DBUS_XTAL_ENABLE;
 660              		.loc 1 1176 0
 661 0010 054B     		ldr	r3, .L35+4
 662 0012 054A     		ldr	r2, .L35+4
 663 0014 1268     		ldr	r2, [r2]
 664 0016 0549     		ldr	r1, .L35+8
 665 0018 0A40     		ands	r2, r1
 666 001a 1A60     		str	r2, [r3]
1177:Generated_Source\PSoC4/CyLib.c ****         #elif (CY_IP_ECO_BLESSV3)
1178:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_BLESS_MT_CFG_REG &= ~(CY_SYS_BLESS_MT_CFG_DPSLP_ECO_ON  <<  CYFLD_BLE_BLESS_DPSL
1179:Generated_Source\PSoC4/CyLib.c ****         #else
1180:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_ECO_CONFIG_REG &= (uint32) ~(CY_SYS_CLK_ECO_CONFIG_ENABLE | CY_SYS_CLK_ECO_C
1181:Generated_Source\PSoC4/CyLib.c ****         #endif /* (CY_IP_WCO_BLESS) */
1182:Generated_Source\PSoC4/CyLib.c ****     }
 667              		.loc 1 1182 0
 668 001c C046     		nop
 669 001e BD46     		mov	sp, r7
 670              		@ sp needed
 671 0020 80BD     		pop	{r7, pc}
 672              	.L36:
 673 0022 C046     		.align	2
 674              	.L35:
 675 0024 60F02E40 		.word	1076818016
 676 0028 10002E40 		.word	1076756496
 677 002c FF7FFFFF 		.word	-32769
 678              		.cfi_endproc
 679              	.LFE10:
 680              		.size	CySysClkEcoStop, .-CySysClkEcoStop
 681              		.section	.text.CySysClkEcoReadStatus,"ax",%progbits
 682              		.align	2
 683              		.global	CySysClkEcoReadStatus
 684              		.code	16
 685              		.thumb_func
 686              		.type	CySysClkEcoReadStatus, %function
 687              	CySysClkEcoReadStatus:
 688              	.LFB11:
1183:Generated_Source\PSoC4/CyLib.c **** 
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 34


1184:Generated_Source\PSoC4/CyLib.c **** 
1185:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1186:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkEcoReadStatus
1187:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1188:Generated_Source\PSoC4/CyLib.c ****     *
1189:Generated_Source\PSoC4/CyLib.c ****     * Reads the status bit for the megahertz crystal.
1190:Generated_Source\PSoC4/CyLib.c ****     *
1191:Generated_Source\PSoC4/CyLib.c ****     * For PSoC 4100 BLE / PSoC 4200 BLE devices, the status bit is the
1192:Generated_Source\PSoC4/CyLib.c ****     * XO_AMP_DETECT bit in FSM register.
1193:Generated_Source\PSoC4/CyLib.c ****     *
1194:Generated_Source\PSoC4/CyLib.c ****     * For PSoC 4200L devices, the error status bit is the WATCHDOG_ERROR bit in
1195:Generated_Source\PSoC4/CyLib.c ****     * ECO_STATUS register.
1196:Generated_Source\PSoC4/CyLib.c ****     *
1197:Generated_Source\PSoC4/CyLib.c ****     * \return PSoC 4100 BLE/PSoC 4200 BLE: Non-zero indicates that ECO output
1198:Generated_Source\PSoC4/CyLib.c ****     * reached 50 ppm and is oscillating in valid range.
1199:Generated_Source\PSoC4/CyLib.c ****     *
1200:Generated_Source\PSoC4/CyLib.c ****     * \return PSoC 4200L: Non-zero indicates that ECO is running.
1201:Generated_Source\PSoC4/CyLib.c ****     *
1202:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1203:Generated_Source\PSoC4/CyLib.c ****     uint32 CySysClkEcoReadStatus(void)
1204:Generated_Source\PSoC4/CyLib.c ****     {
 689              		.loc 1 1204 0
 690              		.cfi_startproc
 691              		@ args = 0, pretend = 0, frame = 8
 692              		@ frame_needed = 1, uses_anonymous_args = 0
 693 0000 80B5     		push	{r7, lr}
 694              		.cfi_def_cfa_offset 8
 695              		.cfi_offset 7, -8
 696              		.cfi_offset 14, -4
 697 0002 82B0     		sub	sp, sp, #8
 698              		.cfi_def_cfa_offset 16
 699 0004 00AF     		add	r7, sp, #0
 700              		.cfi_def_cfa_register 7
1205:Generated_Source\PSoC4/CyLib.c ****         uint32 returnValue;
1206:Generated_Source\PSoC4/CyLib.c **** 
1207:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_WCO_BLESS)
1208:Generated_Source\PSoC4/CyLib.c ****             returnValue = CY_SYS_XTAL_BLERD_FSM_REG & CY_SYS_XTAL_BLERD_FSM_XO_AMP_DETECT;
 701              		.loc 1 1208 0
 702 0006 054B     		ldr	r3, .L39
 703 0008 1B68     		ldr	r3, [r3]
 704 000a 0122     		movs	r2, #1
 705 000c 1340     		ands	r3, r2
 706 000e 7B60     		str	r3, [r7, #4]
1209:Generated_Source\PSoC4/CyLib.c ****         #elif (CY_IP_ECO_BLESSV3)
1210:Generated_Source\PSoC4/CyLib.c ****             returnValue = (CY_SYS_BLESS_MT_STATUS_REG & CY_SYS_BLESS_MT_STATUS_CURR_STATE_MASK) >> 
1211:Generated_Source\PSoC4/CyLib.c **** 
1212:Generated_Source\PSoC4/CyLib.c ****             returnValue =  ((CY_SYS_BLESS_MT_STATUS_BLERD_IDLE == returnValue) || 
1213:Generated_Source\PSoC4/CyLib.c ****                             (CY_SYS_BLESS_MT_STATUS_SWITCH_EN  == returnValue) ||
1214:Generated_Source\PSoC4/CyLib.c ****                             (CY_SYS_BLESS_MT_STATUS_ACTIVE  ==  returnValue) ||
1215:Generated_Source\PSoC4/CyLib.c ****                             (CY_SYS_BLESS_MT_STATUS_ISOLATE == returnValue));
1216:Generated_Source\PSoC4/CyLib.c ****         #else
1217:Generated_Source\PSoC4/CyLib.c ****             returnValue = (0u != (CY_SYS_CLK_ECO_STATUS_REG & CY_SYS_CLK_ECO_STATUS_WATCHDOG_ERROR)
1218:Generated_Source\PSoC4/CyLib.c ****         #endif /* (CY_IP_WCO_BLESS) */
1219:Generated_Source\PSoC4/CyLib.c **** 
1220:Generated_Source\PSoC4/CyLib.c ****         return (returnValue);
 707              		.loc 1 1220 0
 708 0010 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 35


1221:Generated_Source\PSoC4/CyLib.c ****     }
 709              		.loc 1 1221 0
 710 0012 1800     		movs	r0, r3
 711 0014 BD46     		mov	sp, r7
 712 0016 02B0     		add	sp, sp, #8
 713              		@ sp needed
 714 0018 80BD     		pop	{r7, pc}
 715              	.L40:
 716 001a C046     		.align	2
 717              	.L39:
 718 001c 0C002E40 		.word	1076756492
 719              		.cfi_endproc
 720              	.LFE11:
 721              		.size	CySysClkEcoReadStatus, .-CySysClkEcoReadStatus
 722              		.section	.text.CySysClkWriteEcoDiv,"ax",%progbits
 723              		.align	2
 724              		.global	CySysClkWriteEcoDiv
 725              		.code	16
 726              		.thumb_func
 727              		.type	CySysClkWriteEcoDiv, %function
 728              	CySysClkWriteEcoDiv:
 729              	.LFB12:
1222:Generated_Source\PSoC4/CyLib.c **** 
1223:Generated_Source\PSoC4/CyLib.c ****     #if (CY_IP_ECO_BLESS || CY_IP_ECO_BLESSV3)
1224:Generated_Source\PSoC4/CyLib.c ****         /*******************************************************************************
1225:Generated_Source\PSoC4/CyLib.c ****         * Function Name: CySysClkWriteEcoDiv
1226:Generated_Source\PSoC4/CyLib.c ****         ****************************************************************************//**
1227:Generated_Source\PSoC4/CyLib.c ****         *
1228:Generated_Source\PSoC4/CyLib.c ****         * Selects value for the ECO divider.
1229:Generated_Source\PSoC4/CyLib.c ****         *
1230:Generated_Source\PSoC4/CyLib.c ****         * The ECO must not be the HFCLK clock source when this function is called.
1231:Generated_Source\PSoC4/CyLib.c ****         * The HFCLK source can be changed to the other clock source by call to the
1232:Generated_Source\PSoC4/CyLib.c ****         * CySysClkWriteHfclkDirect() function. If the ECO sources the HFCLK this
1233:Generated_Source\PSoC4/CyLib.c ****         * function will not have any effect if compiler in release mode, and halt the
1234:Generated_Source\PSoC4/CyLib.c ****         * CPU when compiler in debug mode.
1235:Generated_Source\PSoC4/CyLib.c ****         *
1236:Generated_Source\PSoC4/CyLib.c ****         * If the SYSCLK clock frequency increases during the device operation, call
1237:Generated_Source\PSoC4/CyLib.c ****         * CySysFlashSetWaitCycles() with the appropriate parameter to adjust the number
1238:Generated_Source\PSoC4/CyLib.c ****         * of clock cycles the cache will wait before sampling data comes back from
1239:Generated_Source\PSoC4/CyLib.c ****         * Flash. If the SYSCLK clock frequency decreases, you can call
1240:Generated_Source\PSoC4/CyLib.c ****         * CySysFlashSetWaitCycles() to improve the CPU performance. See
1241:Generated_Source\PSoC4/CyLib.c ****         * CySysFlashSetWaitCycles() description for more information.
1242:Generated_Source\PSoC4/CyLib.c ****         *
1243:Generated_Source\PSoC4/CyLib.c ****         * \param divider Power of 2 divider selection.
1244:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_DIV1
1245:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_DIV2
1246:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_DIV4
1247:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_DIV8
1248:Generated_Source\PSoC4/CyLib.c ****         *
1249:Generated_Source\PSoC4/CyLib.c ****         *******************************************************************************/
1250:Generated_Source\PSoC4/CyLib.c ****         void CySysClkWriteEcoDiv(uint32 divider)
1251:Generated_Source\PSoC4/CyLib.c ****         {
 730              		.loc 1 1251 0
 731              		.cfi_startproc
 732              		@ args = 0, pretend = 0, frame = 16
 733              		@ frame_needed = 1, uses_anonymous_args = 0
 734 0000 90B5     		push	{r4, r7, lr}
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 36


 735              		.cfi_def_cfa_offset 12
 736              		.cfi_offset 4, -12
 737              		.cfi_offset 7, -8
 738              		.cfi_offset 14, -4
 739 0002 85B0     		sub	sp, sp, #20
 740              		.cfi_def_cfa_offset 32
 741 0004 00AF     		add	r7, sp, #0
 742              		.cfi_def_cfa_register 7
 743 0006 7860     		str	r0, [r7, #4]
1252:Generated_Source\PSoC4/CyLib.c ****             uint8  interruptState;
1253:Generated_Source\PSoC4/CyLib.c **** 
1254:Generated_Source\PSoC4/CyLib.c ****             if (CY_SYS_CLK_HFCLK_ECO != (CY_SYS_CLK_SELECT_REG & CY_SYS_CLK_SELECT_DIRECT_SEL_MASK)
 744              		.loc 1 1254 0
 745 0008 114B     		ldr	r3, .L45
 746 000a 1B68     		ldr	r3, [r3]
 747 000c 0722     		movs	r2, #7
 748 000e 1340     		ands	r3, r2
 749 0010 022B     		cmp	r3, #2
 750 0012 16D0     		beq	.L42
1255:Generated_Source\PSoC4/CyLib.c ****             {
1256:Generated_Source\PSoC4/CyLib.c ****                 interruptState = CyEnterCriticalSection();
 751              		.loc 1 1256 0
 752 0014 0F23     		movs	r3, #15
 753 0016 FC18     		adds	r4, r7, r3
 754 0018 FFF7FEFF 		bl	CyEnterCriticalSection
 755 001c 0300     		movs	r3, r0
 756 001e 2370     		strb	r3, [r4]
1257:Generated_Source\PSoC4/CyLib.c **** 
1258:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_CLK_XTAL_CLK_DIV_CONFIG_REG =  (divider & CY_SYS_CLK_XTAL_CLK_DIV_MASK) |
 757              		.loc 1 1258 0
 758 0020 0C4B     		ldr	r3, .L45+4
 759 0022 7A68     		ldr	r2, [r7, #4]
 760 0024 0321     		movs	r1, #3
 761 0026 1140     		ands	r1, r2
1259:Generated_Source\PSoC4/CyLib.c ****                                                       (CY_SYS_CLK_XTAL_CLK_DIV_CONFIG_REG & ((uint3
 762              		.loc 1 1259 0
 763 0028 0A4A     		ldr	r2, .L45+4
 764 002a 1268     		ldr	r2, [r2]
 765 002c 0320     		movs	r0, #3
 766 002e 8243     		bics	r2, r0
1258:Generated_Source\PSoC4/CyLib.c ****                                                       (CY_SYS_CLK_XTAL_CLK_DIV_CONFIG_REG & ((uint3
 767              		.loc 1 1258 0
 768 0030 0A43     		orrs	r2, r1
 769 0032 1A60     		str	r2, [r3]
1260:Generated_Source\PSoC4/CyLib.c **** 
1261:Generated_Source\PSoC4/CyLib.c ****                 CyExitCriticalSection(interruptState);
 770              		.loc 1 1261 0
 771 0034 0F23     		movs	r3, #15
 772 0036 FB18     		adds	r3, r7, r3
 773 0038 1B78     		ldrb	r3, [r3]
 774 003a 1800     		movs	r0, r3
 775 003c FFF7FEFF 		bl	CyExitCriticalSection
1262:Generated_Source\PSoC4/CyLib.c ****             }
1263:Generated_Source\PSoC4/CyLib.c ****             else
1264:Generated_Source\PSoC4/CyLib.c ****             {
1265:Generated_Source\PSoC4/CyLib.c ****                 /* Halt CPU in debug mode if ECO sources HFCLK */
1266:Generated_Source\PSoC4/CyLib.c ****                 CYASSERT(0u != 0u);
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 37


1267:Generated_Source\PSoC4/CyLib.c ****             }
1268:Generated_Source\PSoC4/CyLib.c ****         }
 776              		.loc 1 1268 0
 777 0040 02E0     		b	.L44
 778              	.L42:
1266:Generated_Source\PSoC4/CyLib.c ****             }
 779              		.loc 1 1266 0 discriminator 1
 780 0042 0020     		movs	r0, #0
 781 0044 FFF7FEFF 		bl	CyHalt
 782              	.L44:
 783              		.loc 1 1268 0
 784 0048 C046     		nop
 785 004a BD46     		mov	sp, r7
 786 004c 05B0     		add	sp, sp, #20
 787              		@ sp needed
 788 004e 90BD     		pop	{r4, r7, pc}
 789              	.L46:
 790              		.align	2
 791              	.L45:
 792 0050 00010B40 		.word	1074462976
 793 0054 64F02E40 		.word	1076818020
 794              		.cfi_endproc
 795              	.LFE12:
 796              		.size	CySysClkWriteEcoDiv, .-CySysClkWriteEcoDiv
 797              		.section	.text.CySysLvdEnable,"ax",%progbits
 798              		.align	2
 799              		.global	CySysLvdEnable
 800              		.code	16
 801              		.thumb_func
 802              		.type	CySysLvdEnable, %function
 803              	CySysLvdEnable:
 804              	.LFB13:
1269:Generated_Source\PSoC4/CyLib.c **** 
1270:Generated_Source\PSoC4/CyLib.c ****     #else
1271:Generated_Source\PSoC4/CyLib.c **** 
1272:Generated_Source\PSoC4/CyLib.c ****         /*******************************************************************************
1273:Generated_Source\PSoC4/CyLib.c ****         * Function Name: CySysClkConfigureEcoTrim
1274:Generated_Source\PSoC4/CyLib.c ****         ****************************************************************************//**
1275:Generated_Source\PSoC4/CyLib.c ****         *
1276:Generated_Source\PSoC4/CyLib.c ****         * Selects trim setting values for ECO. This API is available only for PSoC
1277:Generated_Source\PSoC4/CyLib.c ****         * 4200L devices only.
1278:Generated_Source\PSoC4/CyLib.c ****         *
1279:Generated_Source\PSoC4/CyLib.c ****         * The following parameters can be trimmed for ECO. The affected registers are
1280:Generated_Source\PSoC4/CyLib.c ****         * ECO_TRIM0 and ECO_TRIM1.
1281:Generated_Source\PSoC4/CyLib.c ****         *
1282:Generated_Source\PSoC4/CyLib.c ****         * Watchdog trim - This bit field sets the error threshold below the steady
1283:Generated_Source\PSoC4/CyLib.c ****         * state amplitude level.
1284:Generated_Source\PSoC4/CyLib.c ****         *
1285:Generated_Source\PSoC4/CyLib.c ****         * Amplitude trim - This bit field is to set the crystal drive level when
1286:Generated_Source\PSoC4/CyLib.c ****         * ECO_CONFIG.AGC_EN = 1. WARNING: use care when setting this field because
1287:Generated_Source\PSoC4/CyLib.c ****         * driving a crystal beyond its rated limit can permanently damage the crystal.
1288:Generated_Source\PSoC4/CyLib.c ****         *
1289:Generated_Source\PSoC4/CyLib.c ****         * Filter frequency trim - This bit field sets LPF frequency trim and affects
1290:Generated_Source\PSoC4/CyLib.c ****         * the 3rd harmonic content.
1291:Generated_Source\PSoC4/CyLib.c ****         *
1292:Generated_Source\PSoC4/CyLib.c ****         * Feedback resistor trim - This bit field sets the feedback resistor trim and
1293:Generated_Source\PSoC4/CyLib.c ****         * impacts the oscillation amplitude.
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 38


1294:Generated_Source\PSoC4/CyLib.c ****         *
1295:Generated_Source\PSoC4/CyLib.c ****         * Amplifier gain trim - This bit field sets the amplifier gain trim and affects
1296:Generated_Source\PSoC4/CyLib.c ****         * the startup time of the crystal.
1297:Generated_Source\PSoC4/CyLib.c ****         *
1298:Generated_Source\PSoC4/CyLib.c ****         * Use care when setting the amplitude trim field because driving a crystal
1299:Generated_Source\PSoC4/CyLib.c ****         * beyond its rated limit can permanently damage the crystal.
1300:Generated_Source\PSoC4/CyLib.c ****         *
1301:Generated_Source\PSoC4/CyLib.c ****         * \param wDTrim: Watchdog trim
1302:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_WDTRIM0      Error threshold is 0.05 V
1303:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_WDTRIM1      Error threshold is 0.10 V
1304:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_WDTRIM2      Error threshold is 0.15 V
1305:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_WDTRIM3      Error threshold is 0.20 V
1306:Generated_Source\PSoC4/CyLib.c ****         *
1307:Generated_Source\PSoC4/CyLib.c ****         * \param aTrim: Amplitude trim
1308:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_ATRIM0       Amplitude is 0.3 Vpp
1309:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_ATRIM1       Amplitude is 0.4 Vpp
1310:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_ATRIM2       Amplitude is 0.5 Vpp
1311:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_ATRIM3       Amplitude is 0.6 Vpp
1312:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_ATRIM4       Amplitude is 0.7 Vpp
1313:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_ATRIM5       Amplitude is 0.8 Vpp
1314:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_ATRIM6       Amplitude is 0.9 Vpp
1315:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_ATRIM7       Amplitude is 1.0 Vpp
1316:Generated_Source\PSoC4/CyLib.c ****         *
1317:Generated_Source\PSoC4/CyLib.c ****         * \param fTrim: Filter frequency trim
1318:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_FTRIM0       Crystal frequency > 30 MHz
1319:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_FTRIM1       24 MHz < Crystal frequency <= 30 MHz
1320:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_FTRIM2       17 MHz < Crystal frequency <= 24 MHz
1321:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_FTRIM3       Crystal frequency <= 17 MHz
1322:Generated_Source\PSoC4/CyLib.c ****         *
1323:Generated_Source\PSoC4/CyLib.c ****         * \param rTrim: Feedback resistor trim
1324:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_RTRIM0       Crystal frequency > 30 MHz
1325:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_RTRIM1       24 MHz < Crystal frequency <= 30 MHz
1326:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_RTRIM2       17 MHz < Crystal frequency <= 24 MHz
1327:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_RTRIM3       Crystal frequency <= 17 MHz
1328:Generated_Source\PSoC4/CyLib.c ****         *
1329:Generated_Source\PSoC4/CyLib.c ****         * \param gTrim: Amplifier gain trim. Calculate the minimum required gm
1330:Generated_Source\PSoC4/CyLib.c ****         * (trans-conductance value). Divide the calculated gm value by 4.5 to
1331:Generated_Source\PSoC4/CyLib.c ****         * obtain an integer value 'result'. For more information please refer
1332:Generated_Source\PSoC4/CyLib.c ****         * to the device TRM.
1333:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_GTRIM0       If result = 1
1334:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_GTRIM1       If result = 0
1335:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_GTRIM2       If result = 2
1336:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_GTRIM2       If result = 3
1337:Generated_Source\PSoC4/CyLib.c ****         *
1338:Generated_Source\PSoC4/CyLib.c ****         *******************************************************************************/
1339:Generated_Source\PSoC4/CyLib.c ****         void CySysClkConfigureEcoTrim(uint32 wDTrim, uint32 aTrim, uint32 fTrim, uint32 rTrim, uint
1340:Generated_Source\PSoC4/CyLib.c ****         {
1341:Generated_Source\PSoC4/CyLib.c ****             uint8  interruptState;
1342:Generated_Source\PSoC4/CyLib.c ****             uint32 regTmp;
1343:Generated_Source\PSoC4/CyLib.c **** 
1344:Generated_Source\PSoC4/CyLib.c ****             interruptState = CyEnterCriticalSection();
1345:Generated_Source\PSoC4/CyLib.c **** 
1346:Generated_Source\PSoC4/CyLib.c ****             regTmp  = CY_SYS_CLK_ECO_TRIM0_REG & ~(CY_SYS_CLK_ECO_TRIM0_WDTRIM_MASK | CY_SYS_CLK_EC
1347:Generated_Source\PSoC4/CyLib.c ****             regTmp |= ((uint32) (wDTrim << CY_SYS_CLK_ECO_TRIM0_WDTRIM_SHIFT) & CY_SYS_CLK_ECO_TRIM
1348:Generated_Source\PSoC4/CyLib.c ****             regTmp |= ((uint32) (aTrim << CY_SYS_CLK_ECO_TRIM0_ATRIM_SHIFT) & CY_SYS_CLK_ECO_TRIM0_
1349:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_ECO_TRIM0_REG = regTmp;
1350:Generated_Source\PSoC4/CyLib.c **** 
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 39


1351:Generated_Source\PSoC4/CyLib.c ****             regTmp  = CY_SYS_CLK_ECO_TRIM1_REG & ~(CY_SYS_CLK_ECO_TRIM1_FTRIM_MASK |
1352:Generated_Source\PSoC4/CyLib.c ****                                                    CY_SYS_CLK_ECO_TRIM1_RTRIM_MASK |
1353:Generated_Source\PSoC4/CyLib.c ****                                                    CY_SYS_CLK_ECO_TRIM1_GTRIM_MASK);
1354:Generated_Source\PSoC4/CyLib.c ****             regTmp |= ((uint32) (fTrim << CY_SYS_CLK_ECO_TRIM1_FTRIM_SHIFT) & CY_SYS_CLK_ECO_TRIM1_
1355:Generated_Source\PSoC4/CyLib.c ****             regTmp |= ((uint32) (rTrim << CY_SYS_CLK_ECO_TRIM1_RTRIM_SHIFT) & CY_SYS_CLK_ECO_TRIM1_
1356:Generated_Source\PSoC4/CyLib.c ****             regTmp |= ((uint32) (gTrim << CY_SYS_CLK_ECO_TRIM1_GTRIM_SHIFT) & CY_SYS_CLK_ECO_TRIM1_
1357:Generated_Source\PSoC4/CyLib.c **** 
1358:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_ECO_TRIM1_REG = regTmp;
1359:Generated_Source\PSoC4/CyLib.c **** 
1360:Generated_Source\PSoC4/CyLib.c ****             CyExitCriticalSection(interruptState);
1361:Generated_Source\PSoC4/CyLib.c ****         }
1362:Generated_Source\PSoC4/CyLib.c **** 
1363:Generated_Source\PSoC4/CyLib.c **** 
1364:Generated_Source\PSoC4/CyLib.c ****         /*******************************************************************************
1365:Generated_Source\PSoC4/CyLib.c ****         * Function Name: CySysClkConfigureEcoDrive
1366:Generated_Source\PSoC4/CyLib.c ****         ****************************************************************************//**
1367:Generated_Source\PSoC4/CyLib.c ****         *
1368:Generated_Source\PSoC4/CyLib.c ****         * Selects trim setting values for ECO based on crystal parameters. Use care
1369:Generated_Source\PSoC4/CyLib.c ****         * when setting the driveLevel parameter because driving a crystal beyond its
1370:Generated_Source\PSoC4/CyLib.c ****         * rated limit can permanently damage the crystal.
1371:Generated_Source\PSoC4/CyLib.c ****         *
1372:Generated_Source\PSoC4/CyLib.c ****         * This API is available only for PSoC 4200L devices only.
1373:Generated_Source\PSoC4/CyLib.c ****         *
1374:Generated_Source\PSoC4/CyLib.c ****         * \param freq Frequency of the crystal in kHz.
1375:Generated_Source\PSoC4/CyLib.c ****         * \param cLoad Crystal load capacitance in pF.
1376:Generated_Source\PSoC4/CyLib.c ****         * \param esr Equivalent series resistance of the crystal in ohm.
1377:Generated_Source\PSoC4/CyLib.c ****         *  maxAmplitude: maximum amplitude level in mV. Calculate as
1378:Generated_Source\PSoC4/CyLib.c ****         *  ((sqrt(driveLevel in uW / 2 / esr))/(3.14 * freq * cLoad)) * 10^9.
1379:Generated_Source\PSoC4/CyLib.c ****         *
1380:Generated_Source\PSoC4/CyLib.c ****         *  The Automatic Gain Control (AGC) is disabled when the specified maximum
1381:Generated_Source\PSoC4/CyLib.c ****         *  amplitude level equals or above 2. In this case the amplitude is not
1382:Generated_Source\PSoC4/CyLib.c ****         *  explicitly controlled and will grow until it saturates to the supply rail
1383:Generated_Source\PSoC4/CyLib.c ****         *  (1.8V nom). WARNING: use care when disabling AGC because driving a crystal
1384:Generated_Source\PSoC4/CyLib.c ****         *  beyond its rated limit can permanently damage the crystal.
1385:Generated_Source\PSoC4/CyLib.c ****         *
1386:Generated_Source\PSoC4/CyLib.c ****         * \return \ref CYRET_SUCCESS ECO configuration completed successfully.
1387:Generated_Source\PSoC4/CyLib.c ****         * \return \ref CYRET_BAD_PARAM One or more invalid parameters.
1388:Generated_Source\PSoC4/CyLib.c ****         *
1389:Generated_Source\PSoC4/CyLib.c ****         *******************************************************************************/
1390:Generated_Source\PSoC4/CyLib.c ****         cystatus CySysClkConfigureEcoDrive(uint32 freq, uint32 cLoad, uint32 esr, uint32 maxAmplitu
1391:Generated_Source\PSoC4/CyLib.c ****         {
1392:Generated_Source\PSoC4/CyLib.c ****             cystatus returnStatus = CYRET_SUCCESS;
1393:Generated_Source\PSoC4/CyLib.c **** 
1394:Generated_Source\PSoC4/CyLib.c ****             uint32 wDTrim;
1395:Generated_Source\PSoC4/CyLib.c ****             uint32 aTrim;
1396:Generated_Source\PSoC4/CyLib.c ****             uint32 fTrim;
1397:Generated_Source\PSoC4/CyLib.c ****             uint32 rTrim;
1398:Generated_Source\PSoC4/CyLib.c ****             uint32 gTrim;
1399:Generated_Source\PSoC4/CyLib.c **** 
1400:Generated_Source\PSoC4/CyLib.c ****             uint32 gmMin;
1401:Generated_Source\PSoC4/CyLib.c **** 
1402:Generated_Source\PSoC4/CyLib.c **** 
1403:Generated_Source\PSoC4/CyLib.c ****             if ((maxAmplitude < CY_SYS_CLK_ECO_MAX_AMPL_MIN_mV) ||
1404:Generated_Source\PSoC4/CyLib.c ****                 (freq < CY_SYS_CLK_ECO_FREQ_KHZ_MIN) || (freq > CY_SYS_CLK_ECO_FREQ_KHZ_MAX))
1405:Generated_Source\PSoC4/CyLib.c ****             {
1406:Generated_Source\PSoC4/CyLib.c ****                 returnStatus = CYRET_BAD_PARAM;
1407:Generated_Source\PSoC4/CyLib.c ****             }
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 40


1408:Generated_Source\PSoC4/CyLib.c ****             else
1409:Generated_Source\PSoC4/CyLib.c ****             {
1410:Generated_Source\PSoC4/CyLib.c ****                 /* Calculate amplitude trim */
1411:Generated_Source\PSoC4/CyLib.c ****                 aTrim = (maxAmplitude < CY_SYS_CLK_ECO_TRIM_BOUNDARY) ? ((maxAmplitude/100u) - 4u) 
1412:Generated_Source\PSoC4/CyLib.c **** 
1413:Generated_Source\PSoC4/CyLib.c ****                 if (maxAmplitude < CY_SYS_CLK_ECO_AMPL_FOR_ATRIM0)
1414:Generated_Source\PSoC4/CyLib.c ****                 {
1415:Generated_Source\PSoC4/CyLib.c ****                     aTrim = CY_SYS_CLK_ECO_ATRIM0;
1416:Generated_Source\PSoC4/CyLib.c ****                 }
1417:Generated_Source\PSoC4/CyLib.c ****                 else if (maxAmplitude < CY_SYS_CLK_ECO_AMPL_FOR_ATRIM1)
1418:Generated_Source\PSoC4/CyLib.c ****                 {
1419:Generated_Source\PSoC4/CyLib.c ****                     aTrim = CY_SYS_CLK_ECO_ATRIM1;
1420:Generated_Source\PSoC4/CyLib.c ****                 }
1421:Generated_Source\PSoC4/CyLib.c ****                 else if (maxAmplitude < CY_SYS_CLK_ECO_AMPL_FOR_ATRIM2)
1422:Generated_Source\PSoC4/CyLib.c ****                 {
1423:Generated_Source\PSoC4/CyLib.c ****                     aTrim = CY_SYS_CLK_ECO_ATRIM2;
1424:Generated_Source\PSoC4/CyLib.c ****                 }
1425:Generated_Source\PSoC4/CyLib.c ****                 else if (maxAmplitude < CY_SYS_CLK_ECO_AMPL_FOR_ATRIM3)
1426:Generated_Source\PSoC4/CyLib.c ****                 {
1427:Generated_Source\PSoC4/CyLib.c ****                     aTrim = CY_SYS_CLK_ECO_ATRIM3;
1428:Generated_Source\PSoC4/CyLib.c ****                 }
1429:Generated_Source\PSoC4/CyLib.c ****                 else if (maxAmplitude < CY_SYS_CLK_ECO_AMPL_FOR_ATRIM4)
1430:Generated_Source\PSoC4/CyLib.c ****                 {
1431:Generated_Source\PSoC4/CyLib.c ****                     aTrim = CY_SYS_CLK_ECO_ATRIM4;
1432:Generated_Source\PSoC4/CyLib.c ****                 }
1433:Generated_Source\PSoC4/CyLib.c ****                 else if (maxAmplitude < CY_SYS_CLK_ECO_AMPL_FOR_ATRIM5)
1434:Generated_Source\PSoC4/CyLib.c ****                 {
1435:Generated_Source\PSoC4/CyLib.c ****                     aTrim = CY_SYS_CLK_ECO_ATRIM5;
1436:Generated_Source\PSoC4/CyLib.c ****                 }
1437:Generated_Source\PSoC4/CyLib.c ****                 else if (maxAmplitude < CY_SYS_CLK_ECO_AMPL_FOR_ATRIM6)
1438:Generated_Source\PSoC4/CyLib.c ****                 {
1439:Generated_Source\PSoC4/CyLib.c ****                     aTrim = CY_SYS_CLK_ECO_ATRIM6;
1440:Generated_Source\PSoC4/CyLib.c ****                 }
1441:Generated_Source\PSoC4/CyLib.c ****                 else
1442:Generated_Source\PSoC4/CyLib.c ****                 {
1443:Generated_Source\PSoC4/CyLib.c ****                     aTrim = CY_SYS_CLK_ECO_ATRIM7;
1444:Generated_Source\PSoC4/CyLib.c ****                 }
1445:Generated_Source\PSoC4/CyLib.c **** 
1446:Generated_Source\PSoC4/CyLib.c ****                 /* Calculate Watchdog trim. */
1447:Generated_Source\PSoC4/CyLib.c ****                 wDTrim = (maxAmplitude < CY_SYS_CLK_ECO_TRIM_BOUNDARY) ? ((maxAmplitude/200u) - 2u)
1448:Generated_Source\PSoC4/CyLib.c **** 
1449:Generated_Source\PSoC4/CyLib.c ****                 /* Calculate amplifier gain trim. */
1450:Generated_Source\PSoC4/CyLib.c ****                 gmMin = (uint32) (((((CY_SYS_CLK_ECO_GMMIN_COEFFICIENT * freq * cLoad) / 1000) * ((
1451:Generated_Source\PSoC4/CyLib.c ****                 if (gmMin > 3u)
1452:Generated_Source\PSoC4/CyLib.c ****                 {
1453:Generated_Source\PSoC4/CyLib.c ****                     returnStatus = CYRET_BAD_PARAM;
1454:Generated_Source\PSoC4/CyLib.c ****                     gTrim = 0u;
1455:Generated_Source\PSoC4/CyLib.c ****                 }
1456:Generated_Source\PSoC4/CyLib.c ****                 else if (gmMin > 1u)
1457:Generated_Source\PSoC4/CyLib.c ****                 {
1458:Generated_Source\PSoC4/CyLib.c ****                     gTrim = gmMin;
1459:Generated_Source\PSoC4/CyLib.c ****                 }
1460:Generated_Source\PSoC4/CyLib.c ****                 else
1461:Generated_Source\PSoC4/CyLib.c ****                 {
1462:Generated_Source\PSoC4/CyLib.c ****                     gTrim = (gmMin == 1u) ? 0u : 1u;
1463:Generated_Source\PSoC4/CyLib.c ****                 }
1464:Generated_Source\PSoC4/CyLib.c **** 
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 41


1465:Generated_Source\PSoC4/CyLib.c ****                 /* Calculate feedback resistor trim */
1466:Generated_Source\PSoC4/CyLib.c ****                 if (freq > CY_SYS_CLK_ECO_FREQ_FOR_FTRIM0)
1467:Generated_Source\PSoC4/CyLib.c ****                 {
1468:Generated_Source\PSoC4/CyLib.c ****                     rTrim = CY_SYS_CLK_ECO_FTRIM0;
1469:Generated_Source\PSoC4/CyLib.c ****                 }
1470:Generated_Source\PSoC4/CyLib.c ****                 else if (freq > CY_SYS_CLK_ECO_FREQ_FOR_FTRIM1)
1471:Generated_Source\PSoC4/CyLib.c ****                 {
1472:Generated_Source\PSoC4/CyLib.c ****                     rTrim = CY_SYS_CLK_ECO_FTRIM1;
1473:Generated_Source\PSoC4/CyLib.c ****                 }
1474:Generated_Source\PSoC4/CyLib.c ****                 else if (freq > CY_SYS_CLK_ECO_FREQ_FOR_FTRIM2)
1475:Generated_Source\PSoC4/CyLib.c ****                 {
1476:Generated_Source\PSoC4/CyLib.c ****                     rTrim = CY_SYS_CLK_ECO_FTRIM2;
1477:Generated_Source\PSoC4/CyLib.c ****                 }
1478:Generated_Source\PSoC4/CyLib.c ****                 else
1479:Generated_Source\PSoC4/CyLib.c ****                 {
1480:Generated_Source\PSoC4/CyLib.c ****                     rTrim = CY_SYS_CLK_ECO_FTRIM3;
1481:Generated_Source\PSoC4/CyLib.c ****                 }
1482:Generated_Source\PSoC4/CyLib.c **** 
1483:Generated_Source\PSoC4/CyLib.c ****                 /* Calculate filter frequency trim */
1484:Generated_Source\PSoC4/CyLib.c ****                 fTrim = rTrim;
1485:Generated_Source\PSoC4/CyLib.c **** 
1486:Generated_Source\PSoC4/CyLib.c ****                 CySysClkConfigureEcoTrim(wDTrim, aTrim, fTrim, rTrim, gTrim);
1487:Generated_Source\PSoC4/CyLib.c **** 
1488:Generated_Source\PSoC4/CyLib.c ****                 /* Automatic Gain Control (AGC) enable */
1489:Generated_Source\PSoC4/CyLib.c ****                 if (maxAmplitude < 2u)
1490:Generated_Source\PSoC4/CyLib.c ****                 {
1491:Generated_Source\PSoC4/CyLib.c ****                     /* The oscillation amplitude is controlled to the level selected by amplitude t
1492:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_CLK_ECO_CONFIG_REG |= CY_SYS_CLK_ECO_CONFIG_AGC_EN;
1493:Generated_Source\PSoC4/CyLib.c ****                 }
1494:Generated_Source\PSoC4/CyLib.c ****                 else
1495:Generated_Source\PSoC4/CyLib.c ****                 {
1496:Generated_Source\PSoC4/CyLib.c ****                     /* The amplitude is not explicitly controlled and will grow until it saturates 
1497:Generated_Source\PSoC4/CyLib.c ****                     * supply rail (1.8V nom).
1498:Generated_Source\PSoC4/CyLib.c ****                     */
1499:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_CLK_ECO_CONFIG_REG &= (uint32) ~CY_SYS_CLK_ECO_CONFIG_AGC_EN;
1500:Generated_Source\PSoC4/CyLib.c ****                 }
1501:Generated_Source\PSoC4/CyLib.c ****             }
1502:Generated_Source\PSoC4/CyLib.c **** 
1503:Generated_Source\PSoC4/CyLib.c ****             return (returnStatus);
1504:Generated_Source\PSoC4/CyLib.c ****         }
1505:Generated_Source\PSoC4/CyLib.c **** 
1506:Generated_Source\PSoC4/CyLib.c ****     #endif /* CY_IP_ECO_BLESS */
1507:Generated_Source\PSoC4/CyLib.c **** 
1508:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_ECO) */
1509:Generated_Source\PSoC4/CyLib.c **** 
1510:Generated_Source\PSoC4/CyLib.c **** 
1511:Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_SRSSV2 && CY_IP_PLL)
1512:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1513:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllStart
1514:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1515:Generated_Source\PSoC4/CyLib.c ****     *
1516:Generated_Source\PSoC4/CyLib.c ****     * Enables the PLL. Optionally waits for it to become stable. Waits at least
1517:Generated_Source\PSoC4/CyLib.c ****     * 250 us or until it is detected that the PLL is stable.
1518:Generated_Source\PSoC4/CyLib.c ****     *
1519:Generated_Source\PSoC4/CyLib.c ****     * Clears the unlock occurred status bit by calling CySysClkPllGetUnlockStatus(),
1520:Generated_Source\PSoC4/CyLib.c ****     * once the PLL is locked if the wait parameter is 1).
1521:Generated_Source\PSoC4/CyLib.c ****     *
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 42


1522:Generated_Source\PSoC4/CyLib.c ****     * This API is available only for PSoC 4200L devices.
1523:Generated_Source\PSoC4/CyLib.c ****     *
1524:Generated_Source\PSoC4/CyLib.c ****     * \param PLL:
1525:Generated_Source\PSoC4/CyLib.c ****     * 0   PLL#0
1526:Generated_Source\PSoC4/CyLib.c ****     * 1   PLL#1
1527:Generated_Source\PSoC4/CyLib.c ****     *
1528:Generated_Source\PSoC4/CyLib.c ****     * \param wait:
1529:Generated_Source\PSoC4/CyLib.c ****     * 0 - Return immediately after configuration.
1530:Generated_Source\PSoC4/CyLib.c ****     * 1 - Wait for PLL lock or timeout. This API shall use the CyDelayUs() to
1531:Generated_Source\PSoC4/CyLib.c ****     * implement the timeout feature.
1532:Generated_Source\PSoC4/CyLib.c ****     *
1533:Generated_Source\PSoC4/CyLib.c ****     * \return CYRET_SUCCESS Completed successfully.
1534:Generated_Source\PSoC4/CyLib.c ****     * \return CYRET_TIMEOUT The timeout occurred without detecting a stable clock.
1535:Generated_Source\PSoC4/CyLib.c ****     * If the input source of the clock is jittery, then the lock indication may
1536:Generated_Source\PSoC4/CyLib.c ****     * not occur. However, after the timeout has expired, the generated PLL clock can
1537:Generated_Source\PSoC4/CyLib.c ****     * still be used.
1538:Generated_Source\PSoC4/CyLib.c ****     * \return CYRET_BAD_PARAM - Either the PLL or wait parameter is invalid.
1539:Generated_Source\PSoC4/CyLib.c ****     *
1540:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1541:Generated_Source\PSoC4/CyLib.c ****     cystatus CySysClkPllStart(uint32 pll, uint32 wait)
1542:Generated_Source\PSoC4/CyLib.c ****     {
1543:Generated_Source\PSoC4/CyLib.c ****         uint32 counts = CY_SYS_CLK_PLL_MAX_STARTUP_US;
1544:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
1545:Generated_Source\PSoC4/CyLib.c ****         cystatus returnStatus = CYRET_SUCCESS;
1546:Generated_Source\PSoC4/CyLib.c **** 
1547:Generated_Source\PSoC4/CyLib.c ****         if((pll < CY_IP_PLL_NR) && (wait <= 1u))
1548:Generated_Source\PSoC4/CyLib.c ****         {
1549:Generated_Source\PSoC4/CyLib.c ****             interruptState = CyEnterCriticalSection();
1550:Generated_Source\PSoC4/CyLib.c **** 
1551:Generated_Source\PSoC4/CyLib.c ****             /* Isolate PLL outputs */
1552:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_PLL_BASE.pll[pll].config &= (uint32) ~CY_SYS_CLK_PLL_CONFIG_ISOLATE;
1553:Generated_Source\PSoC4/CyLib.c **** 
1554:Generated_Source\PSoC4/CyLib.c ****             /* Enable PLL */
1555:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_PLL_BASE.pll[pll].config |= CY_SYS_CLK_PLL_CONFIG_ENABLE;
1556:Generated_Source\PSoC4/CyLib.c **** 
1557:Generated_Source\PSoC4/CyLib.c ****             CyExitCriticalSection(interruptState);
1558:Generated_Source\PSoC4/CyLib.c **** 
1559:Generated_Source\PSoC4/CyLib.c ****             /* De-isolate >= CY_SYS_CLK_PLL_MIN_STARTUP_US after PLL enabled */
1560:Generated_Source\PSoC4/CyLib.c ****             CyDelayUs(CY_SYS_CLK_PLL_MIN_STARTUP_US);
1561:Generated_Source\PSoC4/CyLib.c ****             interruptState = CyEnterCriticalSection();
1562:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_PLL_BASE.pll[pll].config |= CY_SYS_CLK_PLL_CONFIG_ISOLATE;
1563:Generated_Source\PSoC4/CyLib.c ****             CyExitCriticalSection(interruptState);
1564:Generated_Source\PSoC4/CyLib.c **** 
1565:Generated_Source\PSoC4/CyLib.c ****             if(wait != 0u)
1566:Generated_Source\PSoC4/CyLib.c ****             {
1567:Generated_Source\PSoC4/CyLib.c ****                 returnStatus = CYRET_TIMEOUT;
1568:Generated_Source\PSoC4/CyLib.c **** 
1569:Generated_Source\PSoC4/CyLib.c ****                 while(0u != counts)
1570:Generated_Source\PSoC4/CyLib.c ****                 {
1571:Generated_Source\PSoC4/CyLib.c **** 
1572:Generated_Source\PSoC4/CyLib.c ****                     if(0u != CySysClkPllGetLockStatus(pll))
1573:Generated_Source\PSoC4/CyLib.c ****                     {
1574:Generated_Source\PSoC4/CyLib.c ****                         returnStatus = CYRET_SUCCESS;
1575:Generated_Source\PSoC4/CyLib.c ****                         (void) CySysClkPllGetUnlockStatus(pll);
1576:Generated_Source\PSoC4/CyLib.c ****                         break;
1577:Generated_Source\PSoC4/CyLib.c ****                     }
1578:Generated_Source\PSoC4/CyLib.c **** 
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 43


1579:Generated_Source\PSoC4/CyLib.c ****                     CyDelayUs(1u);
1580:Generated_Source\PSoC4/CyLib.c ****                     counts--;
1581:Generated_Source\PSoC4/CyLib.c ****                 }
1582:Generated_Source\PSoC4/CyLib.c ****             }
1583:Generated_Source\PSoC4/CyLib.c ****         }
1584:Generated_Source\PSoC4/CyLib.c ****         else
1585:Generated_Source\PSoC4/CyLib.c ****         {
1586:Generated_Source\PSoC4/CyLib.c ****             returnStatus = CYRET_BAD_PARAM;
1587:Generated_Source\PSoC4/CyLib.c ****         }
1588:Generated_Source\PSoC4/CyLib.c **** 
1589:Generated_Source\PSoC4/CyLib.c ****         return (returnStatus);
1590:Generated_Source\PSoC4/CyLib.c ****     }
1591:Generated_Source\PSoC4/CyLib.c **** 
1592:Generated_Source\PSoC4/CyLib.c **** 
1593:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1594:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllGetLockStatus
1595:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1596:Generated_Source\PSoC4/CyLib.c ****     *
1597:Generated_Source\PSoC4/CyLib.c ****     * Returns non-zero if the output of the specified PLL output is locked.
1598:Generated_Source\PSoC4/CyLib.c ****     *
1599:Generated_Source\PSoC4/CyLib.c ****     * This API is available only for PSoC 4200L devices.
1600:Generated_Source\PSoC4/CyLib.c ****     *
1601:Generated_Source\PSoC4/CyLib.c ****     * PLL:
1602:Generated_Source\PSoC4/CyLib.c ****     *  0   PLL#0
1603:Generated_Source\PSoC4/CyLib.c ****     *  1   PLL#1
1604:Generated_Source\PSoC4/CyLib.c ****     *
1605:Generated_Source\PSoC4/CyLib.c ****     * \return A non-zero value when the specified PLL is locked.
1606:Generated_Source\PSoC4/CyLib.c ****     *
1607:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1608:Generated_Source\PSoC4/CyLib.c ****     uint32 CySysClkPllGetLockStatus(uint32 pll)
1609:Generated_Source\PSoC4/CyLib.c ****     {
1610:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
1611:Generated_Source\PSoC4/CyLib.c ****         uint32 returnStatus;
1612:Generated_Source\PSoC4/CyLib.c **** 
1613:Generated_Source\PSoC4/CyLib.c ****         CYASSERT(pll < CY_IP_PLL_NR);
1614:Generated_Source\PSoC4/CyLib.c **** 
1615:Generated_Source\PSoC4/CyLib.c ****         interruptState = CyEnterCriticalSection();
1616:Generated_Source\PSoC4/CyLib.c **** 
1617:Generated_Source\PSoC4/CyLib.c ****         /* PLL is locked if reported so for two consecutive read. */
1618:Generated_Source\PSoC4/CyLib.c ****         returnStatus = CY_SYS_CLK_PLL_BASE.pll[pll].status & CY_SYS_CLK_PLL_STATUS_LOCKED;
1619:Generated_Source\PSoC4/CyLib.c ****         if(0u != returnStatus)
1620:Generated_Source\PSoC4/CyLib.c ****         {
1621:Generated_Source\PSoC4/CyLib.c ****             returnStatus = CY_SYS_CLK_PLL_BASE.pll[pll].status & CY_SYS_CLK_PLL_STATUS_LOCKED;
1622:Generated_Source\PSoC4/CyLib.c ****         }
1623:Generated_Source\PSoC4/CyLib.c **** 
1624:Generated_Source\PSoC4/CyLib.c ****         CyExitCriticalSection(interruptState);
1625:Generated_Source\PSoC4/CyLib.c **** 
1626:Generated_Source\PSoC4/CyLib.c ****         return (returnStatus);
1627:Generated_Source\PSoC4/CyLib.c ****     }
1628:Generated_Source\PSoC4/CyLib.c **** 
1629:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1630:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllStop
1631:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1632:Generated_Source\PSoC4/CyLib.c ****     *
1633:Generated_Source\PSoC4/CyLib.c ****     * Disables the PLL.
1634:Generated_Source\PSoC4/CyLib.c ****     *
1635:Generated_Source\PSoC4/CyLib.c ****     * Ensures that either PLL is not the source of HFCLK before it is disabled,
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 44


1636:Generated_Source\PSoC4/CyLib.c ****     * otherwise, the CPU will halt.
1637:Generated_Source\PSoC4/CyLib.c ****     *
1638:Generated_Source\PSoC4/CyLib.c ****     * This API is available only for PSoC 4200L devices.
1639:Generated_Source\PSoC4/CyLib.c ****     *
1640:Generated_Source\PSoC4/CyLib.c ****     * PLL:
1641:Generated_Source\PSoC4/CyLib.c ****     *  0   PLL#0
1642:Generated_Source\PSoC4/CyLib.c ****     *  1   PLL#1
1643:Generated_Source\PSoC4/CyLib.c ****     *
1644:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1645:Generated_Source\PSoC4/CyLib.c ****     void CySysClkPllStop(uint32 pll)
1646:Generated_Source\PSoC4/CyLib.c ****     {
1647:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
1648:Generated_Source\PSoC4/CyLib.c **** 
1649:Generated_Source\PSoC4/CyLib.c ****         if (pll < CY_IP_PLL_NR)
1650:Generated_Source\PSoC4/CyLib.c ****         {
1651:Generated_Source\PSoC4/CyLib.c ****             interruptState = CyEnterCriticalSection();
1652:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_PLL_BASE.pll[pll].config &= (uint32) ~(CY_SYS_CLK_PLL_CONFIG_ISOLATE | CY_SY
1653:Generated_Source\PSoC4/CyLib.c ****             CyExitCriticalSection(interruptState);
1654:Generated_Source\PSoC4/CyLib.c ****         }
1655:Generated_Source\PSoC4/CyLib.c ****     }
1656:Generated_Source\PSoC4/CyLib.c **** 
1657:Generated_Source\PSoC4/CyLib.c **** 
1658:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1659:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllSetPQ
1660:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1661:Generated_Source\PSoC4/CyLib.c ****     *
1662:Generated_Source\PSoC4/CyLib.c ****     * Sets feedback (P) and reference the (Q) divider value. This API also sets the
1663:Generated_Source\PSoC4/CyLib.c ****     * programmable charge pump current value. Note that the PLL has to be disabled
1664:Generated_Source\PSoC4/CyLib.c ****     * before calling this API. If this function is called while any PLL is sourcing,
1665:Generated_Source\PSoC4/CyLib.c ****     * the SYSCLK will return an error.
1666:Generated_Source\PSoC4/CyLib.c ****     *
1667:Generated_Source\PSoC4/CyLib.c ****     * The PLL must not be the system clock source when calling this function. The
1668:Generated_Source\PSoC4/CyLib.c ****     * PLL output will glitch during this function call.
1669:Generated_Source\PSoC4/CyLib.c ****     *
1670:Generated_Source\PSoC4/CyLib.c ****     * This API is available only for PSoC 4200L devices.
1671:Generated_Source\PSoC4/CyLib.c ****     *
1672:Generated_Source\PSoC4/CyLib.c ****     * \param PLL:
1673:Generated_Source\PSoC4/CyLib.c ****     *  0   PLL#0
1674:Generated_Source\PSoC4/CyLib.c ****     *  1   PLL#1
1675:Generated_Source\PSoC4/CyLib.c ****     *
1676:Generated_Source\PSoC4/CyLib.c ****     * \param feedback The P divider. Range 4 - 259. Control bits for the feedback
1677:Generated_Source\PSoC4/CyLib.c ****     * divider.
1678:Generated_Source\PSoC4/CyLib.c ****     *
1679:Generated_Source\PSoC4/CyLib.c ****     * \param reference The Q divider. Range 1 - 64. Divide by the reference.
1680:Generated_Source\PSoC4/CyLib.c ****     *
1681:Generated_Source\PSoC4/CyLib.c ****     * \param current Charge the pump current in uA. The 2 uA for output frequencies
1682:Generated_Source\PSoC4/CyLib.c ****     * of 67 MHz or less, and 3 uA for higher output frequencies. The default
1683:Generated_Source\PSoC4/CyLib.c ****     * value is 2 uA.
1684:Generated_Source\PSoC4/CyLib.c ****     *
1685:Generated_Source\PSoC4/CyLib.c ****     * \return CYRET_SUCCESS Completed successfully.
1686:Generated_Source\PSoC4/CyLib.c ****     * \return CYRET_BAD_PARAM The parameters are out of range or the specified PLL
1687:Generated_Source\PSoC4/CyLib.c ****     * sources the system clock.
1688:Generated_Source\PSoC4/CyLib.c ****     *
1689:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1690:Generated_Source\PSoC4/CyLib.c ****     cystatus CySysClkPllSetPQ(uint32 pll, uint32 feedback, uint32 reference, uint32 current)
1691:Generated_Source\PSoC4/CyLib.c ****     {
1692:Generated_Source\PSoC4/CyLib.c ****         uint32   regTmp;
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 45


1693:Generated_Source\PSoC4/CyLib.c ****         cystatus tmp;
1694:Generated_Source\PSoC4/CyLib.c ****         uint8    interruptState;
1695:Generated_Source\PSoC4/CyLib.c ****         cystatus returnStatus = CYRET_BAD_PARAM;
1696:Generated_Source\PSoC4/CyLib.c **** 
1697:Generated_Source\PSoC4/CyLib.c ****         interruptState = CyEnterCriticalSection();
1698:Generated_Source\PSoC4/CyLib.c **** 
1699:Generated_Source\PSoC4/CyLib.c ****         tmp = CySysClkPllConfigChangeAllowed(pll);
1700:Generated_Source\PSoC4/CyLib.c **** 
1701:Generated_Source\PSoC4/CyLib.c ****         if ((pll < CY_IP_PLL_NR) &&
1702:Generated_Source\PSoC4/CyLib.c ****             (feedback  >= CY_SYS_CLK_PLL_CONFIG_FEEDBACK_DIV_MIN)  && (feedback  <= CY_SYS_CLK_PLL_
1703:Generated_Source\PSoC4/CyLib.c ****             (reference >= CY_SYS_CLK_PLL_CONFIG_REFERENCE_DIV_MIN) && (reference <= CY_SYS_CLK_PLL_
1704:Generated_Source\PSoC4/CyLib.c ****             (current   >= CY_SYS_CLK_PLL_CONFIG_ICP_SEL_MIN )      && (current   <= CY_SYS_CLK_PLL_
1705:Generated_Source\PSoC4/CyLib.c ****             (CYRET_SUCCESS == tmp))
1706:Generated_Source\PSoC4/CyLib.c ****         {
1707:Generated_Source\PSoC4/CyLib.c ****             /* Set new feedback, reference and current values */
1708:Generated_Source\PSoC4/CyLib.c ****             regTmp  = CY_SYS_CLK_PLL_BASE.pll[pll].config & (uint32) ~(CY_SYS_CLK_PLL_CONFIG_FEEDBA
1709:Generated_Source\PSoC4/CyLib.c ****                                                                        CY_SYS_CLK_PLL_CONFIG_REFERE
1710:Generated_Source\PSoC4/CyLib.c ****                                                                        CY_SYS_CLK_PLL_CONFIG_ICP_SE
1711:Generated_Source\PSoC4/CyLib.c **** 
1712:Generated_Source\PSoC4/CyLib.c ****             regTmp |= ((feedback << CY_SYS_CLK_PLL_CONFIG_FEEDBACK_DIV_SHIFT) & CY_SYS_CLK_PLL_CONF
1713:Generated_Source\PSoC4/CyLib.c ****             regTmp |= (((reference - 1u) << CY_SYS_CLK_PLL_CONFIG_REFERENCE_DIV_SHIFT) & CY_SYS_CLK
1714:Generated_Source\PSoC4/CyLib.c ****             regTmp |= ((current << CY_SYS_CLK_PLL_CONFIG_ICP_SEL_SHIFT) & CY_SYS_CLK_PLL_CONFIG_ICP
1715:Generated_Source\PSoC4/CyLib.c **** 
1716:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_PLL_BASE.pll[pll].config = regTmp;
1717:Generated_Source\PSoC4/CyLib.c **** 
1718:Generated_Source\PSoC4/CyLib.c ****             returnStatus = CYRET_SUCCESS;
1719:Generated_Source\PSoC4/CyLib.c ****         }
1720:Generated_Source\PSoC4/CyLib.c **** 
1721:Generated_Source\PSoC4/CyLib.c ****         CyExitCriticalSection(interruptState);
1722:Generated_Source\PSoC4/CyLib.c **** 
1723:Generated_Source\PSoC4/CyLib.c ****         return (returnStatus);
1724:Generated_Source\PSoC4/CyLib.c ****     }
1725:Generated_Source\PSoC4/CyLib.c **** 
1726:Generated_Source\PSoC4/CyLib.c **** 
1727:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1728:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllSetBypassMode
1729:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1730:Generated_Source\PSoC4/CyLib.c ****     *
1731:Generated_Source\PSoC4/CyLib.c ****     * Sets the bypass mode for the specified PLL.
1732:Generated_Source\PSoC4/CyLib.c ****     *
1733:Generated_Source\PSoC4/CyLib.c ****     * The PLL must not be the system clock source when calling this function.
1734:Generated_Source\PSoC4/CyLib.c ****     * The PLL output will glitch during this function call.
1735:Generated_Source\PSoC4/CyLib.c ****     *
1736:Generated_Source\PSoC4/CyLib.c ****     * When the PLL's reference input is higher than HFCLK frequency the device may 
1737:Generated_Source\PSoC4/CyLib.c ****     * lock due to incorrect flash wait cycle configuration and bypass switches from 
1738:Generated_Source\PSoC4/CyLib.c ****     * PLL output to the reference input. See description of 
1739:Generated_Source\PSoC4/CyLib.c ****     * CySysFlashSetWaitCycles() for more information.
1740:Generated_Source\PSoC4/CyLib.c ****     *
1741:Generated_Source\PSoC4/CyLib.c ****     * This API is available only for PSoC 4200L devices.
1742:Generated_Source\PSoC4/CyLib.c ****     *
1743:Generated_Source\PSoC4/CyLib.c ****     * \param PLL:
1744:Generated_Source\PSoC4/CyLib.c ****     *  0   PLL#0
1745:Generated_Source\PSoC4/CyLib.c ****     *  1   PLL#1
1746:Generated_Source\PSoC4/CyLib.c ****     *
1747:Generated_Source\PSoC4/CyLib.c ****     * \param bypass: The bypass mode.
1748:Generated_Source\PSoC4/CyLib.c ****     * CY_SYS_PLL_BYPASS_AUTO - Automatic usage of the lock indicator. When unlocked,
1749:Generated_Source\PSoC4/CyLib.c ****     * automatically selects PLL the reference input (bypass mode). When locked,
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 46


1750:Generated_Source\PSoC4/CyLib.c ****     * automatically selects the PLL output.
1751:Generated_Source\PSoC4/CyLib.c ****     *
1752:Generated_Source\PSoC4/CyLib.c ****     * CY_SYS_PLL_BYPASS_PLL_REF - Selects the PLL reference input (bypass mode).
1753:Generated_Source\PSoC4/CyLib.c ****     * Ignores the lock indicator.
1754:Generated_Source\PSoC4/CyLib.c ****     *
1755:Generated_Source\PSoC4/CyLib.c ****     * CY_SYS_PLL_BYPASS_PLL_OUT - Selects the PLL output.  Ignores the lock indicator.
1756:Generated_Source\PSoC4/CyLib.c ****     *
1757:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1758:Generated_Source\PSoC4/CyLib.c ****     void CySysClkPllSetBypassMode(uint32 pll, uint32 bypass)
1759:Generated_Source\PSoC4/CyLib.c ****     {
1760:Generated_Source\PSoC4/CyLib.c ****         uint32 regTmp;
1761:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
1762:Generated_Source\PSoC4/CyLib.c **** 
1763:Generated_Source\PSoC4/CyLib.c ****         interruptState = CyEnterCriticalSection();
1764:Generated_Source\PSoC4/CyLib.c **** 
1765:Generated_Source\PSoC4/CyLib.c ****         if ((pll < CY_IP_PLL_NR) && (bypass <= CY_SYS_PLL_BYPASS_PLL_OUT))
1766:Generated_Source\PSoC4/CyLib.c ****         {
1767:Generated_Source\PSoC4/CyLib.c ****             regTmp  = CY_SYS_CLK_PLL_BASE.pll[pll].config & (uint32) ~CY_SYS_CLK_PLL_CONFIG_BYPASS_
1768:Generated_Source\PSoC4/CyLib.c ****             regTmp |=  (uint32)(bypass << CY_SYS_CLK_PLL_CONFIG_BYPASS_SEL_SHIFT);
1769:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_PLL_BASE.pll[pll].config = regTmp;
1770:Generated_Source\PSoC4/CyLib.c ****         }
1771:Generated_Source\PSoC4/CyLib.c **** 
1772:Generated_Source\PSoC4/CyLib.c ****         CyExitCriticalSection(interruptState);
1773:Generated_Source\PSoC4/CyLib.c ****     }
1774:Generated_Source\PSoC4/CyLib.c **** 
1775:Generated_Source\PSoC4/CyLib.c **** 
1776:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1777:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllGetBypassMode
1778:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1779:Generated_Source\PSoC4/CyLib.c ****     *
1780:Generated_Source\PSoC4/CyLib.c ****     *  Gets the bypass mode for the specified PLL.
1781:Generated_Source\PSoC4/CyLib.c ****     *  This API is available only for PSoC 4200L devices.
1782:Generated_Source\PSoC4/CyLib.c ****     *
1783:Generated_Source\PSoC4/CyLib.c ****     *  \param PLL:
1784:Generated_Source\PSoC4/CyLib.c ****     *   0   PLL#0
1785:Generated_Source\PSoC4/CyLib.c ****     *   1   PLL#1
1786:Generated_Source\PSoC4/CyLib.c ****     *
1787:Generated_Source\PSoC4/CyLib.c ****     *  \param bypass: Bypass mode.
1788:Generated_Source\PSoC4/CyLib.c ****     *   The same as the parameter of the CySysClkPllSetBypassMode().
1789:Generated_Source\PSoC4/CyLib.c ****     *
1790:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1791:Generated_Source\PSoC4/CyLib.c ****     static uint32 CySysClkPllGetBypassMode(uint32 pll)
1792:Generated_Source\PSoC4/CyLib.c ****     {
1793:Generated_Source\PSoC4/CyLib.c ****         uint32 returnValue;
1794:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
1795:Generated_Source\PSoC4/CyLib.c **** 
1796:Generated_Source\PSoC4/CyLib.c ****         CYASSERT(pll < CY_IP_PLL_NR);
1797:Generated_Source\PSoC4/CyLib.c **** 
1798:Generated_Source\PSoC4/CyLib.c ****         interruptState = CyEnterCriticalSection();
1799:Generated_Source\PSoC4/CyLib.c **** 
1800:Generated_Source\PSoC4/CyLib.c ****         returnValue = CY_SYS_CLK_PLL_BASE.pll[pll].config & CY_SYS_CLK_PLL_CONFIG_BYPASS_SEL_MASK;
1801:Generated_Source\PSoC4/CyLib.c ****         returnValue =  returnValue >> CY_SYS_CLK_PLL_CONFIG_BYPASS_SEL_SHIFT;
1802:Generated_Source\PSoC4/CyLib.c **** 
1803:Generated_Source\PSoC4/CyLib.c ****         CyExitCriticalSection(interruptState);
1804:Generated_Source\PSoC4/CyLib.c **** 
1805:Generated_Source\PSoC4/CyLib.c ****         return (returnValue);
1806:Generated_Source\PSoC4/CyLib.c ****     }
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 47


1807:Generated_Source\PSoC4/CyLib.c **** 
1808:Generated_Source\PSoC4/CyLib.c **** 
1809:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1810:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllConfigChangeAllowed
1811:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1812:Generated_Source\PSoC4/CyLib.c ****     *
1813:Generated_Source\PSoC4/CyLib.c ****     *  The function returns non-zero value if the specified PLL sources the System
1814:Generated_Source\PSoC4/CyLib.c ****     *  clock and the PLL is not in the bypass mode.
1815:Generated_Source\PSoC4/CyLib.c ****     *
1816:Generated_Source\PSoC4/CyLib.c ****     *  This API is available only for PSoC 4200L devices.
1817:Generated_Source\PSoC4/CyLib.c ****     *
1818:Generated_Source\PSoC4/CyLib.c ****     *  \param PLL:
1819:Generated_Source\PSoC4/CyLib.c ****     *   0   PLL#0
1820:Generated_Source\PSoC4/CyLib.c ****     *   1   PLL#1
1821:Generated_Source\PSoC4/CyLib.c ****     *
1822:Generated_Source\PSoC4/CyLib.c ****     * \return Non-zero value when the specified PLL sources the System clock and
1823:Generated_Source\PSoC4/CyLib.c ****     * the PLL is not in the bypass mode.
1824:Generated_Source\PSoC4/CyLib.c ****     *
1825:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1826:Generated_Source\PSoC4/CyLib.c ****     static cystatus CySysClkPllConfigChangeAllowed(uint32 pll)
1827:Generated_Source\PSoC4/CyLib.c ****     {
1828:Generated_Source\PSoC4/CyLib.c ****         uint32   pllBypassMode;
1829:Generated_Source\PSoC4/CyLib.c ****         uint32   sysclkSource;
1830:Generated_Source\PSoC4/CyLib.c ****         cystatus returnValue = CYRET_LOCKED;
1831:Generated_Source\PSoC4/CyLib.c **** 
1832:Generated_Source\PSoC4/CyLib.c ****         sysclkSource  = CySysClkGetSysclkSource();
1833:Generated_Source\PSoC4/CyLib.c ****         pllBypassMode = CySysClkPllGetBypassMode(pll);
1834:Generated_Source\PSoC4/CyLib.c **** 
1835:Generated_Source\PSoC4/CyLib.c ****         if ((CY_SYS_PLL_BYPASS_PLL_REF == pllBypassMode)             ||
1836:Generated_Source\PSoC4/CyLib.c ****             ((CY_SYS_CLK_HFCLK_PLL0 != sysclkSource) && (0u == pll)) ||
1837:Generated_Source\PSoC4/CyLib.c ****             ((CY_SYS_CLK_HFCLK_PLL1 != sysclkSource) && (1u == pll)))
1838:Generated_Source\PSoC4/CyLib.c ****         {
1839:Generated_Source\PSoC4/CyLib.c ****             returnValue = CYRET_SUCCESS;
1840:Generated_Source\PSoC4/CyLib.c ****         }
1841:Generated_Source\PSoC4/CyLib.c **** 
1842:Generated_Source\PSoC4/CyLib.c ****         return (returnValue);
1843:Generated_Source\PSoC4/CyLib.c ****     }
1844:Generated_Source\PSoC4/CyLib.c **** 
1845:Generated_Source\PSoC4/CyLib.c **** 
1846:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1847:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllGetUnlockStatus
1848:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1849:Generated_Source\PSoC4/CyLib.c ****     *
1850:Generated_Source\PSoC4/CyLib.c ****     *  Returns a non-zero value if the specified PLL output was unlocked.
1851:Generated_Source\PSoC4/CyLib.c ****     *  The unlock status is an indicator that the PLL has lost a lock at least once
1852:Generated_Source\PSoC4/CyLib.c ****     *  during its operation. The unlock status is cleared once it is read using
1853:Generated_Source\PSoC4/CyLib.c ****     *  this API.
1854:Generated_Source\PSoC4/CyLib.c ****     *
1855:Generated_Source\PSoC4/CyLib.c ****     *  This API is available only for PSoC 4200L devices.
1856:Generated_Source\PSoC4/CyLib.c ****     *
1857:Generated_Source\PSoC4/CyLib.c ****     *  \param PLL:
1858:Generated_Source\PSoC4/CyLib.c ****     *   0   PLL#0
1859:Generated_Source\PSoC4/CyLib.c ****     *   1   PLL#1
1860:Generated_Source\PSoC4/CyLib.c ****     *
1861:Generated_Source\PSoC4/CyLib.c ****     * \return Non-zero value when the specified PLL was unlocked.
1862:Generated_Source\PSoC4/CyLib.c ****     *
1863:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 48


1864:Generated_Source\PSoC4/CyLib.c ****     uint32 CySysClkPllGetUnlockStatus(uint32 pll)
1865:Generated_Source\PSoC4/CyLib.c ****     {
1866:Generated_Source\PSoC4/CyLib.c ****         uint32 returnStatus = 0u;
1867:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
1868:Generated_Source\PSoC4/CyLib.c **** 
1869:Generated_Source\PSoC4/CyLib.c ****         interruptState = CyEnterCriticalSection();
1870:Generated_Source\PSoC4/CyLib.c **** 
1871:Generated_Source\PSoC4/CyLib.c ****         returnStatus = CY_SYS_CLK_PLL_BASE.pll[pll].test & CY_SYS_CLK_PLL_TEST_UNLOCK_OCCURRED_MASK
1872:Generated_Source\PSoC4/CyLib.c ****         CY_SYS_CLK_PLL_BASE.pll[pll].test |= CY_SYS_CLK_PLL_TEST_UNLOCK_OCCURRED_MASK;
1873:Generated_Source\PSoC4/CyLib.c **** 
1874:Generated_Source\PSoC4/CyLib.c ****         CyExitCriticalSection(interruptState);
1875:Generated_Source\PSoC4/CyLib.c **** 
1876:Generated_Source\PSoC4/CyLib.c ****         return (returnStatus);
1877:Generated_Source\PSoC4/CyLib.c ****     }
1878:Generated_Source\PSoC4/CyLib.c **** 
1879:Generated_Source\PSoC4/CyLib.c **** 
1880:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1881:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllSetFrequency
1882:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1883:Generated_Source\PSoC4/CyLib.c ****     *
1884:Generated_Source\PSoC4/CyLib.c ****     * Configures either PLL#0 or PLL#1 for the requested input/output frequencies.
1885:Generated_Source\PSoC4/CyLib.c ****     * The input frequency is the frequency of the source to the PLL. The source is
1886:Generated_Source\PSoC4/CyLib.c ****     * set using the CySysClkPllSetSource() function.
1887:Generated_Source\PSoC4/CyLib.c ****     *
1888:Generated_Source\PSoC4/CyLib.c ****     * The PLL must not be the system clock source when calling this function. The
1889:Generated_Source\PSoC4/CyLib.c ****     * PLL output will glitch during this function call.
1890:Generated_Source\PSoC4/CyLib.c ****     *
1891:Generated_Source\PSoC4/CyLib.c ****     * This API is available only for PSoC 4200L devices.
1892:Generated_Source\PSoC4/CyLib.c ****     *
1893:Generated_Source\PSoC4/CyLib.c ****     * \param pll:
1894:Generated_Source\PSoC4/CyLib.c ****     *  0   PLL#0
1895:Generated_Source\PSoC4/CyLib.c ****     *  1   PLL#1
1896:Generated_Source\PSoC4/CyLib.c ****     *
1897:Generated_Source\PSoC4/CyLib.c ****     * \param inputFreq The reference frequency in KHz. The valid range is from 1000 to 49152 KHz.
1898:Generated_Source\PSoC4/CyLib.c ****     *
1899:Generated_Source\PSoC4/CyLib.c ****     * \param pllFreq The target frequency in KHz. The valid range is from 22500 to 49152 KHz.
1900:Generated_Source\PSoC4/CyLib.c ****     *
1901:Generated_Source\PSoC4/CyLib.c ****     * \param divider The output clock divider for the PLL:
1902:Generated_Source\PSoC4/CyLib.c ****     * CY_SYS_PLL_OUTPUT_DIVPASS    Pass Through
1903:Generated_Source\PSoC4/CyLib.c ****     * CY_SYS_PLL_OUTPUT_DIV2       Divide by 2
1904:Generated_Source\PSoC4/CyLib.c ****     * CY_SYS_PLL_OUTPUT_DIV4       Divide by 4
1905:Generated_Source\PSoC4/CyLib.c ****     * CY_SYS_PLL_OUTPUT_DIV8       Divide by 8
1906:Generated_Source\PSoC4/CyLib.c ****     *
1907:Generated_Source\PSoC4/CyLib.c ****     * \param freqTol The tolerance in ppm, 10 ppm is equal to 0.001%.
1908:Generated_Source\PSoC4/CyLib.c ****     *
1909:Generated_Source\PSoC4/CyLib.c ****     * \return CYRET_SUCCESS The PLL was successfully configured for the requested
1910:Generated_Source\PSoC4/CyLib.c ****     * frequency.
1911:Generated_Source\PSoC4/CyLib.c ****     *
1912:Generated_Source\PSoC4/CyLib.c ****     * \return CYRET_BAD_PARAM The PLL was not able to successfully configure for the
1913:Generated_Source\PSoC4/CyLib.c ****     * requested frequency.
1914:Generated_Source\PSoC4/CyLib.c ****     *
1915:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1916:Generated_Source\PSoC4/CyLib.c ****     cystatus CySysClkPllSetFrequency(uint32 pll, uint32 inputFreq, uint32 pllFreq, uint32 divider, 
1917:Generated_Source\PSoC4/CyLib.c ****     {
1918:Generated_Source\PSoC4/CyLib.c ****         uint32 qMin;
1919:Generated_Source\PSoC4/CyLib.c ****         uint32 qMax;
1920:Generated_Source\PSoC4/CyLib.c **** 
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 49


1921:Generated_Source\PSoC4/CyLib.c ****         uint32 qVal = CY_SYS_CLK_PLL_INVALID;
1922:Generated_Source\PSoC4/CyLib.c ****         uint32 pVal = CY_SYS_CLK_PLL_INVALID;
1923:Generated_Source\PSoC4/CyLib.c **** 
1924:Generated_Source\PSoC4/CyLib.c ****         uint32 q;
1925:Generated_Source\PSoC4/CyLib.c ****         uint32 p;
1926:Generated_Source\PSoC4/CyLib.c **** 
1927:Generated_Source\PSoC4/CyLib.c ****         uint32 fvco;
1928:Generated_Source\PSoC4/CyLib.c ****         int32 ferr;
1929:Generated_Source\PSoC4/CyLib.c **** 
1930:Generated_Source\PSoC4/CyLib.c ****         cystatus tmp;
1931:Generated_Source\PSoC4/CyLib.c ****         cystatus returnStatus = CYRET_BAD_PARAM;
1932:Generated_Source\PSoC4/CyLib.c **** 
1933:Generated_Source\PSoC4/CyLib.c **** 
1934:Generated_Source\PSoC4/CyLib.c ****         tmp = CySysClkPllConfigChangeAllowed(pll);
1935:Generated_Source\PSoC4/CyLib.c **** 
1936:Generated_Source\PSoC4/CyLib.c ****         if ((pll < CY_IP_PLL_NR) &&
1937:Generated_Source\PSoC4/CyLib.c ****             (inputFreq  >= CY_SYS_CLK_PLL_INPUT_FREQ_MIN )  && (inputFreq  <= CY_SYS_CLK_PLL_INPUT_
1938:Generated_Source\PSoC4/CyLib.c ****             (pllFreq >= CY_SYS_CLK_PLL_OUTPUT_FREQ_MIN ) && (pllFreq <= CY_SYS_CLK_PLL_OUTPUT_FREQ_
1939:Generated_Source\PSoC4/CyLib.c ****             (divider <= CY_SYS_PLL_OUTPUT_DIV8) &&
1940:Generated_Source\PSoC4/CyLib.c ****             (CYRET_SUCCESS == tmp))
1941:Generated_Source\PSoC4/CyLib.c ****         {
1942:Generated_Source\PSoC4/CyLib.c **** 
1943:Generated_Source\PSoC4/CyLib.c ****             /* Minimum feed forward loop divisor */
1944:Generated_Source\PSoC4/CyLib.c ****             qMin = (inputFreq + (CY_SYS_CLK_PLL_FPFDMAX - 1u)) / CY_SYS_CLK_PLL_FPFDMAX;
1945:Generated_Source\PSoC4/CyLib.c ****             qMin = (qMin < CY_SYS_CLK_PLL_QMINIP) ? CY_SYS_CLK_PLL_QMINIP : qMin;
1946:Generated_Source\PSoC4/CyLib.c **** 
1947:Generated_Source\PSoC4/CyLib.c ****             /* Maximum feed forward loop divisor */
1948:Generated_Source\PSoC4/CyLib.c ****             qMax = inputFreq / CY_SYS_CLK_PLL_FPFDMIN;
1949:Generated_Source\PSoC4/CyLib.c ****             qMax = (qMax > CY_SYS_CLK_PLL_QMAXIP) ? CY_SYS_CLK_PLL_QMAXIP : qMax;
1950:Generated_Source\PSoC4/CyLib.c **** 
1951:Generated_Source\PSoC4/CyLib.c ****             if (qMin <= qMax)
1952:Generated_Source\PSoC4/CyLib.c ****             {
1953:Generated_Source\PSoC4/CyLib.c ****                 for(q = qMin; q <= qMax; q++)
1954:Generated_Source\PSoC4/CyLib.c ****                 {
1955:Generated_Source\PSoC4/CyLib.c ****                     /* Solve for the feedback divisor value */
1956:Generated_Source\PSoC4/CyLib.c **** 
1957:Generated_Source\PSoC4/CyLib.c ****                     /* INT((pllFreq * q ) / inputFreq), where INT is normal rounding  */
1958:Generated_Source\PSoC4/CyLib.c ****                     p = ((pllFreq * q) + (inputFreq / 2u)) / inputFreq;
1959:Generated_Source\PSoC4/CyLib.c **** 
1960:Generated_Source\PSoC4/CyLib.c ****                     /* Calculate the actual VCO frequency (FVCO) */
1961:Generated_Source\PSoC4/CyLib.c ****                     fvco = ((inputFreq * p) / q);
1962:Generated_Source\PSoC4/CyLib.c **** 
1963:Generated_Source\PSoC4/CyLib.c ****                     /* Calculate the frequency error (FERR) */
1964:Generated_Source\PSoC4/CyLib.c ****                     ferr = ((1000000 * ((int32) fvco - (int32) pllFreq))/ (int32) pllFreq);
1965:Generated_Source\PSoC4/CyLib.c **** 
1966:Generated_Source\PSoC4/CyLib.c ****                     /* Bound check the frequency error and decide next action */
1967:Generated_Source\PSoC4/CyLib.c ****                     if ((( -1 * (int32) freqTol) <= ferr) && (ferr <= (int32) freqTol))
1968:Generated_Source\PSoC4/CyLib.c ****                     {
1969:Generated_Source\PSoC4/CyLib.c ****                         qVal = q;
1970:Generated_Source\PSoC4/CyLib.c ****                         pVal = p;
1971:Generated_Source\PSoC4/CyLib.c ****                         break;
1972:Generated_Source\PSoC4/CyLib.c ****                     }
1973:Generated_Source\PSoC4/CyLib.c ****                 }
1974:Generated_Source\PSoC4/CyLib.c **** 
1975:Generated_Source\PSoC4/CyLib.c **** 
1976:Generated_Source\PSoC4/CyLib.c ****                 if ((pVal != CY_SYS_CLK_PLL_INVALID) && (qVal != CY_SYS_CLK_PLL_INVALID))
1977:Generated_Source\PSoC4/CyLib.c ****                 {
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 50


1978:Generated_Source\PSoC4/CyLib.c ****                     if (CySysClkPllSetPQ(pll, pVal, qVal, CY_SYS_CLK_PLL_CURRENT_DEFAULT) == CYRET_
1979:Generated_Source\PSoC4/CyLib.c ****                     {
1980:Generated_Source\PSoC4/CyLib.c ****                         returnStatus = CySysClkPllSetOutputDivider(pll, divider);
1981:Generated_Source\PSoC4/CyLib.c ****                     }
1982:Generated_Source\PSoC4/CyLib.c ****                 }
1983:Generated_Source\PSoC4/CyLib.c ****             }
1984:Generated_Source\PSoC4/CyLib.c **** 
1985:Generated_Source\PSoC4/CyLib.c ****         }
1986:Generated_Source\PSoC4/CyLib.c **** 
1987:Generated_Source\PSoC4/CyLib.c ****         return (returnStatus);
1988:Generated_Source\PSoC4/CyLib.c ****     }
1989:Generated_Source\PSoC4/CyLib.c **** 
1990:Generated_Source\PSoC4/CyLib.c **** 
1991:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1992:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllSetSource
1993:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1994:Generated_Source\PSoC4/CyLib.c ****     *
1995:Generated_Source\PSoC4/CyLib.c ****     *  Sets the input clock source to the PLL. The PLL must be disabled before
1996:Generated_Source\PSoC4/CyLib.c ****     *  calling this function.
1997:Generated_Source\PSoC4/CyLib.c ****     *
1998:Generated_Source\PSoC4/CyLib.c ****     *  This API is available only for PSoC 4200L devices.
1999:Generated_Source\PSoC4/CyLib.c ****     *
2000:Generated_Source\PSoC4/CyLib.c ****     *  \param PLL:
2001:Generated_Source\PSoC4/CyLib.c ****     *  0   PLL#0
2002:Generated_Source\PSoC4/CyLib.c ****     *  1   PLL#1
2003:Generated_Source\PSoC4/CyLib.c ****     *
2004:Generated_Source\PSoC4/CyLib.c ****     * \param source:
2005:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_SOURCE_IMO        IMO
2006:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_SOURCE_EXTCLK     External Clock
2007:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_SOURCE_ECO        ECO
2008:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_SOURCE_DSI0       DSI_OUT[0]
2009:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_SOURCE_DSI1       DSI_OUT[1]
2010:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_SOURCE_DSI2       DSI_OUT[2]
2011:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_SOURCE_DSI3       DSI_OUT[3]
2012:Generated_Source\PSoC4/CyLib.c ****     *
2013:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
2014:Generated_Source\PSoC4/CyLib.c ****     void CySysClkPllSetSource(uint32 pll, uint32 source)
2015:Generated_Source\PSoC4/CyLib.c ****     {
2016:Generated_Source\PSoC4/CyLib.c ****         uint32 regTmp;
2017:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
2018:Generated_Source\PSoC4/CyLib.c **** 
2019:Generated_Source\PSoC4/CyLib.c ****         interruptState = CyEnterCriticalSection();
2020:Generated_Source\PSoC4/CyLib.c **** 
2021:Generated_Source\PSoC4/CyLib.c ****         if (pll < CY_IP_PLL_NR)
2022:Generated_Source\PSoC4/CyLib.c ****         {
2023:Generated_Source\PSoC4/CyLib.c ****             regTmp = CY_SYS_CLK_SELECT_REG & (uint32) ~CY_SYS_CLK_SELECT_PLL_MASK(pll);
2024:Generated_Source\PSoC4/CyLib.c ****             regTmp |= ((source << CY_SYS_CLK_SELECT_PLL_SHIFT(pll)) & CY_SYS_CLK_SELECT_PLL_MASK(pl
2025:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_SELECT_REG = regTmp;
2026:Generated_Source\PSoC4/CyLib.c ****         }
2027:Generated_Source\PSoC4/CyLib.c **** 
2028:Generated_Source\PSoC4/CyLib.c ****         CyExitCriticalSection(interruptState);
2029:Generated_Source\PSoC4/CyLib.c ****     }
2030:Generated_Source\PSoC4/CyLib.c **** 
2031:Generated_Source\PSoC4/CyLib.c **** 
2032:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
2033:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllSetOutputDivider
2034:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 51


2035:Generated_Source\PSoC4/CyLib.c ****     *
2036:Generated_Source\PSoC4/CyLib.c ****     *  Sets the output clock divider for the PLL.
2037:Generated_Source\PSoC4/CyLib.c ****     *
2038:Generated_Source\PSoC4/CyLib.c ****     *  The PLL must not be the System Clock source when calling this function. The
2039:Generated_Source\PSoC4/CyLib.c ****     *  PLL output will glitch during this function call.
2040:Generated_Source\PSoC4/CyLib.c ****     *
2041:Generated_Source\PSoC4/CyLib.c ****     *  This API is available only for PSoC 4200L devices.
2042:Generated_Source\PSoC4/CyLib.c ****     *
2043:Generated_Source\PSoC4/CyLib.c ****     *  \param PLL:
2044:Generated_Source\PSoC4/CyLib.c ****     *   0   PLL#0
2045:Generated_Source\PSoC4/CyLib.c ****     *   1   PLL#1
2046:Generated_Source\PSoC4/CyLib.c ****     *
2047:Generated_Source\PSoC4/CyLib.c ****     * \param divider:
2048:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_OUTPUT_DIVPASS    Pass through
2049:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_OUTPUT_DIV2       Divide by 2
2050:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_OUTPUT_DIV4       Divide by 4
2051:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_OUTPUT_DIV8       Divide by 8
2052:Generated_Source\PSoC4/CyLib.c ****     *
2053:Generated_Source\PSoC4/CyLib.c ****     * \return \ref CYRET_SUCCESS    Completed successfully.
2054:Generated_Source\PSoC4/CyLib.c ****     * \return \ref CYRET_BAD_PARAM  The parameters are out of range or the
2055:Generated_Source\PSoC4/CyLib.c ****     * specified PLL sources the System clock.
2056:Generated_Source\PSoC4/CyLib.c ****     *
2057:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
2058:Generated_Source\PSoC4/CyLib.c ****     cystatus CySysClkPllSetOutputDivider(uint32 pll, uint32 divider)
2059:Generated_Source\PSoC4/CyLib.c ****     {
2060:Generated_Source\PSoC4/CyLib.c ****         uint32   tmpReg;
2061:Generated_Source\PSoC4/CyLib.c ****         uint8    interruptState;
2062:Generated_Source\PSoC4/CyLib.c ****         cystatus returnStatus = CYRET_BAD_PARAM;
2063:Generated_Source\PSoC4/CyLib.c ****         cystatus tmp;
2064:Generated_Source\PSoC4/CyLib.c **** 
2065:Generated_Source\PSoC4/CyLib.c **** 
2066:Generated_Source\PSoC4/CyLib.c ****         interruptState = CyEnterCriticalSection();
2067:Generated_Source\PSoC4/CyLib.c **** 
2068:Generated_Source\PSoC4/CyLib.c ****         tmp = CySysClkPllConfigChangeAllowed(pll);
2069:Generated_Source\PSoC4/CyLib.c **** 
2070:Generated_Source\PSoC4/CyLib.c ****         if ((pll < CY_IP_PLL_NR) && (CYRET_SUCCESS == tmp) && (divider <= CY_SYS_PLL_OUTPUT_DIV8))
2071:Generated_Source\PSoC4/CyLib.c ****         {
2072:Generated_Source\PSoC4/CyLib.c ****             tmpReg  = CY_SYS_CLK_PLL_BASE.pll[pll].config & (uint32) ~(CY_SYS_CLK_PLL_CONFIG_OUTPUT
2073:Generated_Source\PSoC4/CyLib.c ****             tmpReg |= ((divider << CY_SYS_CLK_PLL_CONFIG_OUTPUT_DIV_SHIFT) & CY_SYS_CLK_PLL_CONFIG_
2074:Generated_Source\PSoC4/CyLib.c **** 
2075:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_PLL_BASE.pll[pll].config = tmpReg;
2076:Generated_Source\PSoC4/CyLib.c **** 
2077:Generated_Source\PSoC4/CyLib.c ****             returnStatus = CYRET_SUCCESS;
2078:Generated_Source\PSoC4/CyLib.c ****         }
2079:Generated_Source\PSoC4/CyLib.c **** 
2080:Generated_Source\PSoC4/CyLib.c ****         CyExitCriticalSection(interruptState);
2081:Generated_Source\PSoC4/CyLib.c **** 
2082:Generated_Source\PSoC4/CyLib.c ****         return (returnStatus);
2083:Generated_Source\PSoC4/CyLib.c ****     }
2084:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_SRSSV2 && CY_IP_PLL) */
2085:Generated_Source\PSoC4/CyLib.c **** 
2086:Generated_Source\PSoC4/CyLib.c **** 
2087:Generated_Source\PSoC4/CyLib.c **** #if(CY_IP_SRSSV2)
2088:Generated_Source\PSoC4/CyLib.c **** 
2089:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
2090:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysLvdEnable
2091:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 52


2092:Generated_Source\PSoC4/CyLib.c ****     *
2093:Generated_Source\PSoC4/CyLib.c ****     *  Enables the output of the low-voltage monitor when Vddd is at or below the
2094:Generated_Source\PSoC4/CyLib.c ****     *  trip point, configures the device to generate an interrupt, and sets the
2095:Generated_Source\PSoC4/CyLib.c ****     *  voltage trip level.
2096:Generated_Source\PSoC4/CyLib.c ****     *
2097:Generated_Source\PSoC4/CyLib.c ****     *  \param threshold: Threshold selection for Low Voltage Detect circuit.
2098:Generated_Source\PSoC4/CyLib.c ****     *  Threshold variation is +/- 2.5% from these typical voltage choices.
2099:Generated_Source\PSoC4/CyLib.c ****     *         Define                     Voltage threshold
2100:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_1_75_V       1.7500 V
2101:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_1_80_V       1.8000 V
2102:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_1_90_V       1.9000 V
2103:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_00_V       2.0000 V
2104:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_10_V       2.1000 V
2105:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_20_V       2.2000 V
2106:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_30_V       2.3000 V
2107:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_40_V       2.4000 V
2108:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_50_V       2.5000 V
2109:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_60_V       2.6000 V
2110:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_70_V       2.7000 V
2111:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_80_V       2.8000 V
2112:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_90_V       2.9000 V
2113:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_3_00_V       3.0000 V
2114:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_3_20_V       3.2000 V
2115:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_4_50_V       4.5000 V
2116:Generated_Source\PSoC4/CyLib.c ****     *
2117:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
2118:Generated_Source\PSoC4/CyLib.c ****     void CySysLvdEnable(uint32 threshold)
2119:Generated_Source\PSoC4/CyLib.c ****     {
 805              		.loc 1 2119 0
 806              		.cfi_startproc
 807              		@ args = 0, pretend = 0, frame = 8
 808              		@ frame_needed = 1, uses_anonymous_args = 0
 809 0000 80B5     		push	{r7, lr}
 810              		.cfi_def_cfa_offset 8
 811              		.cfi_offset 7, -8
 812              		.cfi_offset 14, -4
 813 0002 82B0     		sub	sp, sp, #8
 814              		.cfi_def_cfa_offset 16
 815 0004 00AF     		add	r7, sp, #0
 816              		.cfi_def_cfa_register 7
 817 0006 7860     		str	r0, [r7, #4]
2120:Generated_Source\PSoC4/CyLib.c ****         /* Prevent propagating a false interrupt */
2121:Generated_Source\PSoC4/CyLib.c ****         CY_LVD_PWR_INTR_MASK_REG   &= (uint32) ~CY_LVD_PROPAGATE_INT_TO_CPU;
 818              		.loc 1 2121 0
 819 0008 144B     		ldr	r3, .L48
 820 000a 144A     		ldr	r2, .L48
 821 000c 1268     		ldr	r2, [r2]
 822 000e 0221     		movs	r1, #2
 823 0010 8A43     		bics	r2, r1
 824 0012 1A60     		str	r2, [r3]
2122:Generated_Source\PSoC4/CyLib.c **** 
2123:Generated_Source\PSoC4/CyLib.c ****         /* Set specified threshold */
2124:Generated_Source\PSoC4/CyLib.c ****         CY_LVD_PWR_VMON_CONFIG_REG = (CY_LVD_PWR_VMON_CONFIG_REG & ~CY_LVD_PWR_VMON_CONFIG_LVD_SEL_
 825              		.loc 1 2124 0
 826 0014 124B     		ldr	r3, .L48+4
 827 0016 124A     		ldr	r2, .L48+4
 828 0018 1268     		ldr	r2, [r2]
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 53


 829 001a 1E21     		movs	r1, #30
 830 001c 8A43     		bics	r2, r1
 831 001e 1100     		movs	r1, r2
2125:Generated_Source\PSoC4/CyLib.c ****                 ((threshold << CY_LVD_PWR_VMON_CONFIG_LVD_SEL_SHIFT) & CY_LVD_PWR_VMON_CONFIG_LVD_S
 832              		.loc 1 2125 0
 833 0020 7A68     		ldr	r2, [r7, #4]
 834 0022 5200     		lsls	r2, r2, #1
 835 0024 1E20     		movs	r0, #30
 836 0026 0240     		ands	r2, r0
2124:Generated_Source\PSoC4/CyLib.c ****                 ((threshold << CY_LVD_PWR_VMON_CONFIG_LVD_SEL_SHIFT) & CY_LVD_PWR_VMON_CONFIG_LVD_S
 837              		.loc 1 2124 0
 838 0028 0A43     		orrs	r2, r1
 839 002a 1A60     		str	r2, [r3]
2126:Generated_Source\PSoC4/CyLib.c **** 
2127:Generated_Source\PSoC4/CyLib.c ****         /* Enable the LVD. This may cause a false LVD event. */
2128:Generated_Source\PSoC4/CyLib.c ****         CY_LVD_PWR_VMON_CONFIG_REG |= CY_LVD_PWR_VMON_CONFIG_LVD_EN;
 840              		.loc 1 2128 0
 841 002c 0C4B     		ldr	r3, .L48+4
 842 002e 0C4A     		ldr	r2, .L48+4
 843 0030 1268     		ldr	r2, [r2]
 844 0032 0121     		movs	r1, #1
 845 0034 0A43     		orrs	r2, r1
 846 0036 1A60     		str	r2, [r3]
2129:Generated_Source\PSoC4/CyLib.c **** 
2130:Generated_Source\PSoC4/CyLib.c ****         /* Wait for the circuit to stabilize */
2131:Generated_Source\PSoC4/CyLib.c ****         CyDelayUs(CY_LVD_STABILIZE_TIMEOUT_US);
 847              		.loc 1 2131 0
 848 0038 FA23     		movs	r3, #250
 849 003a 9B00     		lsls	r3, r3, #2
 850 003c 1800     		movs	r0, r3
 851 003e FFF7FEFF 		bl	CyDelayUs
2132:Generated_Source\PSoC4/CyLib.c **** 
2133:Generated_Source\PSoC4/CyLib.c ****         /* Clear the false event */
2134:Generated_Source\PSoC4/CyLib.c ****         CySysLvdClearInterrupt();
 852              		.loc 1 2134 0
 853 0042 FFF7FEFF 		bl	CySysLvdClearInterrupt
2135:Generated_Source\PSoC4/CyLib.c **** 
2136:Generated_Source\PSoC4/CyLib.c ****         /* Unmask the interrupt */
2137:Generated_Source\PSoC4/CyLib.c ****         CY_LVD_PWR_INTR_MASK_REG   |= CY_LVD_PROPAGATE_INT_TO_CPU;
 854              		.loc 1 2137 0
 855 0046 054B     		ldr	r3, .L48
 856 0048 044A     		ldr	r2, .L48
 857 004a 1268     		ldr	r2, [r2]
 858 004c 0221     		movs	r1, #2
 859 004e 0A43     		orrs	r2, r1
 860 0050 1A60     		str	r2, [r3]
2138:Generated_Source\PSoC4/CyLib.c ****     }
 861              		.loc 1 2138 0
 862 0052 C046     		nop
 863 0054 BD46     		mov	sp, r7
 864 0056 02B0     		add	sp, sp, #8
 865              		@ sp needed
 866 0058 80BD     		pop	{r7, pc}
 867              	.L49:
 868 005a C046     		.align	2
 869              	.L48:
 870 005c 08000B40 		.word	1074462728
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 54


 871 0060 18000B40 		.word	1074462744
 872              		.cfi_endproc
 873              	.LFE13:
 874              		.size	CySysLvdEnable, .-CySysLvdEnable
 875              		.section	.text.CySysLvdDisable,"ax",%progbits
 876              		.align	2
 877              		.global	CySysLvdDisable
 878              		.code	16
 879              		.thumb_func
 880              		.type	CySysLvdDisable, %function
 881              	CySysLvdDisable:
 882              	.LFB14:
2139:Generated_Source\PSoC4/CyLib.c **** 
2140:Generated_Source\PSoC4/CyLib.c **** 
2141:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
2142:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysLvdDisable
2143:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
2144:Generated_Source\PSoC4/CyLib.c ****     *
2145:Generated_Source\PSoC4/CyLib.c ****     *  Disables the low voltage detection. A low voltage interrupt is disabled.
2146:Generated_Source\PSoC4/CyLib.c ****     *
2147:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
2148:Generated_Source\PSoC4/CyLib.c ****     void CySysLvdDisable(void)
2149:Generated_Source\PSoC4/CyLib.c ****     {
 883              		.loc 1 2149 0
 884              		.cfi_startproc
 885              		@ args = 0, pretend = 0, frame = 0
 886              		@ frame_needed = 1, uses_anonymous_args = 0
 887 0000 80B5     		push	{r7, lr}
 888              		.cfi_def_cfa_offset 8
 889              		.cfi_offset 7, -8
 890              		.cfi_offset 14, -4
 891 0002 00AF     		add	r7, sp, #0
 892              		.cfi_def_cfa_register 7
2150:Generated_Source\PSoC4/CyLib.c ****         CY_LVD_PWR_INTR_MASK_REG   &= ~CY_LVD_PROPAGATE_INT_TO_CPU;
 893              		.loc 1 2150 0
 894 0004 074B     		ldr	r3, .L51
 895 0006 074A     		ldr	r2, .L51
 896 0008 1268     		ldr	r2, [r2]
 897 000a 0221     		movs	r1, #2
 898 000c 8A43     		bics	r2, r1
 899 000e 1A60     		str	r2, [r3]
2151:Generated_Source\PSoC4/CyLib.c ****         CY_LVD_PWR_VMON_CONFIG_REG &= ~CY_LVD_PWR_VMON_CONFIG_LVD_EN;
 900              		.loc 1 2151 0
 901 0010 054B     		ldr	r3, .L51+4
 902 0012 054A     		ldr	r2, .L51+4
 903 0014 1268     		ldr	r2, [r2]
 904 0016 0121     		movs	r1, #1
 905 0018 8A43     		bics	r2, r1
 906 001a 1A60     		str	r2, [r3]
2152:Generated_Source\PSoC4/CyLib.c ****     }
 907              		.loc 1 2152 0
 908 001c C046     		nop
 909 001e BD46     		mov	sp, r7
 910              		@ sp needed
 911 0020 80BD     		pop	{r7, pc}
 912              	.L52:
 913 0022 C046     		.align	2
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 55


 914              	.L51:
 915 0024 08000B40 		.word	1074462728
 916 0028 18000B40 		.word	1074462744
 917              		.cfi_endproc
 918              	.LFE14:
 919              		.size	CySysLvdDisable, .-CySysLvdDisable
 920              		.section	.text.CySysLvdGetInterruptSource,"ax",%progbits
 921              		.align	2
 922              		.global	CySysLvdGetInterruptSource
 923              		.code	16
 924              		.thumb_func
 925              		.type	CySysLvdGetInterruptSource, %function
 926              	CySysLvdGetInterruptSource:
 927              	.LFB15:
2153:Generated_Source\PSoC4/CyLib.c **** 
2154:Generated_Source\PSoC4/CyLib.c **** 
2155:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
2156:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysLvdGetInterruptSource
2157:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
2158:Generated_Source\PSoC4/CyLib.c ****     *
2159:Generated_Source\PSoC4/CyLib.c ****     *  Gets the low voltage detection interrupt status (without clearing).
2160:Generated_Source\PSoC4/CyLib.c ****     *
2161:Generated_Source\PSoC4/CyLib.c ****     * \return
2162:Generated_Source\PSoC4/CyLib.c ****     *  Interrupt request value:
2163:Generated_Source\PSoC4/CyLib.c ****     *    CY_SYS_LVD_INT - Indicates an Low Voltage Detect interrupt
2164:Generated_Source\PSoC4/CyLib.c ****     *
2165:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
2166:Generated_Source\PSoC4/CyLib.c ****     uint32 CySysLvdGetInterruptSource(void)
2167:Generated_Source\PSoC4/CyLib.c ****     {
 928              		.loc 1 2167 0
 929              		.cfi_startproc
 930              		@ args = 0, pretend = 0, frame = 0
 931              		@ frame_needed = 1, uses_anonymous_args = 0
 932 0000 80B5     		push	{r7, lr}
 933              		.cfi_def_cfa_offset 8
 934              		.cfi_offset 7, -8
 935              		.cfi_offset 14, -4
 936 0002 00AF     		add	r7, sp, #0
 937              		.cfi_def_cfa_register 7
2168:Generated_Source\PSoC4/CyLib.c ****         return (CY_LVD_PWR_INTR_REG & CY_SYS_LVD_INT);
 938              		.loc 1 2168 0
 939 0004 034B     		ldr	r3, .L55
 940 0006 1B68     		ldr	r3, [r3]
 941 0008 0222     		movs	r2, #2
 942 000a 1340     		ands	r3, r2
2169:Generated_Source\PSoC4/CyLib.c ****     }
 943              		.loc 1 2169 0
 944 000c 1800     		movs	r0, r3
 945 000e BD46     		mov	sp, r7
 946              		@ sp needed
 947 0010 80BD     		pop	{r7, pc}
 948              	.L56:
 949 0012 C046     		.align	2
 950              	.L55:
 951 0014 04000B40 		.word	1074462724
 952              		.cfi_endproc
 953              	.LFE15:
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 56


 954              		.size	CySysLvdGetInterruptSource, .-CySysLvdGetInterruptSource
 955              		.section	.text.CySysLvdClearInterrupt,"ax",%progbits
 956              		.align	2
 957              		.global	CySysLvdClearInterrupt
 958              		.code	16
 959              		.thumb_func
 960              		.type	CySysLvdClearInterrupt, %function
 961              	CySysLvdClearInterrupt:
 962              	.LFB16:
2170:Generated_Source\PSoC4/CyLib.c **** 
2171:Generated_Source\PSoC4/CyLib.c **** 
2172:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
2173:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysLvdClearInterrupt
2174:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
2175:Generated_Source\PSoC4/CyLib.c ****     *
2176:Generated_Source\PSoC4/CyLib.c ****     *  Clears the low voltage detection interrupt status.
2177:Generated_Source\PSoC4/CyLib.c ****     *
2178:Generated_Source\PSoC4/CyLib.c ****     * \return
2179:Generated_Source\PSoC4/CyLib.c ****     *  None
2180:Generated_Source\PSoC4/CyLib.c ****     *
2181:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
2182:Generated_Source\PSoC4/CyLib.c ****     void CySysLvdClearInterrupt(void)
2183:Generated_Source\PSoC4/CyLib.c ****     {
 963              		.loc 1 2183 0
 964              		.cfi_startproc
 965              		@ args = 0, pretend = 0, frame = 0
 966              		@ frame_needed = 1, uses_anonymous_args = 0
 967 0000 80B5     		push	{r7, lr}
 968              		.cfi_def_cfa_offset 8
 969              		.cfi_offset 7, -8
 970              		.cfi_offset 14, -4
 971 0002 00AF     		add	r7, sp, #0
 972              		.cfi_def_cfa_register 7
2184:Generated_Source\PSoC4/CyLib.c ****         CY_LVD_PWR_INTR_REG = CY_SYS_LVD_INT;
 973              		.loc 1 2184 0
 974 0004 024B     		ldr	r3, .L58
 975 0006 0222     		movs	r2, #2
 976 0008 1A60     		str	r2, [r3]
2185:Generated_Source\PSoC4/CyLib.c ****     }
 977              		.loc 1 2185 0
 978 000a C046     		nop
 979 000c BD46     		mov	sp, r7
 980              		@ sp needed
 981 000e 80BD     		pop	{r7, pc}
 982              	.L59:
 983              		.align	2
 984              	.L58:
 985 0010 04000B40 		.word	1074462724
 986              		.cfi_endproc
 987              	.LFE16:
 988              		.size	CySysLvdClearInterrupt, .-CySysLvdClearInterrupt
 989              		.section	.text.CySysGetResetReason,"ax",%progbits
 990              		.align	2
 991              		.global	CySysGetResetReason
 992              		.code	16
 993              		.thumb_func
 994              		.type	CySysGetResetReason, %function
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 57


 995              	CySysGetResetReason:
 996              	.LFB17:
2186:Generated_Source\PSoC4/CyLib.c **** 
2187:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_SRSSV2) */
2188:Generated_Source\PSoC4/CyLib.c **** 
2189:Generated_Source\PSoC4/CyLib.c **** 
2190:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2191:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysGetResetReason
2192:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2193:Generated_Source\PSoC4/CyLib.c **** *
2194:Generated_Source\PSoC4/CyLib.c **** *  Reports the cause for the latest reset(s) that occurred in the system. All
2195:Generated_Source\PSoC4/CyLib.c **** *  the bits in the RES_CAUSE register assert when the corresponding reset cause
2196:Generated_Source\PSoC4/CyLib.c **** *  occurs and must be cleared by the firmware. These bits are cleared by the
2197:Generated_Source\PSoC4/CyLib.c **** *  hardware only during XRES, POR, or a detected brown-out.
2198:Generated_Source\PSoC4/CyLib.c **** *
2199:Generated_Source\PSoC4/CyLib.c **** *  \param reason: bits in the RES_CAUSE register to clear.
2200:Generated_Source\PSoC4/CyLib.c **** *   CY_SYS_RESET_WDT       - WDT caused a reset
2201:Generated_Source\PSoC4/CyLib.c **** *   CY_SYS_RESET_PROTFAULT - Occured protection violation that requires reset
2202:Generated_Source\PSoC4/CyLib.c **** *   CY_SYS_RESET_SW        - Cortex-M0 requested a system reset.
2203:Generated_Source\PSoC4/CyLib.c **** *
2204:Generated_Source\PSoC4/CyLib.c **** * \return
2205:Generated_Source\PSoC4/CyLib.c **** *  Status. Same enumerated bit values as used for the reason parameter.
2206:Generated_Source\PSoC4/CyLib.c **** *
2207:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2208:Generated_Source\PSoC4/CyLib.c **** uint32 CySysGetResetReason(uint32 reason)
2209:Generated_Source\PSoC4/CyLib.c **** {
 997              		.loc 1 2209 0
 998              		.cfi_startproc
 999              		@ args = 0, pretend = 0, frame = 16
 1000              		@ frame_needed = 1, uses_anonymous_args = 0
 1001 0000 80B5     		push	{r7, lr}
 1002              		.cfi_def_cfa_offset 8
 1003              		.cfi_offset 7, -8
 1004              		.cfi_offset 14, -4
 1005 0002 84B0     		sub	sp, sp, #16
 1006              		.cfi_def_cfa_offset 24
 1007 0004 00AF     		add	r7, sp, #0
 1008              		.cfi_def_cfa_register 7
 1009 0006 7860     		str	r0, [r7, #4]
2210:Generated_Source\PSoC4/CyLib.c ****     uint32 returnStatus;
2211:Generated_Source\PSoC4/CyLib.c **** 
2212:Generated_Source\PSoC4/CyLib.c ****     reason &= (CY_SYS_RESET_WDT | CY_SYS_RESET_PROTFAULT | CY_SYS_RESET_SW);
 1010              		.loc 1 2212 0
 1011 0008 7B68     		ldr	r3, [r7, #4]
 1012 000a 1922     		movs	r2, #25
 1013 000c 1340     		ands	r3, r2
 1014 000e 7B60     		str	r3, [r7, #4]
2213:Generated_Source\PSoC4/CyLib.c ****     returnStatus = CY_SYS_RES_CAUSE_REG &
 1015              		.loc 1 2213 0
 1016 0010 064B     		ldr	r3, .L62
 1017 0012 1B68     		ldr	r3, [r3]
 1018 0014 1922     		movs	r2, #25
 1019 0016 1340     		ands	r3, r2
 1020 0018 FB60     		str	r3, [r7, #12]
2214:Generated_Source\PSoC4/CyLib.c ****                   (CY_SYS_RESET_WDT | CY_SYS_RESET_PROTFAULT | CY_SYS_RESET_SW);
2215:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_RES_CAUSE_REG = reason;
 1021              		.loc 1 2215 0
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 58


 1022 001a 044B     		ldr	r3, .L62
 1023 001c 7A68     		ldr	r2, [r7, #4]
 1024 001e 1A60     		str	r2, [r3]
2216:Generated_Source\PSoC4/CyLib.c **** 
2217:Generated_Source\PSoC4/CyLib.c ****     return (returnStatus);
 1025              		.loc 1 2217 0
 1026 0020 FB68     		ldr	r3, [r7, #12]
2218:Generated_Source\PSoC4/CyLib.c **** }
 1027              		.loc 1 2218 0
 1028 0022 1800     		movs	r0, r3
 1029 0024 BD46     		mov	sp, r7
 1030 0026 04B0     		add	sp, sp, #16
 1031              		@ sp needed
 1032 0028 80BD     		pop	{r7, pc}
 1033              	.L63:
 1034 002a C046     		.align	2
 1035              	.L62:
 1036 002c 00030B40 		.word	1074463488
 1037              		.cfi_endproc
 1038              	.LFE17:
 1039              		.size	CySysGetResetReason, .-CySysGetResetReason
 1040              		.section	.text.CyDisableInts,"ax",%progbits
 1041              		.align	2
 1042              		.global	CyDisableInts
 1043              		.code	16
 1044              		.thumb_func
 1045              		.type	CyDisableInts, %function
 1046              	CyDisableInts:
 1047              	.LFB18:
2219:Generated_Source\PSoC4/CyLib.c **** 
2220:Generated_Source\PSoC4/CyLib.c **** 
2221:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2222:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyDisableInts
2223:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2224:Generated_Source\PSoC4/CyLib.c **** *
2225:Generated_Source\PSoC4/CyLib.c **** *  Disables all interrupts.
2226:Generated_Source\PSoC4/CyLib.c **** *
2227:Generated_Source\PSoC4/CyLib.c **** * \return
2228:Generated_Source\PSoC4/CyLib.c **** *  32 bit mask of previously enabled interrupts.
2229:Generated_Source\PSoC4/CyLib.c **** *
2230:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2231:Generated_Source\PSoC4/CyLib.c **** uint32 CyDisableInts(void)
2232:Generated_Source\PSoC4/CyLib.c **** {
 1048              		.loc 1 2232 0
 1049              		.cfi_startproc
 1050              		@ args = 0, pretend = 0, frame = 8
 1051              		@ frame_needed = 1, uses_anonymous_args = 0
 1052 0000 80B5     		push	{r7, lr}
 1053              		.cfi_def_cfa_offset 8
 1054              		.cfi_offset 7, -8
 1055              		.cfi_offset 14, -4
 1056 0002 82B0     		sub	sp, sp, #8
 1057              		.cfi_def_cfa_offset 16
 1058 0004 00AF     		add	r7, sp, #0
 1059              		.cfi_def_cfa_register 7
2233:Generated_Source\PSoC4/CyLib.c ****     uint32 intState;
2234:Generated_Source\PSoC4/CyLib.c **** 
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 59


2235:Generated_Source\PSoC4/CyLib.c ****     /* Get current interrupt state. */
2236:Generated_Source\PSoC4/CyLib.c ****     intState = CY_INT_CLEAR_REG;
 1060              		.loc 1 2236 0
 1061 0006 064B     		ldr	r3, .L66
 1062 0008 1B68     		ldr	r3, [r3]
 1063 000a 7B60     		str	r3, [r7, #4]
2237:Generated_Source\PSoC4/CyLib.c **** 
2238:Generated_Source\PSoC4/CyLib.c ****     /* Disable all interrupts. */
2239:Generated_Source\PSoC4/CyLib.c ****     CY_INT_CLEAR_REG = CY_INT_CLEAR_DISABLE_ALL;
 1064              		.loc 1 2239 0
 1065 000c 044B     		ldr	r3, .L66
 1066 000e 0122     		movs	r2, #1
 1067 0010 5242     		rsbs	r2, r2, #0
 1068 0012 1A60     		str	r2, [r3]
2240:Generated_Source\PSoC4/CyLib.c **** 
2241:Generated_Source\PSoC4/CyLib.c ****     return (intState);
 1069              		.loc 1 2241 0
 1070 0014 7B68     		ldr	r3, [r7, #4]
2242:Generated_Source\PSoC4/CyLib.c **** }
 1071              		.loc 1 2242 0
 1072 0016 1800     		movs	r0, r3
 1073 0018 BD46     		mov	sp, r7
 1074 001a 02B0     		add	sp, sp, #8
 1075              		@ sp needed
 1076 001c 80BD     		pop	{r7, pc}
 1077              	.L67:
 1078 001e C046     		.align	2
 1079              	.L66:
 1080 0020 80E100E0 		.word	-536813184
 1081              		.cfi_endproc
 1082              	.LFE18:
 1083              		.size	CyDisableInts, .-CyDisableInts
 1084              		.section	.text.CyEnableInts,"ax",%progbits
 1085              		.align	2
 1086              		.global	CyEnableInts
 1087              		.code	16
 1088              		.thumb_func
 1089              		.type	CyEnableInts, %function
 1090              	CyEnableInts:
 1091              	.LFB19:
2243:Generated_Source\PSoC4/CyLib.c **** 
2244:Generated_Source\PSoC4/CyLib.c **** 
2245:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2246:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyEnableInts
2247:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2248:Generated_Source\PSoC4/CyLib.c **** *
2249:Generated_Source\PSoC4/CyLib.c **** *  Enables interrupts to a given state.
2250:Generated_Source\PSoC4/CyLib.c **** *
2251:Generated_Source\PSoC4/CyLib.c **** *  \param mask The 32 bit mask of interrupts to enable.
2252:Generated_Source\PSoC4/CyLib.c **** *
2253:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2254:Generated_Source\PSoC4/CyLib.c **** void CyEnableInts(uint32 mask)
2255:Generated_Source\PSoC4/CyLib.c **** {
 1092              		.loc 1 2255 0
 1093              		.cfi_startproc
 1094              		@ args = 0, pretend = 0, frame = 8
 1095              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 60


 1096 0000 80B5     		push	{r7, lr}
 1097              		.cfi_def_cfa_offset 8
 1098              		.cfi_offset 7, -8
 1099              		.cfi_offset 14, -4
 1100 0002 82B0     		sub	sp, sp, #8
 1101              		.cfi_def_cfa_offset 16
 1102 0004 00AF     		add	r7, sp, #0
 1103              		.cfi_def_cfa_register 7
 1104 0006 7860     		str	r0, [r7, #4]
2256:Generated_Source\PSoC4/CyLib.c ****     CY_INT_ENABLE_REG = mask;
 1105              		.loc 1 2256 0
 1106 0008 034B     		ldr	r3, .L69
 1107 000a 7A68     		ldr	r2, [r7, #4]
 1108 000c 1A60     		str	r2, [r3]
2257:Generated_Source\PSoC4/CyLib.c **** }
 1109              		.loc 1 2257 0
 1110 000e C046     		nop
 1111 0010 BD46     		mov	sp, r7
 1112 0012 02B0     		add	sp, sp, #8
 1113              		@ sp needed
 1114 0014 80BD     		pop	{r7, pc}
 1115              	.L70:
 1116 0016 C046     		.align	2
 1117              	.L69:
 1118 0018 00E100E0 		.word	-536813312
 1119              		.cfi_endproc
 1120              	.LFE19:
 1121              		.size	CyEnableInts, .-CyEnableInts
 1122              		.section	.text.CyIntSetSysVector,"ax",%progbits
 1123              		.align	2
 1124              		.global	CyIntSetSysVector
 1125              		.code	16
 1126              		.thumb_func
 1127              		.type	CyIntSetSysVector, %function
 1128              	CyIntSetSysVector:
 1129              	.LFB20:
2258:Generated_Source\PSoC4/CyLib.c **** 
2259:Generated_Source\PSoC4/CyLib.c **** 
2260:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2261:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntSetSysVector
2262:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2263:Generated_Source\PSoC4/CyLib.c **** *
2264:Generated_Source\PSoC4/CyLib.c **** *  Sets the interrupt vector of the specified system interrupt number. These
2265:Generated_Source\PSoC4/CyLib.c **** *  interrupts are for SysTick, PendSV and others.
2266:Generated_Source\PSoC4/CyLib.c **** *
2267:Generated_Source\PSoC4/CyLib.c **** *  \param number: System interrupt number:
2268:Generated_Source\PSoC4/CyLib.c **** *    CY_INT_NMI_IRQN        - Non Maskable Interrupt
2269:Generated_Source\PSoC4/CyLib.c **** *    CY_INT_HARD_FAULT_IRQN - Hard Fault Interrupt
2270:Generated_Source\PSoC4/CyLib.c **** *    CY_INT_SVCALL_IRQN     - SV Call Interrupt
2271:Generated_Source\PSoC4/CyLib.c **** *    CY_INT_PEND_SV_IRQN    - Pend SV Interrupt
2272:Generated_Source\PSoC4/CyLib.c **** *    CY_INT_SYSTICK_IRQN    - System Tick Interrupt
2273:Generated_Source\PSoC4/CyLib.c **** *
2274:Generated_Source\PSoC4/CyLib.c **** *  \param address Pointer to an interrupt service routine.
2275:Generated_Source\PSoC4/CyLib.c **** *
2276:Generated_Source\PSoC4/CyLib.c **** * \return The old ISR vector at this location.
2277:Generated_Source\PSoC4/CyLib.c **** *
2278:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 61


2279:Generated_Source\PSoC4/CyLib.c **** cyisraddress CyIntSetSysVector(uint8 number, cyisraddress address)
2280:Generated_Source\PSoC4/CyLib.c **** {
 1130              		.loc 1 2280 0
 1131              		.cfi_startproc
 1132              		@ args = 0, pretend = 0, frame = 16
 1133              		@ frame_needed = 1, uses_anonymous_args = 0
 1134 0000 80B5     		push	{r7, lr}
 1135              		.cfi_def_cfa_offset 8
 1136              		.cfi_offset 7, -8
 1137              		.cfi_offset 14, -4
 1138 0002 84B0     		sub	sp, sp, #16
 1139              		.cfi_def_cfa_offset 24
 1140 0004 00AF     		add	r7, sp, #0
 1141              		.cfi_def_cfa_register 7
 1142 0006 0200     		movs	r2, r0
 1143 0008 3960     		str	r1, [r7]
 1144 000a FB1D     		adds	r3, r7, #7
 1145 000c 1A70     		strb	r2, [r3]
2281:Generated_Source\PSoC4/CyLib.c ****     cyisraddress oldIsr;
2282:Generated_Source\PSoC4/CyLib.c ****     cyisraddress *ramVectorTable = (cyisraddress *) CY_INT_VECT_TABLE;
 1146              		.loc 1 2282 0
 1147 000e 8023     		movs	r3, #128
 1148 0010 9B05     		lsls	r3, r3, #22
 1149 0012 FB60     		str	r3, [r7, #12]
2283:Generated_Source\PSoC4/CyLib.c **** 
2284:Generated_Source\PSoC4/CyLib.c ****     CYASSERT(number < CY_INT_IRQ_BASE);
 1150              		.loc 1 2284 0
 1151 0014 FB1D     		adds	r3, r7, #7
 1152 0016 1B78     		ldrb	r3, [r3]
 1153 0018 0F2B     		cmp	r3, #15
 1154 001a 02D9     		bls	.L72
 1155              		.loc 1 2284 0 is_stmt 0 discriminator 1
 1156 001c 0020     		movs	r0, #0
 1157 001e FFF7FEFF 		bl	CyHalt
 1158              	.L72:
2285:Generated_Source\PSoC4/CyLib.c **** 
2286:Generated_Source\PSoC4/CyLib.c ****     /* Save old Interrupt service routine. */
2287:Generated_Source\PSoC4/CyLib.c ****     oldIsr = ramVectorTable[number];
 1159              		.loc 1 2287 0 is_stmt 1
 1160 0022 FB1D     		adds	r3, r7, #7
 1161 0024 1B78     		ldrb	r3, [r3]
 1162 0026 9B00     		lsls	r3, r3, #2
 1163 0028 FA68     		ldr	r2, [r7, #12]
 1164 002a D318     		adds	r3, r2, r3
 1165 002c 1B68     		ldr	r3, [r3]
 1166 002e BB60     		str	r3, [r7, #8]
2288:Generated_Source\PSoC4/CyLib.c **** 
2289:Generated_Source\PSoC4/CyLib.c ****     /* Set new Interrupt service routine. */
2290:Generated_Source\PSoC4/CyLib.c ****     ramVectorTable[number] = address;
 1167              		.loc 1 2290 0
 1168 0030 FB1D     		adds	r3, r7, #7
 1169 0032 1B78     		ldrb	r3, [r3]
 1170 0034 9B00     		lsls	r3, r3, #2
 1171 0036 FA68     		ldr	r2, [r7, #12]
 1172 0038 D318     		adds	r3, r2, r3
 1173 003a 3A68     		ldr	r2, [r7]
 1174 003c 1A60     		str	r2, [r3]
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 62


2291:Generated_Source\PSoC4/CyLib.c **** 
2292:Generated_Source\PSoC4/CyLib.c ****     return(oldIsr);
 1175              		.loc 1 2292 0
 1176 003e BB68     		ldr	r3, [r7, #8]
2293:Generated_Source\PSoC4/CyLib.c **** }
 1177              		.loc 1 2293 0
 1178 0040 1800     		movs	r0, r3
 1179 0042 BD46     		mov	sp, r7
 1180 0044 04B0     		add	sp, sp, #16
 1181              		@ sp needed
 1182 0046 80BD     		pop	{r7, pc}
 1183              		.cfi_endproc
 1184              	.LFE20:
 1185              		.size	CyIntSetSysVector, .-CyIntSetSysVector
 1186              		.section	.text.CyIntGetSysVector,"ax",%progbits
 1187              		.align	2
 1188              		.global	CyIntGetSysVector
 1189              		.code	16
 1190              		.thumb_func
 1191              		.type	CyIntGetSysVector, %function
 1192              	CyIntGetSysVector:
 1193              	.LFB21:
2294:Generated_Source\PSoC4/CyLib.c **** 
2295:Generated_Source\PSoC4/CyLib.c **** 
2296:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2297:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntGetSysVector
2298:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2299:Generated_Source\PSoC4/CyLib.c **** *
2300:Generated_Source\PSoC4/CyLib.c **** *   Gets the interrupt vector of the specified system interrupt number. These
2301:Generated_Source\PSoC4/CyLib.c **** *   interrupts are for SysTick, PendSV and others.
2302:Generated_Source\PSoC4/CyLib.c **** *
2303:Generated_Source\PSoC4/CyLib.c **** *  \param number: System interrupt number:
2304:Generated_Source\PSoC4/CyLib.c **** *    CY_INT_NMI_IRQN        - Non Maskable Interrupt
2305:Generated_Source\PSoC4/CyLib.c **** *    CY_INT_HARD_FAULT_IRQN - Hard Fault Interrupt
2306:Generated_Source\PSoC4/CyLib.c **** *    CY_INT_SVCALL_IRQN     - SV Call Interrupt
2307:Generated_Source\PSoC4/CyLib.c **** *    CY_INT_PEND_SV_IRQN    - Pend SV Interrupt
2308:Generated_Source\PSoC4/CyLib.c **** *    CY_INT_SYSTICK_IRQN    - System Tick Interrupt
2309:Generated_Source\PSoC4/CyLib.c **** *
2310:Generated_Source\PSoC4/CyLib.c **** * \return Address of the ISR in the interrupt vector table.
2311:Generated_Source\PSoC4/CyLib.c **** *
2312:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2313:Generated_Source\PSoC4/CyLib.c **** cyisraddress CyIntGetSysVector(uint8 number)
2314:Generated_Source\PSoC4/CyLib.c **** {
 1194              		.loc 1 2314 0
 1195              		.cfi_startproc
 1196              		@ args = 0, pretend = 0, frame = 16
 1197              		@ frame_needed = 1, uses_anonymous_args = 0
 1198 0000 80B5     		push	{r7, lr}
 1199              		.cfi_def_cfa_offset 8
 1200              		.cfi_offset 7, -8
 1201              		.cfi_offset 14, -4
 1202 0002 84B0     		sub	sp, sp, #16
 1203              		.cfi_def_cfa_offset 24
 1204 0004 00AF     		add	r7, sp, #0
 1205              		.cfi_def_cfa_register 7
 1206 0006 0200     		movs	r2, r0
 1207 0008 FB1D     		adds	r3, r7, #7
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 63


 1208 000a 1A70     		strb	r2, [r3]
2315:Generated_Source\PSoC4/CyLib.c ****     cyisraddress *ramVectorTable = (cyisraddress *) CY_INT_VECT_TABLE;
 1209              		.loc 1 2315 0
 1210 000c 8023     		movs	r3, #128
 1211 000e 9B05     		lsls	r3, r3, #22
 1212 0010 FB60     		str	r3, [r7, #12]
2316:Generated_Source\PSoC4/CyLib.c **** 
2317:Generated_Source\PSoC4/CyLib.c ****     CYASSERT(number < CY_INT_IRQ_BASE);
 1213              		.loc 1 2317 0
 1214 0012 FB1D     		adds	r3, r7, #7
 1215 0014 1B78     		ldrb	r3, [r3]
 1216 0016 0F2B     		cmp	r3, #15
 1217 0018 02D9     		bls	.L75
 1218              		.loc 1 2317 0 is_stmt 0 discriminator 1
 1219 001a 0020     		movs	r0, #0
 1220 001c FFF7FEFF 		bl	CyHalt
 1221              	.L75:
2318:Generated_Source\PSoC4/CyLib.c **** 
2319:Generated_Source\PSoC4/CyLib.c ****     return(ramVectorTable[number]);
 1222              		.loc 1 2319 0 is_stmt 1
 1223 0020 FB1D     		adds	r3, r7, #7
 1224 0022 1B78     		ldrb	r3, [r3]
 1225 0024 9B00     		lsls	r3, r3, #2
 1226 0026 FA68     		ldr	r2, [r7, #12]
 1227 0028 D318     		adds	r3, r2, r3
 1228 002a 1B68     		ldr	r3, [r3]
2320:Generated_Source\PSoC4/CyLib.c **** }
 1229              		.loc 1 2320 0
 1230 002c 1800     		movs	r0, r3
 1231 002e BD46     		mov	sp, r7
 1232 0030 04B0     		add	sp, sp, #16
 1233              		@ sp needed
 1234 0032 80BD     		pop	{r7, pc}
 1235              		.cfi_endproc
 1236              	.LFE21:
 1237              		.size	CyIntGetSysVector, .-CyIntGetSysVector
 1238              		.section	.text.CyIntSetVector,"ax",%progbits
 1239              		.align	2
 1240              		.global	CyIntSetVector
 1241              		.code	16
 1242              		.thumb_func
 1243              		.type	CyIntSetVector, %function
 1244              	CyIntSetVector:
 1245              	.LFB22:
2321:Generated_Source\PSoC4/CyLib.c **** 
2322:Generated_Source\PSoC4/CyLib.c **** 
2323:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2324:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntSetVector
2325:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2326:Generated_Source\PSoC4/CyLib.c **** *
2327:Generated_Source\PSoC4/CyLib.c **** *  Sets the interrupt vector of the specified interrupt number.
2328:Generated_Source\PSoC4/CyLib.c **** *
2329:Generated_Source\PSoC4/CyLib.c **** *  \param number Valid range [0-31].  Interrupt number
2330:Generated_Source\PSoC4/CyLib.c **** *  \param address Pointer to an interrupt service routine
2331:Generated_Source\PSoC4/CyLib.c **** *
2332:Generated_Source\PSoC4/CyLib.c **** * \return Previous interrupt vector value.
2333:Generated_Source\PSoC4/CyLib.c **** *
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 64


2334:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2335:Generated_Source\PSoC4/CyLib.c **** cyisraddress CyIntSetVector(uint8 number, cyisraddress address)
2336:Generated_Source\PSoC4/CyLib.c **** {
 1246              		.loc 1 2336 0
 1247              		.cfi_startproc
 1248              		@ args = 0, pretend = 0, frame = 16
 1249              		@ frame_needed = 1, uses_anonymous_args = 0
 1250 0000 80B5     		push	{r7, lr}
 1251              		.cfi_def_cfa_offset 8
 1252              		.cfi_offset 7, -8
 1253              		.cfi_offset 14, -4
 1254 0002 84B0     		sub	sp, sp, #16
 1255              		.cfi_def_cfa_offset 24
 1256 0004 00AF     		add	r7, sp, #0
 1257              		.cfi_def_cfa_register 7
 1258 0006 0200     		movs	r2, r0
 1259 0008 3960     		str	r1, [r7]
 1260 000a FB1D     		adds	r3, r7, #7
 1261 000c 1A70     		strb	r2, [r3]
2337:Generated_Source\PSoC4/CyLib.c ****     cyisraddress oldIsr;
2338:Generated_Source\PSoC4/CyLib.c ****     cyisraddress *ramVectorTable = (cyisraddress *) CY_INT_VECT_TABLE;
 1262              		.loc 1 2338 0
 1263 000e 8023     		movs	r3, #128
 1264 0010 9B05     		lsls	r3, r3, #22
 1265 0012 FB60     		str	r3, [r7, #12]
2339:Generated_Source\PSoC4/CyLib.c **** 
2340:Generated_Source\PSoC4/CyLib.c ****     CYASSERT(number < CY_NUM_INTERRUPTS);
 1266              		.loc 1 2340 0
 1267 0014 FB1D     		adds	r3, r7, #7
 1268 0016 1B78     		ldrb	r3, [r3]
 1269 0018 1F2B     		cmp	r3, #31
 1270 001a 02D9     		bls	.L78
 1271              		.loc 1 2340 0 is_stmt 0 discriminator 1
 1272 001c 0020     		movs	r0, #0
 1273 001e FFF7FEFF 		bl	CyHalt
 1274              	.L78:
2341:Generated_Source\PSoC4/CyLib.c **** 
2342:Generated_Source\PSoC4/CyLib.c ****     /* Save old Interrupt service routine. */
2343:Generated_Source\PSoC4/CyLib.c ****     oldIsr = ramVectorTable[CY_INT_IRQ_BASE + number];
 1275              		.loc 1 2343 0 is_stmt 1
 1276 0022 FB1D     		adds	r3, r7, #7
 1277 0024 1B78     		ldrb	r3, [r3]
 1278 0026 1033     		adds	r3, r3, #16
 1279 0028 9B00     		lsls	r3, r3, #2
 1280 002a FA68     		ldr	r2, [r7, #12]
 1281 002c D318     		adds	r3, r2, r3
 1282 002e 1B68     		ldr	r3, [r3]
 1283 0030 BB60     		str	r3, [r7, #8]
2344:Generated_Source\PSoC4/CyLib.c **** 
2345:Generated_Source\PSoC4/CyLib.c ****     /* Set new Interrupt service routine. */
2346:Generated_Source\PSoC4/CyLib.c ****     ramVectorTable[CY_INT_IRQ_BASE + number] = address;
 1284              		.loc 1 2346 0
 1285 0032 FB1D     		adds	r3, r7, #7
 1286 0034 1B78     		ldrb	r3, [r3]
 1287 0036 1033     		adds	r3, r3, #16
 1288 0038 9B00     		lsls	r3, r3, #2
 1289 003a FA68     		ldr	r2, [r7, #12]
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 65


 1290 003c D318     		adds	r3, r2, r3
 1291 003e 3A68     		ldr	r2, [r7]
 1292 0040 1A60     		str	r2, [r3]
2347:Generated_Source\PSoC4/CyLib.c **** 
2348:Generated_Source\PSoC4/CyLib.c ****     return(oldIsr);
 1293              		.loc 1 2348 0
 1294 0042 BB68     		ldr	r3, [r7, #8]
2349:Generated_Source\PSoC4/CyLib.c **** }
 1295              		.loc 1 2349 0
 1296 0044 1800     		movs	r0, r3
 1297 0046 BD46     		mov	sp, r7
 1298 0048 04B0     		add	sp, sp, #16
 1299              		@ sp needed
 1300 004a 80BD     		pop	{r7, pc}
 1301              		.cfi_endproc
 1302              	.LFE22:
 1303              		.size	CyIntSetVector, .-CyIntSetVector
 1304              		.section	.text.CyIntGetVector,"ax",%progbits
 1305              		.align	2
 1306              		.global	CyIntGetVector
 1307              		.code	16
 1308              		.thumb_func
 1309              		.type	CyIntGetVector, %function
 1310              	CyIntGetVector:
 1311              	.LFB23:
2350:Generated_Source\PSoC4/CyLib.c **** 
2351:Generated_Source\PSoC4/CyLib.c **** 
2352:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2353:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntGetVector
2354:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2355:Generated_Source\PSoC4/CyLib.c **** *
2356:Generated_Source\PSoC4/CyLib.c **** *  Gets the interrupt vector of the specified interrupt number.
2357:Generated_Source\PSoC4/CyLib.c **** *
2358:Generated_Source\PSoC4/CyLib.c **** *  \param number: Valid range [0-31].  Interrupt number
2359:Generated_Source\PSoC4/CyLib.c **** *
2360:Generated_Source\PSoC4/CyLib.c **** * \return Address of the ISR in the interrupt vector table.
2361:Generated_Source\PSoC4/CyLib.c **** *
2362:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2363:Generated_Source\PSoC4/CyLib.c **** cyisraddress CyIntGetVector(uint8 number)
2364:Generated_Source\PSoC4/CyLib.c **** {
 1312              		.loc 1 2364 0
 1313              		.cfi_startproc
 1314              		@ args = 0, pretend = 0, frame = 16
 1315              		@ frame_needed = 1, uses_anonymous_args = 0
 1316 0000 80B5     		push	{r7, lr}
 1317              		.cfi_def_cfa_offset 8
 1318              		.cfi_offset 7, -8
 1319              		.cfi_offset 14, -4
 1320 0002 84B0     		sub	sp, sp, #16
 1321              		.cfi_def_cfa_offset 24
 1322 0004 00AF     		add	r7, sp, #0
 1323              		.cfi_def_cfa_register 7
 1324 0006 0200     		movs	r2, r0
 1325 0008 FB1D     		adds	r3, r7, #7
 1326 000a 1A70     		strb	r2, [r3]
2365:Generated_Source\PSoC4/CyLib.c ****     cyisraddress *ramVectorTable = (cyisraddress *) CY_INT_VECT_TABLE;
 1327              		.loc 1 2365 0
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 66


 1328 000c 8023     		movs	r3, #128
 1329 000e 9B05     		lsls	r3, r3, #22
 1330 0010 FB60     		str	r3, [r7, #12]
2366:Generated_Source\PSoC4/CyLib.c **** 
2367:Generated_Source\PSoC4/CyLib.c ****     CYASSERT(number < CY_NUM_INTERRUPTS);
 1331              		.loc 1 2367 0
 1332 0012 FB1D     		adds	r3, r7, #7
 1333 0014 1B78     		ldrb	r3, [r3]
 1334 0016 1F2B     		cmp	r3, #31
 1335 0018 02D9     		bls	.L81
 1336              		.loc 1 2367 0 is_stmt 0 discriminator 1
 1337 001a 0020     		movs	r0, #0
 1338 001c FFF7FEFF 		bl	CyHalt
 1339              	.L81:
2368:Generated_Source\PSoC4/CyLib.c **** 
2369:Generated_Source\PSoC4/CyLib.c ****     return (ramVectorTable[CY_INT_IRQ_BASE + number]);
 1340              		.loc 1 2369 0 is_stmt 1
 1341 0020 FB1D     		adds	r3, r7, #7
 1342 0022 1B78     		ldrb	r3, [r3]
 1343 0024 1033     		adds	r3, r3, #16
 1344 0026 9B00     		lsls	r3, r3, #2
 1345 0028 FA68     		ldr	r2, [r7, #12]
 1346 002a D318     		adds	r3, r2, r3
 1347 002c 1B68     		ldr	r3, [r3]
2370:Generated_Source\PSoC4/CyLib.c **** }
 1348              		.loc 1 2370 0
 1349 002e 1800     		movs	r0, r3
 1350 0030 BD46     		mov	sp, r7
 1351 0032 04B0     		add	sp, sp, #16
 1352              		@ sp needed
 1353 0034 80BD     		pop	{r7, pc}
 1354              		.cfi_endproc
 1355              	.LFE23:
 1356              		.size	CyIntGetVector, .-CyIntGetVector
 1357 0036 C046     		.section	.text.CyIntSetPriority,"ax",%progbits
 1358              		.align	2
 1359              		.global	CyIntSetPriority
 1360              		.code	16
 1361              		.thumb_func
 1362              		.type	CyIntSetPriority, %function
 1363              	CyIntSetPriority:
 1364              	.LFB24:
2371:Generated_Source\PSoC4/CyLib.c **** 
2372:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2373:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntSetPriority
2374:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2375:Generated_Source\PSoC4/CyLib.c **** *
2376:Generated_Source\PSoC4/CyLib.c **** *  Sets the priority of the interrupt.
2377:Generated_Source\PSoC4/CyLib.c **** *
2378:Generated_Source\PSoC4/CyLib.c **** *  \param priority: Priority of the interrupt. 0 - 3, 0 being the highest.
2379:Generated_Source\PSoC4/CyLib.c **** *  \param number: The number of the interrupt, 0 - 31.
2380:Generated_Source\PSoC4/CyLib.c **** *
2381:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2382:Generated_Source\PSoC4/CyLib.c **** void CyIntSetPriority(uint8 number, uint8 priority)
2383:Generated_Source\PSoC4/CyLib.c **** {
 1365              		.loc 1 2383 0
 1366              		.cfi_startproc
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 67


 1367              		@ args = 0, pretend = 0, frame = 24
 1368              		@ frame_needed = 1, uses_anonymous_args = 0
 1369 0000 90B5     		push	{r4, r7, lr}
 1370              		.cfi_def_cfa_offset 12
 1371              		.cfi_offset 4, -12
 1372              		.cfi_offset 7, -8
 1373              		.cfi_offset 14, -4
 1374 0002 87B0     		sub	sp, sp, #28
 1375              		.cfi_def_cfa_offset 40
 1376 0004 00AF     		add	r7, sp, #0
 1377              		.cfi_def_cfa_register 7
 1378 0006 0200     		movs	r2, r0
 1379 0008 FB1D     		adds	r3, r7, #7
 1380 000a 1A70     		strb	r2, [r3]
 1381 000c BB1D     		adds	r3, r7, #6
 1382 000e 0A1C     		adds	r2, r1, #0
 1383 0010 1A70     		strb	r2, [r3]
2384:Generated_Source\PSoC4/CyLib.c ****     uint8 interruptState;
2385:Generated_Source\PSoC4/CyLib.c ****     uint32 shift;
2386:Generated_Source\PSoC4/CyLib.c ****     uint32 value;
2387:Generated_Source\PSoC4/CyLib.c **** 
2388:Generated_Source\PSoC4/CyLib.c ****     CYASSERT(priority <= CY_MIN_PRIORITY);
 1384              		.loc 1 2388 0
 1385 0012 BB1D     		adds	r3, r7, #6
 1386 0014 1B78     		ldrb	r3, [r3]
 1387 0016 032B     		cmp	r3, #3
 1388 0018 02D9     		bls	.L84
 1389              		.loc 1 2388 0 is_stmt 0 discriminator 1
 1390 001a 0020     		movs	r0, #0
 1391 001c FFF7FEFF 		bl	CyHalt
 1392              	.L84:
2389:Generated_Source\PSoC4/CyLib.c ****     CYASSERT(number < CY_NUM_INTERRUPTS);
 1393              		.loc 1 2389 0 is_stmt 1
 1394 0020 FB1D     		adds	r3, r7, #7
 1395 0022 1B78     		ldrb	r3, [r3]
 1396 0024 1F2B     		cmp	r3, #31
 1397 0026 02D9     		bls	.L85
 1398              		.loc 1 2389 0 is_stmt 0 discriminator 1
 1399 0028 0020     		movs	r0, #0
 1400 002a FFF7FEFF 		bl	CyHalt
 1401              	.L85:
2390:Generated_Source\PSoC4/CyLib.c **** 
2391:Generated_Source\PSoC4/CyLib.c ****     shift = CY_INT_PRIORITY_SHIFT(number);
 1402              		.loc 1 2391 0 is_stmt 1
 1403 002e FB1D     		adds	r3, r7, #7
 1404 0030 1B78     		ldrb	r3, [r3]
 1405 0032 0322     		movs	r2, #3
 1406 0034 1340     		ands	r3, r2
 1407 0036 DB00     		lsls	r3, r3, #3
 1408 0038 0633     		adds	r3, r3, #6
 1409 003a 7B61     		str	r3, [r7, #20]
2392:Generated_Source\PSoC4/CyLib.c **** 
2393:Generated_Source\PSoC4/CyLib.c ****     interruptState = CyEnterCriticalSection();
 1410              		.loc 1 2393 0
 1411 003c 1323     		movs	r3, #19
 1412 003e FC18     		adds	r4, r7, r3
 1413 0040 FFF7FEFF 		bl	CyEnterCriticalSection
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 68


 1414 0044 0300     		movs	r3, r0
 1415 0046 2370     		strb	r3, [r4]
2394:Generated_Source\PSoC4/CyLib.c **** 
2395:Generated_Source\PSoC4/CyLib.c ****     value = CY_INT_PRIORITY_REG(number);
 1416              		.loc 1 2395 0
 1417 0048 FB1D     		adds	r3, r7, #7
 1418 004a 1B78     		ldrb	r3, [r3]
 1419 004c 9B08     		lsrs	r3, r3, #2
 1420 004e DBB2     		uxtb	r3, r3
 1421 0050 9B00     		lsls	r3, r3, #2
 1422 0052 144A     		ldr	r2, .L86
 1423 0054 9446     		mov	ip, r2
 1424 0056 6344     		add	r3, r3, ip
 1425 0058 1B68     		ldr	r3, [r3]
 1426 005a FB60     		str	r3, [r7, #12]
2396:Generated_Source\PSoC4/CyLib.c ****     value &= (uint32)(~((uint32)(CY_INT_PRIORITY_MASK << shift)));
 1427              		.loc 1 2396 0
 1428 005c 0322     		movs	r2, #3
 1429 005e 7B69     		ldr	r3, [r7, #20]
 1430 0060 9A40     		lsls	r2, r2, r3
 1431 0062 1300     		movs	r3, r2
 1432 0064 DA43     		mvns	r2, r3
 1433 0066 FB68     		ldr	r3, [r7, #12]
 1434 0068 1340     		ands	r3, r2
 1435 006a FB60     		str	r3, [r7, #12]
2397:Generated_Source\PSoC4/CyLib.c ****     value |= ((uint32)priority << shift);
 1436              		.loc 1 2397 0
 1437 006c BB1D     		adds	r3, r7, #6
 1438 006e 1A78     		ldrb	r2, [r3]
 1439 0070 7B69     		ldr	r3, [r7, #20]
 1440 0072 9A40     		lsls	r2, r2, r3
 1441 0074 1300     		movs	r3, r2
 1442 0076 FA68     		ldr	r2, [r7, #12]
 1443 0078 1343     		orrs	r3, r2
 1444 007a FB60     		str	r3, [r7, #12]
2398:Generated_Source\PSoC4/CyLib.c ****     CY_INT_PRIORITY_REG(number) = value;
 1445              		.loc 1 2398 0
 1446 007c FB1D     		adds	r3, r7, #7
 1447 007e 1B78     		ldrb	r3, [r3]
 1448 0080 9B08     		lsrs	r3, r3, #2
 1449 0082 DBB2     		uxtb	r3, r3
 1450 0084 9B00     		lsls	r3, r3, #2
 1451 0086 074A     		ldr	r2, .L86
 1452 0088 9446     		mov	ip, r2
 1453 008a 6344     		add	r3, r3, ip
 1454 008c FA68     		ldr	r2, [r7, #12]
 1455 008e 1A60     		str	r2, [r3]
2399:Generated_Source\PSoC4/CyLib.c **** 
2400:Generated_Source\PSoC4/CyLib.c ****     CyExitCriticalSection(interruptState);
 1456              		.loc 1 2400 0
 1457 0090 1323     		movs	r3, #19
 1458 0092 FB18     		adds	r3, r7, r3
 1459 0094 1B78     		ldrb	r3, [r3]
 1460 0096 1800     		movs	r0, r3
 1461 0098 FFF7FEFF 		bl	CyExitCriticalSection
2401:Generated_Source\PSoC4/CyLib.c **** }
 1462              		.loc 1 2401 0
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 69


 1463 009c C046     		nop
 1464 009e BD46     		mov	sp, r7
 1465 00a0 07B0     		add	sp, sp, #28
 1466              		@ sp needed
 1467 00a2 90BD     		pop	{r4, r7, pc}
 1468              	.L87:
 1469              		.align	2
 1470              	.L86:
 1471 00a4 00E400E0 		.word	-536812544
 1472              		.cfi_endproc
 1473              	.LFE24:
 1474              		.size	CyIntSetPriority, .-CyIntSetPriority
 1475              		.section	.text.CyIntGetPriority,"ax",%progbits
 1476              		.align	2
 1477              		.global	CyIntGetPriority
 1478              		.code	16
 1479              		.thumb_func
 1480              		.type	CyIntGetPriority, %function
 1481              	CyIntGetPriority:
 1482              	.LFB25:
2402:Generated_Source\PSoC4/CyLib.c **** 
2403:Generated_Source\PSoC4/CyLib.c **** 
2404:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2405:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntGetPriority
2406:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2407:Generated_Source\PSoC4/CyLib.c **** *
2408:Generated_Source\PSoC4/CyLib.c **** *  Gets the priority of the interrupt.
2409:Generated_Source\PSoC4/CyLib.c **** *
2410:Generated_Source\PSoC4/CyLib.c **** *  \param number: The number of the interrupt, 0 - 31.
2411:Generated_Source\PSoC4/CyLib.c **** *
2412:Generated_Source\PSoC4/CyLib.c **** * \return
2413:Generated_Source\PSoC4/CyLib.c **** *  Priority of the interrupt. 0 - 3, 0 being the highest.
2414:Generated_Source\PSoC4/CyLib.c **** *
2415:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2416:Generated_Source\PSoC4/CyLib.c **** uint8 CyIntGetPriority(uint8 number)
2417:Generated_Source\PSoC4/CyLib.c **** {
 1483              		.loc 1 2417 0
 1484              		.cfi_startproc
 1485              		@ args = 0, pretend = 0, frame = 16
 1486              		@ frame_needed = 1, uses_anonymous_args = 0
 1487 0000 80B5     		push	{r7, lr}
 1488              		.cfi_def_cfa_offset 8
 1489              		.cfi_offset 7, -8
 1490              		.cfi_offset 14, -4
 1491 0002 84B0     		sub	sp, sp, #16
 1492              		.cfi_def_cfa_offset 24
 1493 0004 00AF     		add	r7, sp, #0
 1494              		.cfi_def_cfa_register 7
 1495 0006 0200     		movs	r2, r0
 1496 0008 FB1D     		adds	r3, r7, #7
 1497 000a 1A70     		strb	r2, [r3]
2418:Generated_Source\PSoC4/CyLib.c ****     uint8 priority;
2419:Generated_Source\PSoC4/CyLib.c **** 
2420:Generated_Source\PSoC4/CyLib.c ****     CYASSERT(number < CY_NUM_INTERRUPTS);
 1498              		.loc 1 2420 0
 1499 000c FB1D     		adds	r3, r7, #7
 1500 000e 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 70


 1501 0010 1F2B     		cmp	r3, #31
 1502 0012 02D9     		bls	.L89
 1503              		.loc 1 2420 0 is_stmt 0 discriminator 1
 1504 0014 0020     		movs	r0, #0
 1505 0016 FFF7FEFF 		bl	CyHalt
 1506              	.L89:
2421:Generated_Source\PSoC4/CyLib.c **** 
2422:Generated_Source\PSoC4/CyLib.c ****     priority = (uint8) (CY_INT_PRIORITY_REG(number) >> CY_INT_PRIORITY_SHIFT(number));
 1507              		.loc 1 2422 0 is_stmt 1
 1508 001a FB1D     		adds	r3, r7, #7
 1509 001c 1B78     		ldrb	r3, [r3]
 1510 001e 9B08     		lsrs	r3, r3, #2
 1511 0020 DBB2     		uxtb	r3, r3
 1512 0022 9B00     		lsls	r3, r3, #2
 1513 0024 0B4A     		ldr	r2, .L91
 1514 0026 9446     		mov	ip, r2
 1515 0028 6344     		add	r3, r3, ip
 1516 002a 1A68     		ldr	r2, [r3]
 1517 002c FB1D     		adds	r3, r7, #7
 1518 002e 1B78     		ldrb	r3, [r3]
 1519 0030 0321     		movs	r1, #3
 1520 0032 0B40     		ands	r3, r1
 1521 0034 DB00     		lsls	r3, r3, #3
 1522 0036 0633     		adds	r3, r3, #6
 1523 0038 DA40     		lsrs	r2, r2, r3
 1524 003a 0F23     		movs	r3, #15
 1525 003c FB18     		adds	r3, r7, r3
 1526 003e 1A70     		strb	r2, [r3]
2423:Generated_Source\PSoC4/CyLib.c **** 
2424:Generated_Source\PSoC4/CyLib.c ****     return (priority & (uint8) CY_INT_PRIORITY_MASK);
 1527              		.loc 1 2424 0
 1528 0040 0F23     		movs	r3, #15
 1529 0042 FB18     		adds	r3, r7, r3
 1530 0044 1B78     		ldrb	r3, [r3]
 1531 0046 0322     		movs	r2, #3
 1532 0048 1340     		ands	r3, r2
 1533 004a DBB2     		uxtb	r3, r3
2425:Generated_Source\PSoC4/CyLib.c **** }
 1534              		.loc 1 2425 0
 1535 004c 1800     		movs	r0, r3
 1536 004e BD46     		mov	sp, r7
 1537 0050 04B0     		add	sp, sp, #16
 1538              		@ sp needed
 1539 0052 80BD     		pop	{r7, pc}
 1540              	.L92:
 1541              		.align	2
 1542              	.L91:
 1543 0054 00E400E0 		.word	-536812544
 1544              		.cfi_endproc
 1545              	.LFE25:
 1546              		.size	CyIntGetPriority, .-CyIntGetPriority
 1547              		.section	.text.CyIntEnable,"ax",%progbits
 1548              		.align	2
 1549              		.global	CyIntEnable
 1550              		.code	16
 1551              		.thumb_func
 1552              		.type	CyIntEnable, %function
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 71


 1553              	CyIntEnable:
 1554              	.LFB26:
2426:Generated_Source\PSoC4/CyLib.c **** 
2427:Generated_Source\PSoC4/CyLib.c **** 
2428:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2429:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntEnable
2430:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2431:Generated_Source\PSoC4/CyLib.c **** *
2432:Generated_Source\PSoC4/CyLib.c **** *  Enables the specified interrupt number.
2433:Generated_Source\PSoC4/CyLib.c **** *
2434:Generated_Source\PSoC4/CyLib.c **** *  \param number: Valid range [0-31].  Interrupt number
2435:Generated_Source\PSoC4/CyLib.c **** *
2436:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2437:Generated_Source\PSoC4/CyLib.c **** void CyIntEnable(uint8 number)
2438:Generated_Source\PSoC4/CyLib.c **** {
 1555              		.loc 1 2438 0
 1556              		.cfi_startproc
 1557              		@ args = 0, pretend = 0, frame = 8
 1558              		@ frame_needed = 1, uses_anonymous_args = 0
 1559 0000 80B5     		push	{r7, lr}
 1560              		.cfi_def_cfa_offset 8
 1561              		.cfi_offset 7, -8
 1562              		.cfi_offset 14, -4
 1563 0002 82B0     		sub	sp, sp, #8
 1564              		.cfi_def_cfa_offset 16
 1565 0004 00AF     		add	r7, sp, #0
 1566              		.cfi_def_cfa_register 7
 1567 0006 0200     		movs	r2, r0
 1568 0008 FB1D     		adds	r3, r7, #7
 1569 000a 1A70     		strb	r2, [r3]
2439:Generated_Source\PSoC4/CyLib.c ****     CY_INT_ENABLE_REG = ((uint32) 0x01u << (CY_INT_ENABLE_RANGE_MASK & number));
 1570              		.loc 1 2439 0
 1571 000c 064B     		ldr	r3, .L94
 1572 000e FA1D     		adds	r2, r7, #7
 1573 0010 1278     		ldrb	r2, [r2]
 1574 0012 1F21     		movs	r1, #31
 1575 0014 0A40     		ands	r2, r1
 1576 0016 0121     		movs	r1, #1
 1577 0018 9140     		lsls	r1, r1, r2
 1578 001a 0A00     		movs	r2, r1
 1579 001c 1A60     		str	r2, [r3]
2440:Generated_Source\PSoC4/CyLib.c **** }
 1580              		.loc 1 2440 0
 1581 001e C046     		nop
 1582 0020 BD46     		mov	sp, r7
 1583 0022 02B0     		add	sp, sp, #8
 1584              		@ sp needed
 1585 0024 80BD     		pop	{r7, pc}
 1586              	.L95:
 1587 0026 C046     		.align	2
 1588              	.L94:
 1589 0028 00E100E0 		.word	-536813312
 1590              		.cfi_endproc
 1591              	.LFE26:
 1592              		.size	CyIntEnable, .-CyIntEnable
 1593              		.section	.text.CyIntGetState,"ax",%progbits
 1594              		.align	2
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 72


 1595              		.global	CyIntGetState
 1596              		.code	16
 1597              		.thumb_func
 1598              		.type	CyIntGetState, %function
 1599              	CyIntGetState:
 1600              	.LFB27:
2441:Generated_Source\PSoC4/CyLib.c **** 
2442:Generated_Source\PSoC4/CyLib.c **** 
2443:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2444:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntGetState
2445:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2446:Generated_Source\PSoC4/CyLib.c **** *
2447:Generated_Source\PSoC4/CyLib.c **** *  Gets the enable state of the specified interrupt number.
2448:Generated_Source\PSoC4/CyLib.c **** *
2449:Generated_Source\PSoC4/CyLib.c **** *  \param number: Valid range [0-31].  Interrupt number.
2450:Generated_Source\PSoC4/CyLib.c **** *
2451:Generated_Source\PSoC4/CyLib.c **** * \return
2452:Generated_Source\PSoC4/CyLib.c **** *  Enable status: 1 if enabled, 0 if disabled
2453:Generated_Source\PSoC4/CyLib.c **** *
2454:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2455:Generated_Source\PSoC4/CyLib.c **** uint8 CyIntGetState(uint8 number)
2456:Generated_Source\PSoC4/CyLib.c **** {
 1601              		.loc 1 2456 0
 1602              		.cfi_startproc
 1603              		@ args = 0, pretend = 0, frame = 8
 1604              		@ frame_needed = 1, uses_anonymous_args = 0
 1605 0000 80B5     		push	{r7, lr}
 1606              		.cfi_def_cfa_offset 8
 1607              		.cfi_offset 7, -8
 1608              		.cfi_offset 14, -4
 1609 0002 82B0     		sub	sp, sp, #8
 1610              		.cfi_def_cfa_offset 16
 1611 0004 00AF     		add	r7, sp, #0
 1612              		.cfi_def_cfa_register 7
 1613 0006 0200     		movs	r2, r0
 1614 0008 FB1D     		adds	r3, r7, #7
 1615 000a 1A70     		strb	r2, [r3]
2457:Generated_Source\PSoC4/CyLib.c ****     /* Get state of interrupt. */
2458:Generated_Source\PSoC4/CyLib.c ****     return ((0u != (CY_INT_ENABLE_REG & ((uint32) 0x01u << (CY_INT_ENABLE_RANGE_MASK & number)))) ?
 1616              		.loc 1 2458 0
 1617 000c 074B     		ldr	r3, .L98
 1618 000e 1A68     		ldr	r2, [r3]
 1619 0010 FB1D     		adds	r3, r7, #7
 1620 0012 1B78     		ldrb	r3, [r3]
 1621 0014 1F21     		movs	r1, #31
 1622 0016 0B40     		ands	r3, r1
 1623 0018 DA40     		lsrs	r2, r2, r3
 1624 001a 1300     		movs	r3, r2
 1625 001c DBB2     		uxtb	r3, r3
 1626 001e 0122     		movs	r2, #1
 1627 0020 1340     		ands	r3, r2
 1628 0022 DBB2     		uxtb	r3, r3
2459:Generated_Source\PSoC4/CyLib.c **** }
 1629              		.loc 1 2459 0
 1630 0024 1800     		movs	r0, r3
 1631 0026 BD46     		mov	sp, r7
 1632 0028 02B0     		add	sp, sp, #8
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 73


 1633              		@ sp needed
 1634 002a 80BD     		pop	{r7, pc}
 1635              	.L99:
 1636              		.align	2
 1637              	.L98:
 1638 002c 00E100E0 		.word	-536813312
 1639              		.cfi_endproc
 1640              	.LFE27:
 1641              		.size	CyIntGetState, .-CyIntGetState
 1642              		.section	.text.CyIntDisable,"ax",%progbits
 1643              		.align	2
 1644              		.global	CyIntDisable
 1645              		.code	16
 1646              		.thumb_func
 1647              		.type	CyIntDisable, %function
 1648              	CyIntDisable:
 1649              	.LFB28:
2460:Generated_Source\PSoC4/CyLib.c **** 
2461:Generated_Source\PSoC4/CyLib.c **** 
2462:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2463:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntDisable
2464:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2465:Generated_Source\PSoC4/CyLib.c **** *
2466:Generated_Source\PSoC4/CyLib.c **** *   Disables the specified interrupt number.
2467:Generated_Source\PSoC4/CyLib.c **** *
2468:Generated_Source\PSoC4/CyLib.c **** *   \param number: Valid range [0-31].  Interrupt number.
2469:Generated_Source\PSoC4/CyLib.c **** *
2470:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2471:Generated_Source\PSoC4/CyLib.c **** void CyIntDisable(uint8 number)
2472:Generated_Source\PSoC4/CyLib.c **** {
 1650              		.loc 1 2472 0
 1651              		.cfi_startproc
 1652              		@ args = 0, pretend = 0, frame = 8
 1653              		@ frame_needed = 1, uses_anonymous_args = 0
 1654 0000 80B5     		push	{r7, lr}
 1655              		.cfi_def_cfa_offset 8
 1656              		.cfi_offset 7, -8
 1657              		.cfi_offset 14, -4
 1658 0002 82B0     		sub	sp, sp, #8
 1659              		.cfi_def_cfa_offset 16
 1660 0004 00AF     		add	r7, sp, #0
 1661              		.cfi_def_cfa_register 7
 1662 0006 0200     		movs	r2, r0
 1663 0008 FB1D     		adds	r3, r7, #7
 1664 000a 1A70     		strb	r2, [r3]
2473:Generated_Source\PSoC4/CyLib.c ****     CY_INT_CLEAR_REG = ((uint32) 0x01u << (CY_INT_ENABLE_RANGE_MASK & number));
 1665              		.loc 1 2473 0
 1666 000c 064B     		ldr	r3, .L101
 1667 000e FA1D     		adds	r2, r7, #7
 1668 0010 1278     		ldrb	r2, [r2]
 1669 0012 1F21     		movs	r1, #31
 1670 0014 0A40     		ands	r2, r1
 1671 0016 0121     		movs	r1, #1
 1672 0018 9140     		lsls	r1, r1, r2
 1673 001a 0A00     		movs	r2, r1
 1674 001c 1A60     		str	r2, [r3]
2474:Generated_Source\PSoC4/CyLib.c **** }
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 74


 1675              		.loc 1 2474 0
 1676 001e C046     		nop
 1677 0020 BD46     		mov	sp, r7
 1678 0022 02B0     		add	sp, sp, #8
 1679              		@ sp needed
 1680 0024 80BD     		pop	{r7, pc}
 1681              	.L102:
 1682 0026 C046     		.align	2
 1683              	.L101:
 1684 0028 80E100E0 		.word	-536813184
 1685              		.cfi_endproc
 1686              	.LFE28:
 1687              		.size	CyIntDisable, .-CyIntDisable
 1688              		.section	.text.CyIntSetPending,"ax",%progbits
 1689              		.align	2
 1690              		.global	CyIntSetPending
 1691              		.code	16
 1692              		.thumb_func
 1693              		.type	CyIntSetPending, %function
 1694              	CyIntSetPending:
 1695              	.LFB29:
2475:Generated_Source\PSoC4/CyLib.c **** 
2476:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2477:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntSetPending
2478:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2479:Generated_Source\PSoC4/CyLib.c **** *
2480:Generated_Source\PSoC4/CyLib.c **** *  Forces the specified interrupt number to be pending.
2481:Generated_Source\PSoC4/CyLib.c **** *
2482:Generated_Source\PSoC4/CyLib.c **** *  \param number: Valid range [0-31].  Interrupt number.
2483:Generated_Source\PSoC4/CyLib.c **** *
2484:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2485:Generated_Source\PSoC4/CyLib.c **** void CyIntSetPending(uint8 number)
2486:Generated_Source\PSoC4/CyLib.c **** {
 1696              		.loc 1 2486 0
 1697              		.cfi_startproc
 1698              		@ args = 0, pretend = 0, frame = 8
 1699              		@ frame_needed = 1, uses_anonymous_args = 0
 1700 0000 80B5     		push	{r7, lr}
 1701              		.cfi_def_cfa_offset 8
 1702              		.cfi_offset 7, -8
 1703              		.cfi_offset 14, -4
 1704 0002 82B0     		sub	sp, sp, #8
 1705              		.cfi_def_cfa_offset 16
 1706 0004 00AF     		add	r7, sp, #0
 1707              		.cfi_def_cfa_register 7
 1708 0006 0200     		movs	r2, r0
 1709 0008 FB1D     		adds	r3, r7, #7
 1710 000a 1A70     		strb	r2, [r3]
2487:Generated_Source\PSoC4/CyLib.c ****     CY_INT_SET_PEND_REG = ((uint32) 0x01u << (CY_INT_ENABLE_RANGE_MASK & number));
 1711              		.loc 1 2487 0
 1712 000c 064B     		ldr	r3, .L104
 1713 000e FA1D     		adds	r2, r7, #7
 1714 0010 1278     		ldrb	r2, [r2]
 1715 0012 1F21     		movs	r1, #31
 1716 0014 0A40     		ands	r2, r1
 1717 0016 0121     		movs	r1, #1
 1718 0018 9140     		lsls	r1, r1, r2
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 75


 1719 001a 0A00     		movs	r2, r1
 1720 001c 1A60     		str	r2, [r3]
2488:Generated_Source\PSoC4/CyLib.c **** }
 1721              		.loc 1 2488 0
 1722 001e C046     		nop
 1723 0020 BD46     		mov	sp, r7
 1724 0022 02B0     		add	sp, sp, #8
 1725              		@ sp needed
 1726 0024 80BD     		pop	{r7, pc}
 1727              	.L105:
 1728 0026 C046     		.align	2
 1729              	.L104:
 1730 0028 00E200E0 		.word	-536813056
 1731              		.cfi_endproc
 1732              	.LFE29:
 1733              		.size	CyIntSetPending, .-CyIntSetPending
 1734              		.section	.text.CyIntClearPending,"ax",%progbits
 1735              		.align	2
 1736              		.global	CyIntClearPending
 1737              		.code	16
 1738              		.thumb_func
 1739              		.type	CyIntClearPending, %function
 1740              	CyIntClearPending:
 1741              	.LFB30:
2489:Generated_Source\PSoC4/CyLib.c **** 
2490:Generated_Source\PSoC4/CyLib.c **** 
2491:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2492:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntClearPending
2493:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2494:Generated_Source\PSoC4/CyLib.c **** *
2495:Generated_Source\PSoC4/CyLib.c **** *  Clears any pending interrupt for the specified interrupt number.
2496:Generated_Source\PSoC4/CyLib.c **** *
2497:Generated_Source\PSoC4/CyLib.c **** *  \param number: Valid range [0-31].  Interrupt number.
2498:Generated_Source\PSoC4/CyLib.c **** *
2499:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2500:Generated_Source\PSoC4/CyLib.c **** void CyIntClearPending(uint8 number)
2501:Generated_Source\PSoC4/CyLib.c **** {
 1742              		.loc 1 2501 0
 1743              		.cfi_startproc
 1744              		@ args = 0, pretend = 0, frame = 8
 1745              		@ frame_needed = 1, uses_anonymous_args = 0
 1746 0000 80B5     		push	{r7, lr}
 1747              		.cfi_def_cfa_offset 8
 1748              		.cfi_offset 7, -8
 1749              		.cfi_offset 14, -4
 1750 0002 82B0     		sub	sp, sp, #8
 1751              		.cfi_def_cfa_offset 16
 1752 0004 00AF     		add	r7, sp, #0
 1753              		.cfi_def_cfa_register 7
 1754 0006 0200     		movs	r2, r0
 1755 0008 FB1D     		adds	r3, r7, #7
 1756 000a 1A70     		strb	r2, [r3]
2502:Generated_Source\PSoC4/CyLib.c ****     CY_INT_CLR_PEND_REG = ((uint32) 0x01u << (CY_INT_ENABLE_RANGE_MASK & number));
 1757              		.loc 1 2502 0
 1758 000c 064B     		ldr	r3, .L107
 1759 000e FA1D     		adds	r2, r7, #7
 1760 0010 1278     		ldrb	r2, [r2]
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 76


 1761 0012 1F21     		movs	r1, #31
 1762 0014 0A40     		ands	r2, r1
 1763 0016 0121     		movs	r1, #1
 1764 0018 9140     		lsls	r1, r1, r2
 1765 001a 0A00     		movs	r2, r1
 1766 001c 1A60     		str	r2, [r3]
2503:Generated_Source\PSoC4/CyLib.c **** }
 1767              		.loc 1 2503 0
 1768 001e C046     		nop
 1769 0020 BD46     		mov	sp, r7
 1770 0022 02B0     		add	sp, sp, #8
 1771              		@ sp needed
 1772 0024 80BD     		pop	{r7, pc}
 1773              	.L108:
 1774 0026 C046     		.align	2
 1775              	.L107:
 1776 0028 80E200E0 		.word	-536812928
 1777              		.cfi_endproc
 1778              	.LFE30:
 1779              		.size	CyIntClearPending, .-CyIntClearPending
 1780              		.section	.text.CyHalt,"ax",%progbits
 1781              		.align	2
 1782              		.global	CyHalt
 1783              		.code	16
 1784              		.thumb_func
 1785              		.type	CyHalt, %function
 1786              	CyHalt:
 1787              	.LFB31:
2504:Generated_Source\PSoC4/CyLib.c **** 
2505:Generated_Source\PSoC4/CyLib.c **** 
2506:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2507:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyHalt
2508:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2509:Generated_Source\PSoC4/CyLib.c **** *
2510:Generated_Source\PSoC4/CyLib.c **** *  Halts the CPU.
2511:Generated_Source\PSoC4/CyLib.c **** *
2512:Generated_Source\PSoC4/CyLib.c **** *  \param reason: Value to be used during debugging.
2513:Generated_Source\PSoC4/CyLib.c **** *
2514:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2515:Generated_Source\PSoC4/CyLib.c **** void CyHalt(uint8 reason)
2516:Generated_Source\PSoC4/CyLib.c **** {
 1788              		.loc 1 2516 0
 1789              		.cfi_startproc
 1790              		@ args = 0, pretend = 0, frame = 8
 1791              		@ frame_needed = 1, uses_anonymous_args = 0
 1792 0000 80B5     		push	{r7, lr}
 1793              		.cfi_def_cfa_offset 8
 1794              		.cfi_offset 7, -8
 1795              		.cfi_offset 14, -4
 1796 0002 82B0     		sub	sp, sp, #8
 1797              		.cfi_def_cfa_offset 16
 1798 0004 00AF     		add	r7, sp, #0
 1799              		.cfi_def_cfa_register 7
 1800 0006 0200     		movs	r2, r0
 1801 0008 FB1D     		adds	r3, r7, #7
 1802 000a 1A70     		strb	r2, [r3]
2517:Generated_Source\PSoC4/CyLib.c ****     if(0u != reason)
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 77


2518:Generated_Source\PSoC4/CyLib.c ****     {
2519:Generated_Source\PSoC4/CyLib.c ****         /* To remove unreferenced local variable warning */
2520:Generated_Source\PSoC4/CyLib.c ****     }
2521:Generated_Source\PSoC4/CyLib.c **** 
2522:Generated_Source\PSoC4/CyLib.c ****     #if defined (__ARMCC_VERSION)
2523:Generated_Source\PSoC4/CyLib.c ****         __breakpoint(0x0);
2524:Generated_Source\PSoC4/CyLib.c ****     #elif defined(__GNUC__) || defined (__ICCARM__)
2525:Generated_Source\PSoC4/CyLib.c ****         __asm("    bkpt    1");
 1803              		.loc 1 2525 0
 1804              		.syntax divided
 1805              	@ 2525 "Generated_Source\PSoC4\CyLib.c" 1
 1806 000c 01BE     		    bkpt    1
 1807              	@ 0 "" 2
2526:Generated_Source\PSoC4/CyLib.c ****     #elif defined(__C51__)
2527:Generated_Source\PSoC4/CyLib.c ****         CYDEV_HALT_CPU;
2528:Generated_Source\PSoC4/CyLib.c ****     #endif  /* (__ARMCC_VERSION) */
2529:Generated_Source\PSoC4/CyLib.c **** }
 1808              		.loc 1 2529 0
 1809              		.thumb
 1810              		.syntax unified
 1811 000e C046     		nop
 1812 0010 BD46     		mov	sp, r7
 1813 0012 02B0     		add	sp, sp, #8
 1814              		@ sp needed
 1815 0014 80BD     		pop	{r7, pc}
 1816              		.cfi_endproc
 1817              	.LFE31:
 1818              		.size	CyHalt, .-CyHalt
 1819 0016 C046     		.section	.text.CySoftwareReset,"ax",%progbits
 1820              		.align	2
 1821              		.global	CySoftwareReset
 1822              		.code	16
 1823              		.thumb_func
 1824              		.type	CySoftwareReset, %function
 1825              	CySoftwareReset:
 1826              	.LFB32:
2530:Generated_Source\PSoC4/CyLib.c **** 
2531:Generated_Source\PSoC4/CyLib.c **** 
2532:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2533:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySoftwareReset
2534:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2535:Generated_Source\PSoC4/CyLib.c **** *
2536:Generated_Source\PSoC4/CyLib.c **** *  Forces a software reset of the device.
2537:Generated_Source\PSoC4/CyLib.c **** *
2538:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2539:Generated_Source\PSoC4/CyLib.c **** void CySoftwareReset(void)
2540:Generated_Source\PSoC4/CyLib.c **** {
 1827              		.loc 1 2540 0
 1828              		.cfi_startproc
 1829              		@ args = 0, pretend = 0, frame = 0
 1830              		@ frame_needed = 1, uses_anonymous_args = 0
 1831 0000 80B5     		push	{r7, lr}
 1832              		.cfi_def_cfa_offset 8
 1833              		.cfi_offset 7, -8
 1834              		.cfi_offset 14, -4
 1835 0002 00AF     		add	r7, sp, #0
 1836              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 78


2541:Generated_Source\PSoC4/CyLib.c ****     /***************************************************************************
2542:Generated_Source\PSoC4/CyLib.c ****     * Setting the system reset request bit. The vector key value must be written
2543:Generated_Source\PSoC4/CyLib.c ****     * to the register, otherwise the register write is unpredictable.
2544:Generated_Source\PSoC4/CyLib.c ****     ***************************************************************************/
2545:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_AIRCR_REG = (CY_SYS_AIRCR_REG & (uint32)(~CY_SYS_AIRCR_VECTKEY_MASK)) |
 1837              		.loc 1 2545 0
 1838 0004 054B     		ldr	r3, .L111
 1839 0006 054A     		ldr	r2, .L111
 1840 0008 1268     		ldr	r2, [r2]
 1841 000a 1204     		lsls	r2, r2, #16
 1842 000c 120C     		lsrs	r2, r2, #16
2546:Generated_Source\PSoC4/CyLib.c ****                             CY_SYS_AIRCR_VECTKEY | CY_SYS_AIRCR_SYSRESETREQ;
 1843              		.loc 1 2546 0
 1844 000e 0449     		ldr	r1, .L111+4
 1845 0010 0A43     		orrs	r2, r1
2545:Generated_Source\PSoC4/CyLib.c ****                             CY_SYS_AIRCR_VECTKEY | CY_SYS_AIRCR_SYSRESETREQ;
 1846              		.loc 1 2545 0
 1847 0012 1A60     		str	r2, [r3]
2547:Generated_Source\PSoC4/CyLib.c **** }
 1848              		.loc 1 2547 0
 1849 0014 C046     		nop
 1850 0016 BD46     		mov	sp, r7
 1851              		@ sp needed
 1852 0018 80BD     		pop	{r7, pc}
 1853              	.L112:
 1854 001a C046     		.align	2
 1855              	.L111:
 1856 001c 0CED00E0 		.word	-536810228
 1857 0020 0400FA05 		.word	100270084
 1858              		.cfi_endproc
 1859              	.LFE32:
 1860              		.size	CySoftwareReset, .-CySoftwareReset
 1861              		.section	.text.CyDelay,"ax",%progbits
 1862              		.align	2
 1863              		.global	CyDelay
 1864              		.code	16
 1865              		.thumb_func
 1866              		.type	CyDelay, %function
 1867              	CyDelay:
 1868              	.LFB33:
2548:Generated_Source\PSoC4/CyLib.c **** 
2549:Generated_Source\PSoC4/CyLib.c **** 
2550:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2551:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyDelay
2552:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2553:Generated_Source\PSoC4/CyLib.c **** *
2554:Generated_Source\PSoC4/CyLib.c **** *  Blocks for milliseconds.
2555:Generated_Source\PSoC4/CyLib.c **** *
2556:Generated_Source\PSoC4/CyLib.c **** *  \param milliseconds: number of milliseconds to delay.
2557:Generated_Source\PSoC4/CyLib.c **** *
2558:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2559:Generated_Source\PSoC4/CyLib.c **** void CyDelay(uint32 milliseconds)
2560:Generated_Source\PSoC4/CyLib.c **** {
 1869              		.loc 1 2560 0
 1870              		.cfi_startproc
 1871              		@ args = 0, pretend = 0, frame = 8
 1872              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 79


 1873 0000 80B5     		push	{r7, lr}
 1874              		.cfi_def_cfa_offset 8
 1875              		.cfi_offset 7, -8
 1876              		.cfi_offset 14, -4
 1877 0002 82B0     		sub	sp, sp, #8
 1878              		.cfi_def_cfa_offset 16
 1879 0004 00AF     		add	r7, sp, #0
 1880              		.cfi_def_cfa_register 7
 1881 0006 7860     		str	r0, [r7, #4]
2561:Generated_Source\PSoC4/CyLib.c ****     while (milliseconds > CY_DELAY_MS_OVERFLOW)
 1882              		.loc 1 2561 0
 1883 0008 09E0     		b	.L114
 1884              	.L115:
2562:Generated_Source\PSoC4/CyLib.c ****     {
2563:Generated_Source\PSoC4/CyLib.c ****         /* This loop prevents overflow.
2564:Generated_Source\PSoC4/CyLib.c ****          * At 100MHz, milliseconds * cydelayFreqKhz overflows at about 42 seconds
2565:Generated_Source\PSoC4/CyLib.c ****          */
2566:Generated_Source\PSoC4/CyLib.c ****         CyDelayCycles(cydelay32kMs);
 1885              		.loc 1 2566 0
 1886 000a 0D4B     		ldr	r3, .L116
 1887 000c 1B68     		ldr	r3, [r3]
 1888 000e 1800     		movs	r0, r3
 1889 0010 FFF7FEFF 		bl	CyDelayCycles
2567:Generated_Source\PSoC4/CyLib.c ****         milliseconds -= CY_DELAY_MS_OVERFLOW;
 1890              		.loc 1 2567 0
 1891 0014 7B68     		ldr	r3, [r7, #4]
 1892 0016 0B4A     		ldr	r2, .L116+4
 1893 0018 9446     		mov	ip, r2
 1894 001a 6344     		add	r3, r3, ip
 1895 001c 7B60     		str	r3, [r7, #4]
 1896              	.L114:
2561:Generated_Source\PSoC4/CyLib.c ****     while (milliseconds > CY_DELAY_MS_OVERFLOW)
 1897              		.loc 1 2561 0
 1898 001e 7A68     		ldr	r2, [r7, #4]
 1899 0020 8023     		movs	r3, #128
 1900 0022 1B02     		lsls	r3, r3, #8
 1901 0024 9A42     		cmp	r2, r3
 1902 0026 F0D8     		bhi	.L115
2568:Generated_Source\PSoC4/CyLib.c ****     }
2569:Generated_Source\PSoC4/CyLib.c **** 
2570:Generated_Source\PSoC4/CyLib.c ****     CyDelayCycles(milliseconds * cydelayFreqKhz);
 1903              		.loc 1 2570 0
 1904 0028 074B     		ldr	r3, .L116+8
 1905 002a 1B68     		ldr	r3, [r3]
 1906 002c 7A68     		ldr	r2, [r7, #4]
 1907 002e 5343     		muls	r3, r2
 1908 0030 1800     		movs	r0, r3
 1909 0032 FFF7FEFF 		bl	CyDelayCycles
2571:Generated_Source\PSoC4/CyLib.c **** }
 1910              		.loc 1 2571 0
 1911 0036 C046     		nop
 1912 0038 BD46     		mov	sp, r7
 1913 003a 02B0     		add	sp, sp, #8
 1914              		@ sp needed
 1915 003c 80BD     		pop	{r7, pc}
 1916              	.L117:
 1917 003e C046     		.align	2
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 80


 1918              	.L116:
 1919 0040 00000000 		.word	cydelay32kMs
 1920 0044 0080FFFF 		.word	-32768
 1921 0048 00000000 		.word	cydelayFreqKhz
 1922              		.cfi_endproc
 1923              	.LFE33:
 1924              		.size	CyDelay, .-CyDelay
 1925              		.section	.text.CyDelayUs,"ax",%progbits
 1926              		.align	2
 1927              		.global	CyDelayUs
 1928              		.code	16
 1929              		.thumb_func
 1930              		.type	CyDelayUs, %function
 1931              	CyDelayUs:
 1932              	.LFB34:
2572:Generated_Source\PSoC4/CyLib.c **** 
2573:Generated_Source\PSoC4/CyLib.c **** 
2574:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2575:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyDelayUs
2576:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2577:Generated_Source\PSoC4/CyLib.c **** *  Blocks for microseconds.
2578:Generated_Source\PSoC4/CyLib.c **** *
2579:Generated_Source\PSoC4/CyLib.c **** *  \param microseconds: number of microseconds to delay.
2580:Generated_Source\PSoC4/CyLib.c **** *
2581:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2582:Generated_Source\PSoC4/CyLib.c **** void CyDelayUs(uint16 microseconds)
2583:Generated_Source\PSoC4/CyLib.c **** {
 1933              		.loc 1 2583 0
 1934              		.cfi_startproc
 1935              		@ args = 0, pretend = 0, frame = 8
 1936              		@ frame_needed = 1, uses_anonymous_args = 0
 1937 0000 80B5     		push	{r7, lr}
 1938              		.cfi_def_cfa_offset 8
 1939              		.cfi_offset 7, -8
 1940              		.cfi_offset 14, -4
 1941 0002 82B0     		sub	sp, sp, #8
 1942              		.cfi_def_cfa_offset 16
 1943 0004 00AF     		add	r7, sp, #0
 1944              		.cfi_def_cfa_register 7
 1945 0006 0200     		movs	r2, r0
 1946 0008 BB1D     		adds	r3, r7, #6
 1947 000a 1A80     		strh	r2, [r3]
2584:Generated_Source\PSoC4/CyLib.c ****     CyDelayCycles((uint32)microseconds * cydelayFreqMhz);
 1948              		.loc 1 2584 0
 1949 000c BB1D     		adds	r3, r7, #6
 1950 000e 1B88     		ldrh	r3, [r3]
 1951 0010 044A     		ldr	r2, .L119
 1952 0012 1278     		ldrb	r2, [r2]
 1953 0014 5343     		muls	r3, r2
 1954 0016 1800     		movs	r0, r3
 1955 0018 FFF7FEFF 		bl	CyDelayCycles
2585:Generated_Source\PSoC4/CyLib.c **** }
 1956              		.loc 1 2585 0
 1957 001c C046     		nop
 1958 001e BD46     		mov	sp, r7
 1959 0020 02B0     		add	sp, sp, #8
 1960              		@ sp needed
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 81


 1961 0022 80BD     		pop	{r7, pc}
 1962              	.L120:
 1963              		.align	2
 1964              	.L119:
 1965 0024 00000000 		.word	cydelayFreqMhz
 1966              		.cfi_endproc
 1967              	.LFE34:
 1968              		.size	CyDelayUs, .-CyDelayUs
 1969              		.global	__aeabi_uidiv
 1970              		.section	.text.CyDelayFreq,"ax",%progbits
 1971              		.align	2
 1972              		.global	CyDelayFreq
 1973              		.code	16
 1974              		.thumb_func
 1975              		.type	CyDelayFreq, %function
 1976              	CyDelayFreq:
 1977              	.LFB35:
2586:Generated_Source\PSoC4/CyLib.c **** 
2587:Generated_Source\PSoC4/CyLib.c **** 
2588:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2589:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyDelayFreq
2590:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2591:Generated_Source\PSoC4/CyLib.c **** *  Sets clock frequency for CyDelay.
2592:Generated_Source\PSoC4/CyLib.c **** *
2593:Generated_Source\PSoC4/CyLib.c **** *  \param freq: Frequency of bus clock in Hertz.
2594:Generated_Source\PSoC4/CyLib.c **** *
2595:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2596:Generated_Source\PSoC4/CyLib.c **** void CyDelayFreq(uint32 freq)
2597:Generated_Source\PSoC4/CyLib.c **** {
 1978              		.loc 1 2597 0
 1979              		.cfi_startproc
 1980              		@ args = 0, pretend = 0, frame = 8
 1981              		@ frame_needed = 1, uses_anonymous_args = 0
 1982 0000 80B5     		push	{r7, lr}
 1983              		.cfi_def_cfa_offset 8
 1984              		.cfi_offset 7, -8
 1985              		.cfi_offset 14, -4
 1986 0002 82B0     		sub	sp, sp, #8
 1987              		.cfi_def_cfa_offset 16
 1988 0004 00AF     		add	r7, sp, #0
 1989              		.cfi_def_cfa_register 7
 1990 0006 7860     		str	r0, [r7, #4]
2598:Generated_Source\PSoC4/CyLib.c ****     if (freq != 0u)
 1991              		.loc 1 2598 0
 1992 0008 7B68     		ldr	r3, [r7, #4]
 1993 000a 002B     		cmp	r3, #0
 1994 000c 03D0     		beq	.L122
2599:Generated_Source\PSoC4/CyLib.c ****     {
2600:Generated_Source\PSoC4/CyLib.c ****         cydelayFreqHz = freq;
 1995              		.loc 1 2600 0
 1996 000e 154B     		ldr	r3, .L124
 1997 0010 7A68     		ldr	r2, [r7, #4]
 1998 0012 1A60     		str	r2, [r3]
 1999 0014 02E0     		b	.L123
 2000              	.L122:
2601:Generated_Source\PSoC4/CyLib.c ****     }
2602:Generated_Source\PSoC4/CyLib.c ****     else
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 82


2603:Generated_Source\PSoC4/CyLib.c ****     {
2604:Generated_Source\PSoC4/CyLib.c ****         cydelayFreqHz = CYDEV_BCLK__SYSCLK__HZ;
 2001              		.loc 1 2604 0
 2002 0016 134B     		ldr	r3, .L124
 2003 0018 134A     		ldr	r2, .L124+4
 2004 001a 1A60     		str	r2, [r3]
 2005              	.L123:
2605:Generated_Source\PSoC4/CyLib.c ****     }
2606:Generated_Source\PSoC4/CyLib.c **** 
2607:Generated_Source\PSoC4/CyLib.c ****     cydelayFreqMhz = (uint8)((cydelayFreqHz + CY_DELAY_1M_MINUS_1_THRESHOLD) / CY_DELAY_1M_THRESHOL
 2006              		.loc 1 2607 0
 2007 001c 114B     		ldr	r3, .L124
 2008 001e 1B68     		ldr	r3, [r3]
 2009 0020 124A     		ldr	r2, .L124+8
 2010 0022 9446     		mov	ip, r2
 2011 0024 6344     		add	r3, r3, ip
 2012 0026 1249     		ldr	r1, .L124+12
 2013 0028 1800     		movs	r0, r3
 2014 002a FFF7FEFF 		bl	__aeabi_uidiv
 2015 002e 0300     		movs	r3, r0
 2016 0030 DAB2     		uxtb	r2, r3
 2017 0032 104B     		ldr	r3, .L124+16
 2018 0034 1A70     		strb	r2, [r3]
2608:Generated_Source\PSoC4/CyLib.c ****     cydelayFreqKhz = (cydelayFreqHz + CY_DELAY_1K_MINUS_1_THRESHOLD) / CY_DELAY_1K_THRESHOLD;
 2019              		.loc 1 2608 0
 2020 0036 0B4B     		ldr	r3, .L124
 2021 0038 1B68     		ldr	r3, [r3]
 2022 003a 0F4A     		ldr	r2, .L124+20
 2023 003c 9A18     		adds	r2, r3, r2
 2024 003e FA23     		movs	r3, #250
 2025 0040 9900     		lsls	r1, r3, #2
 2026 0042 1000     		movs	r0, r2
 2027 0044 FFF7FEFF 		bl	__aeabi_uidiv
 2028 0048 0300     		movs	r3, r0
 2029 004a 1A00     		movs	r2, r3
 2030 004c 0B4B     		ldr	r3, .L124+24
 2031 004e 1A60     		str	r2, [r3]
2609:Generated_Source\PSoC4/CyLib.c ****     cydelay32kMs   = CY_DELAY_MS_OVERFLOW * cydelayFreqKhz;
 2032              		.loc 1 2609 0
 2033 0050 0A4B     		ldr	r3, .L124+24
 2034 0052 1B68     		ldr	r3, [r3]
 2035 0054 DA03     		lsls	r2, r3, #15
 2036 0056 0A4B     		ldr	r3, .L124+28
 2037 0058 1A60     		str	r2, [r3]
2610:Generated_Source\PSoC4/CyLib.c **** }
 2038              		.loc 1 2610 0
 2039 005a C046     		nop
 2040 005c BD46     		mov	sp, r7
 2041 005e 02B0     		add	sp, sp, #8
 2042              		@ sp needed
 2043 0060 80BD     		pop	{r7, pc}
 2044              	.L125:
 2045 0062 C046     		.align	2
 2046              	.L124:
 2047 0064 00000000 		.word	cydelayFreqHz
 2048 0068 001BB700 		.word	12000000
 2049 006c 3F420F00 		.word	999999
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 83


 2050 0070 40420F00 		.word	1000000
 2051 0074 00000000 		.word	cydelayFreqMhz
 2052 0078 E7030000 		.word	999
 2053 007c 00000000 		.word	cydelayFreqKhz
 2054 0080 00000000 		.word	cydelay32kMs
 2055              		.cfi_endproc
 2056              	.LFE35:
 2057              		.size	CyDelayFreq, .-CyDelayFreq
 2058              		.section	.text.CySysTickStart,"ax",%progbits
 2059              		.align	2
 2060              		.global	CySysTickStart
 2061              		.code	16
 2062              		.thumb_func
 2063              		.type	CySysTickStart, %function
 2064              	CySysTickStart:
 2065              	.LFB36:
2611:Generated_Source\PSoC4/CyLib.c **** 
2612:Generated_Source\PSoC4/CyLib.c **** 
2613:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2614:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTick_Start
2615:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2616:Generated_Source\PSoC4/CyLib.c **** *
2617:Generated_Source\PSoC4/CyLib.c **** *  Starts the system timer (SysTick): configures SysTick to generate interrupt
2618:Generated_Source\PSoC4/CyLib.c **** *  every 1 ms and enables the interrupt.
2619:Generated_Source\PSoC4/CyLib.c **** *
2620:Generated_Source\PSoC4/CyLib.c **** *  There are components (LIN, CapSense Gesture) that relies on the default 
2621:Generated_Source\PSoC4/CyLib.c **** *  interval (1 ms). And that changing the interval will negatively impact 
2622:Generated_Source\PSoC4/CyLib.c **** *  their functionality.
2623:Generated_Source\PSoC4/CyLib.c **** *
2624:Generated_Source\PSoC4/CyLib.c **** * \sideeffect
2625:Generated_Source\PSoC4/CyLib.c **** *  Clears SysTick count flag if it was set.
2626:Generated_Source\PSoC4/CyLib.c **** *
2627:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2628:Generated_Source\PSoC4/CyLib.c **** void CySysTickStart(void)
2629:Generated_Source\PSoC4/CyLib.c **** {
 2066              		.loc 1 2629 0
 2067              		.cfi_startproc
 2068              		@ args = 0, pretend = 0, frame = 0
 2069              		@ frame_needed = 1, uses_anonymous_args = 0
 2070 0000 80B5     		push	{r7, lr}
 2071              		.cfi_def_cfa_offset 8
 2072              		.cfi_offset 7, -8
 2073              		.cfi_offset 14, -4
 2074 0002 00AF     		add	r7, sp, #0
 2075              		.cfi_def_cfa_register 7
2630:Generated_Source\PSoC4/CyLib.c ****     if (0u == CySysTickInitVar)
 2076              		.loc 1 2630 0
 2077 0004 064B     		ldr	r3, .L128
 2078 0006 1B68     		ldr	r3, [r3]
 2079 0008 002B     		cmp	r3, #0
 2080 000a 04D1     		bne	.L127
2631:Generated_Source\PSoC4/CyLib.c ****     {
2632:Generated_Source\PSoC4/CyLib.c ****         CySysTickInit();
 2081              		.loc 1 2632 0
 2082 000c FFF7FEFF 		bl	CySysTickInit
2633:Generated_Source\PSoC4/CyLib.c ****         CySysTickInitVar = 1u;
 2083              		.loc 1 2633 0
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 84


 2084 0010 034B     		ldr	r3, .L128
 2085 0012 0122     		movs	r2, #1
 2086 0014 1A60     		str	r2, [r3]
 2087              	.L127:
2634:Generated_Source\PSoC4/CyLib.c ****     }
2635:Generated_Source\PSoC4/CyLib.c **** 
2636:Generated_Source\PSoC4/CyLib.c ****     CySysTickEnable();
 2088              		.loc 1 2636 0
 2089 0016 FFF7FEFF 		bl	CySysTickEnable
2637:Generated_Source\PSoC4/CyLib.c **** }
 2090              		.loc 1 2637 0
 2091 001a C046     		nop
 2092 001c BD46     		mov	sp, r7
 2093              		@ sp needed
 2094 001e 80BD     		pop	{r7, pc}
 2095              	.L129:
 2096              		.align	2
 2097              	.L128:
 2098 0020 00000000 		.word	CySysTickInitVar
 2099              		.cfi_endproc
 2100              	.LFE36:
 2101              		.size	CySysTickStart, .-CySysTickStart
 2102              		.section	.text.CySysTickInit,"ax",%progbits
 2103              		.align	2
 2104              		.global	CySysTickInit
 2105              		.code	16
 2106              		.thumb_func
 2107              		.type	CySysTickInit, %function
 2108              	CySysTickInit:
 2109              	.LFB37:
2638:Generated_Source\PSoC4/CyLib.c **** 
2639:Generated_Source\PSoC4/CyLib.c **** 
2640:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2641:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickInit
2642:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2643:Generated_Source\PSoC4/CyLib.c **** *
2644:Generated_Source\PSoC4/CyLib.c **** *  Initializes the callback addresses with pointers to NULL, associates the
2645:Generated_Source\PSoC4/CyLib.c **** *  SysTick system vector with the function that is responsible for calling
2646:Generated_Source\PSoC4/CyLib.c **** *  registered callback functions, configures SysTick timer to generate interrupt
2647:Generated_Source\PSoC4/CyLib.c **** *  every 1 ms.
2648:Generated_Source\PSoC4/CyLib.c **** *
2649:Generated_Source\PSoC4/CyLib.c **** *  The 1 ms interrupt interval is configured based on the frequency determined
2650:Generated_Source\PSoC4/CyLib.c **** *  by PSoC Creator at build time. If System clock frequency is changed in
2651:Generated_Source\PSoC4/CyLib.c **** *  runtime, the CyDelayFreq() with the appropriate parameter should be called.
2652:Generated_Source\PSoC4/CyLib.c **** *
2653:Generated_Source\PSoC4/CyLib.c **** * \sideeffect
2654:Generated_Source\PSoC4/CyLib.c **** *  Clears SysTick count flag if it was set.
2655:Generated_Source\PSoC4/CyLib.c **** *
2656:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2657:Generated_Source\PSoC4/CyLib.c **** void CySysTickInit(void)
2658:Generated_Source\PSoC4/CyLib.c **** {
 2110              		.loc 1 2658 0
 2111              		.cfi_startproc
 2112              		@ args = 0, pretend = 0, frame = 8
 2113              		@ frame_needed = 1, uses_anonymous_args = 0
 2114 0000 80B5     		push	{r7, lr}
 2115              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 85


 2116              		.cfi_offset 7, -8
 2117              		.cfi_offset 14, -4
 2118 0002 82B0     		sub	sp, sp, #8
 2119              		.cfi_def_cfa_offset 16
 2120 0004 00AF     		add	r7, sp, #0
 2121              		.cfi_def_cfa_register 7
2659:Generated_Source\PSoC4/CyLib.c ****     uint32 i;
2660:Generated_Source\PSoC4/CyLib.c **** 
2661:Generated_Source\PSoC4/CyLib.c ****     for (i = 0u; i<CY_SYS_SYST_NUM_OF_CALLBACKS; i++)
 2122              		.loc 1 2661 0
 2123 0006 0023     		movs	r3, #0
 2124 0008 7B60     		str	r3, [r7, #4]
 2125 000a 07E0     		b	.L131
 2126              	.L132:
2662:Generated_Source\PSoC4/CyLib.c ****     {
2663:Generated_Source\PSoC4/CyLib.c ****         CySysTickCallbacks[i] = (void *) 0;
 2127              		.loc 1 2663 0 discriminator 3
 2128 000c 114B     		ldr	r3, .L133
 2129 000e 7A68     		ldr	r2, [r7, #4]
 2130 0010 9200     		lsls	r2, r2, #2
 2131 0012 0021     		movs	r1, #0
 2132 0014 D150     		str	r1, [r2, r3]
2661:Generated_Source\PSoC4/CyLib.c ****     {
 2133              		.loc 1 2661 0 discriminator 3
 2134 0016 7B68     		ldr	r3, [r7, #4]
 2135 0018 0133     		adds	r3, r3, #1
 2136 001a 7B60     		str	r3, [r7, #4]
 2137              	.L131:
2661:Generated_Source\PSoC4/CyLib.c ****     {
 2138              		.loc 1 2661 0 is_stmt 0 discriminator 1
 2139 001c 7B68     		ldr	r3, [r7, #4]
 2140 001e 042B     		cmp	r3, #4
 2141 0020 F4D9     		bls	.L132
2664:Generated_Source\PSoC4/CyLib.c ****     }
2665:Generated_Source\PSoC4/CyLib.c **** 
2666:Generated_Source\PSoC4/CyLib.c ****     (void) CyIntSetSysVector(CY_INT_SYSTICK_IRQN, &CySysTickServiceCallbacks);
 2142              		.loc 1 2666 0 is_stmt 1
 2143 0022 0D4B     		ldr	r3, .L133+4
 2144 0024 1900     		movs	r1, r3
 2145 0026 0F20     		movs	r0, #15
 2146 0028 FFF7FEFF 		bl	CyIntSetSysVector
2667:Generated_Source\PSoC4/CyLib.c **** 
2668:Generated_Source\PSoC4/CyLib.c ****     #if(CY_SYSTICK_LFCLK_SOURCE)
2669:Generated_Source\PSoC4/CyLib.c ****         CySysTickSetClockSource(CY_SYS_SYST_CSR_CLK_SRC_SYSCLK);
 2147              		.loc 1 2669 0
 2148 002c 0120     		movs	r0, #1
 2149 002e FFF7FEFF 		bl	CySysTickSetClockSource
2670:Generated_Source\PSoC4/CyLib.c ****     #endif /* (CY_SYSTICK_LFCLK_SOURCE) */
2671:Generated_Source\PSoC4/CyLib.c **** 
2672:Generated_Source\PSoC4/CyLib.c ****     CySysTickSetReload(cydelayFreqHz/1000u);
 2150              		.loc 1 2672 0
 2151 0032 0A4B     		ldr	r3, .L133+8
 2152 0034 1A68     		ldr	r2, [r3]
 2153 0036 FA23     		movs	r3, #250
 2154 0038 9900     		lsls	r1, r3, #2
 2155 003a 1000     		movs	r0, r2
 2156 003c FFF7FEFF 		bl	__aeabi_uidiv
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 86


 2157 0040 0300     		movs	r3, r0
 2158 0042 1800     		movs	r0, r3
 2159 0044 FFF7FEFF 		bl	CySysTickSetReload
2673:Generated_Source\PSoC4/CyLib.c ****     CySysTickClear();
 2160              		.loc 1 2673 0
 2161 0048 FFF7FEFF 		bl	CySysTickClear
2674:Generated_Source\PSoC4/CyLib.c **** }
 2162              		.loc 1 2674 0
 2163 004c C046     		nop
 2164 004e BD46     		mov	sp, r7
 2165 0050 02B0     		add	sp, sp, #8
 2166              		@ sp needed
 2167 0052 80BD     		pop	{r7, pc}
 2168              	.L134:
 2169              		.align	2
 2170              	.L133:
 2171 0054 00000000 		.word	CySysTickCallbacks
 2172 0058 00000000 		.word	CySysTickServiceCallbacks
 2173 005c 00000000 		.word	cydelayFreqHz
 2174              		.cfi_endproc
 2175              	.LFE37:
 2176              		.size	CySysTickInit, .-CySysTickInit
 2177              		.section	.text.CySysTickEnable,"ax",%progbits
 2178              		.align	2
 2179              		.global	CySysTickEnable
 2180              		.code	16
 2181              		.thumb_func
 2182              		.type	CySysTickEnable, %function
 2183              	CySysTickEnable:
 2184              	.LFB38:
2675:Generated_Source\PSoC4/CyLib.c **** 
2676:Generated_Source\PSoC4/CyLib.c **** 
2677:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2678:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickEnable
2679:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2680:Generated_Source\PSoC4/CyLib.c **** *
2681:Generated_Source\PSoC4/CyLib.c **** *  Enables the SysTick timer and its interrupt.
2682:Generated_Source\PSoC4/CyLib.c **** *
2683:Generated_Source\PSoC4/CyLib.c **** * \sideeffect
2684:Generated_Source\PSoC4/CyLib.c **** *  Clears SysTick count flag if it was set
2685:Generated_Source\PSoC4/CyLib.c **** *
2686:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2687:Generated_Source\PSoC4/CyLib.c **** void CySysTickEnable(void)
2688:Generated_Source\PSoC4/CyLib.c **** {
 2185              		.loc 1 2688 0
 2186              		.cfi_startproc
 2187              		@ args = 0, pretend = 0, frame = 0
 2188              		@ frame_needed = 1, uses_anonymous_args = 0
 2189 0000 80B5     		push	{r7, lr}
 2190              		.cfi_def_cfa_offset 8
 2191              		.cfi_offset 7, -8
 2192              		.cfi_offset 14, -4
 2193 0002 00AF     		add	r7, sp, #0
 2194              		.cfi_def_cfa_register 7
2689:Generated_Source\PSoC4/CyLib.c ****     CySysTickEnableInterrupt();
 2195              		.loc 1 2689 0
 2196 0004 FFF7FEFF 		bl	CySysTickEnableInterrupt
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 87


2690:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_SYST_CSR_REG |= CY_SYS_SYST_CSR_ENABLE;
 2197              		.loc 1 2690 0
 2198 0008 044B     		ldr	r3, .L136
 2199 000a 044A     		ldr	r2, .L136
 2200 000c 1268     		ldr	r2, [r2]
 2201 000e 0121     		movs	r1, #1
 2202 0010 0A43     		orrs	r2, r1
 2203 0012 1A60     		str	r2, [r3]
2691:Generated_Source\PSoC4/CyLib.c **** }
 2204              		.loc 1 2691 0
 2205 0014 C046     		nop
 2206 0016 BD46     		mov	sp, r7
 2207              		@ sp needed
 2208 0018 80BD     		pop	{r7, pc}
 2209              	.L137:
 2210 001a C046     		.align	2
 2211              	.L136:
 2212 001c 10E000E0 		.word	-536813552
 2213              		.cfi_endproc
 2214              	.LFE38:
 2215              		.size	CySysTickEnable, .-CySysTickEnable
 2216              		.section	.text.CySysTickStop,"ax",%progbits
 2217              		.align	2
 2218              		.global	CySysTickStop
 2219              		.code	16
 2220              		.thumb_func
 2221              		.type	CySysTickStop, %function
 2222              	CySysTickStop:
 2223              	.LFB39:
2692:Generated_Source\PSoC4/CyLib.c **** 
2693:Generated_Source\PSoC4/CyLib.c **** 
2694:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2695:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickStop
2696:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2697:Generated_Source\PSoC4/CyLib.c **** *
2698:Generated_Source\PSoC4/CyLib.c **** *  Stops the system timer (SysTick).
2699:Generated_Source\PSoC4/CyLib.c **** *
2700:Generated_Source\PSoC4/CyLib.c **** * \sideeffect
2701:Generated_Source\PSoC4/CyLib.c **** *  Clears SysTick count flag if it was set
2702:Generated_Source\PSoC4/CyLib.c **** *
2703:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2704:Generated_Source\PSoC4/CyLib.c **** void CySysTickStop(void)
2705:Generated_Source\PSoC4/CyLib.c **** {
 2224              		.loc 1 2705 0
 2225              		.cfi_startproc
 2226              		@ args = 0, pretend = 0, frame = 0
 2227              		@ frame_needed = 1, uses_anonymous_args = 0
 2228 0000 80B5     		push	{r7, lr}
 2229              		.cfi_def_cfa_offset 8
 2230              		.cfi_offset 7, -8
 2231              		.cfi_offset 14, -4
 2232 0002 00AF     		add	r7, sp, #0
 2233              		.cfi_def_cfa_register 7
2706:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_SYST_CSR_REG &= ((uint32) ~(CY_SYS_SYST_CSR_ENABLE));
 2234              		.loc 1 2706 0
 2235 0004 044B     		ldr	r3, .L139
 2236 0006 044A     		ldr	r2, .L139
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 88


 2237 0008 1268     		ldr	r2, [r2]
 2238 000a 0121     		movs	r1, #1
 2239 000c 8A43     		bics	r2, r1
 2240 000e 1A60     		str	r2, [r3]
2707:Generated_Source\PSoC4/CyLib.c **** }
 2241              		.loc 1 2707 0
 2242 0010 C046     		nop
 2243 0012 BD46     		mov	sp, r7
 2244              		@ sp needed
 2245 0014 80BD     		pop	{r7, pc}
 2246              	.L140:
 2247 0016 C046     		.align	2
 2248              	.L139:
 2249 0018 10E000E0 		.word	-536813552
 2250              		.cfi_endproc
 2251              	.LFE39:
 2252              		.size	CySysTickStop, .-CySysTickStop
 2253              		.section	.text.CySysTickEnableInterrupt,"ax",%progbits
 2254              		.align	2
 2255              		.global	CySysTickEnableInterrupt
 2256              		.code	16
 2257              		.thumb_func
 2258              		.type	CySysTickEnableInterrupt, %function
 2259              	CySysTickEnableInterrupt:
 2260              	.LFB40:
2708:Generated_Source\PSoC4/CyLib.c **** 
2709:Generated_Source\PSoC4/CyLib.c **** 
2710:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2711:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickEnableInterrupt
2712:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2713:Generated_Source\PSoC4/CyLib.c **** *
2714:Generated_Source\PSoC4/CyLib.c **** *  Enables the SysTick interrupt.
2715:Generated_Source\PSoC4/CyLib.c **** *
2716:Generated_Source\PSoC4/CyLib.c **** * \sideeffect
2717:Generated_Source\PSoC4/CyLib.c **** *  Clears SysTick count flag if it was set
2718:Generated_Source\PSoC4/CyLib.c **** *
2719:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2720:Generated_Source\PSoC4/CyLib.c **** void CySysTickEnableInterrupt(void)
2721:Generated_Source\PSoC4/CyLib.c **** {
 2261              		.loc 1 2721 0
 2262              		.cfi_startproc
 2263              		@ args = 0, pretend = 0, frame = 0
 2264              		@ frame_needed = 1, uses_anonymous_args = 0
 2265 0000 80B5     		push	{r7, lr}
 2266              		.cfi_def_cfa_offset 8
 2267              		.cfi_offset 7, -8
 2268              		.cfi_offset 14, -4
 2269 0002 00AF     		add	r7, sp, #0
 2270              		.cfi_def_cfa_register 7
2722:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_SYST_CSR_REG |= CY_SYS_SYST_CSR_ENABLE_INT;
 2271              		.loc 1 2722 0
 2272 0004 044B     		ldr	r3, .L142
 2273 0006 044A     		ldr	r2, .L142
 2274 0008 1268     		ldr	r2, [r2]
 2275 000a 0221     		movs	r1, #2
 2276 000c 0A43     		orrs	r2, r1
 2277 000e 1A60     		str	r2, [r3]
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 89


2723:Generated_Source\PSoC4/CyLib.c **** }
 2278              		.loc 1 2723 0
 2279 0010 C046     		nop
 2280 0012 BD46     		mov	sp, r7
 2281              		@ sp needed
 2282 0014 80BD     		pop	{r7, pc}
 2283              	.L143:
 2284 0016 C046     		.align	2
 2285              	.L142:
 2286 0018 10E000E0 		.word	-536813552
 2287              		.cfi_endproc
 2288              	.LFE40:
 2289              		.size	CySysTickEnableInterrupt, .-CySysTickEnableInterrupt
 2290              		.section	.text.CySysTickDisableInterrupt,"ax",%progbits
 2291              		.align	2
 2292              		.global	CySysTickDisableInterrupt
 2293              		.code	16
 2294              		.thumb_func
 2295              		.type	CySysTickDisableInterrupt, %function
 2296              	CySysTickDisableInterrupt:
 2297              	.LFB41:
2724:Generated_Source\PSoC4/CyLib.c **** 
2725:Generated_Source\PSoC4/CyLib.c **** 
2726:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2727:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickDisableInterrupt
2728:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2729:Generated_Source\PSoC4/CyLib.c **** *
2730:Generated_Source\PSoC4/CyLib.c **** *  Disables the SysTick interrupt.
2731:Generated_Source\PSoC4/CyLib.c **** *
2732:Generated_Source\PSoC4/CyLib.c **** * \sideeffect
2733:Generated_Source\PSoC4/CyLib.c **** *  Clears SysTick count flag if it was set
2734:Generated_Source\PSoC4/CyLib.c **** *
2735:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2736:Generated_Source\PSoC4/CyLib.c **** void CySysTickDisableInterrupt(void)
2737:Generated_Source\PSoC4/CyLib.c **** {
 2298              		.loc 1 2737 0
 2299              		.cfi_startproc
 2300              		@ args = 0, pretend = 0, frame = 0
 2301              		@ frame_needed = 1, uses_anonymous_args = 0
 2302 0000 80B5     		push	{r7, lr}
 2303              		.cfi_def_cfa_offset 8
 2304              		.cfi_offset 7, -8
 2305              		.cfi_offset 14, -4
 2306 0002 00AF     		add	r7, sp, #0
 2307              		.cfi_def_cfa_register 7
2738:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_SYST_CSR_REG &= ((uint32) ~(CY_SYS_SYST_CSR_ENABLE_INT));
 2308              		.loc 1 2738 0
 2309 0004 044B     		ldr	r3, .L145
 2310 0006 044A     		ldr	r2, .L145
 2311 0008 1268     		ldr	r2, [r2]
 2312 000a 0221     		movs	r1, #2
 2313 000c 8A43     		bics	r2, r1
 2314 000e 1A60     		str	r2, [r3]
2739:Generated_Source\PSoC4/CyLib.c **** }
 2315              		.loc 1 2739 0
 2316 0010 C046     		nop
 2317 0012 BD46     		mov	sp, r7
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 90


 2318              		@ sp needed
 2319 0014 80BD     		pop	{r7, pc}
 2320              	.L146:
 2321 0016 C046     		.align	2
 2322              	.L145:
 2323 0018 10E000E0 		.word	-536813552
 2324              		.cfi_endproc
 2325              	.LFE41:
 2326              		.size	CySysTickDisableInterrupt, .-CySysTickDisableInterrupt
 2327              		.section	.text.CySysTickSetReload,"ax",%progbits
 2328              		.align	2
 2329              		.global	CySysTickSetReload
 2330              		.code	16
 2331              		.thumb_func
 2332              		.type	CySysTickSetReload, %function
 2333              	CySysTickSetReload:
 2334              	.LFB42:
2740:Generated_Source\PSoC4/CyLib.c **** 
2741:Generated_Source\PSoC4/CyLib.c **** 
2742:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2743:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickSetReload
2744:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2745:Generated_Source\PSoC4/CyLib.c **** *
2746:Generated_Source\PSoC4/CyLib.c **** *  Sets value the counter is set to on startup and after it reaches zero. This
2747:Generated_Source\PSoC4/CyLib.c **** *  function do not change or reset current sysTick counter value, so it should
2748:Generated_Source\PSoC4/CyLib.c **** *  be cleared using CySysTickClear() API.
2749:Generated_Source\PSoC4/CyLib.c **** *
2750:Generated_Source\PSoC4/CyLib.c **** *  \param value: Valid range [0x0-0x00FFFFFF]. Counter reset value
2751:Generated_Source\PSoC4/CyLib.c **** *
2752:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2753:Generated_Source\PSoC4/CyLib.c **** void CySysTickSetReload(uint32 value)
2754:Generated_Source\PSoC4/CyLib.c **** {
 2335              		.loc 1 2754 0
 2336              		.cfi_startproc
 2337              		@ args = 0, pretend = 0, frame = 8
 2338              		@ frame_needed = 1, uses_anonymous_args = 0
 2339 0000 80B5     		push	{r7, lr}
 2340              		.cfi_def_cfa_offset 8
 2341              		.cfi_offset 7, -8
 2342              		.cfi_offset 14, -4
 2343 0002 82B0     		sub	sp, sp, #8
 2344              		.cfi_def_cfa_offset 16
 2345 0004 00AF     		add	r7, sp, #0
 2346              		.cfi_def_cfa_register 7
 2347 0006 7860     		str	r0, [r7, #4]
2755:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_SYST_RVR_REG = (value & CY_SYS_SYST_RVR_CNT_MASK);
 2348              		.loc 1 2755 0
 2349 0008 044B     		ldr	r3, .L148
 2350 000a 7A68     		ldr	r2, [r7, #4]
 2351 000c 1202     		lsls	r2, r2, #8
 2352 000e 120A     		lsrs	r2, r2, #8
 2353 0010 1A60     		str	r2, [r3]
2756:Generated_Source\PSoC4/CyLib.c **** }
 2354              		.loc 1 2756 0
 2355 0012 C046     		nop
 2356 0014 BD46     		mov	sp, r7
 2357 0016 02B0     		add	sp, sp, #8
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 91


 2358              		@ sp needed
 2359 0018 80BD     		pop	{r7, pc}
 2360              	.L149:
 2361 001a C046     		.align	2
 2362              	.L148:
 2363 001c 14E000E0 		.word	-536813548
 2364              		.cfi_endproc
 2365              	.LFE42:
 2366              		.size	CySysTickSetReload, .-CySysTickSetReload
 2367              		.section	.text.CySysTickGetReload,"ax",%progbits
 2368              		.align	2
 2369              		.global	CySysTickGetReload
 2370              		.code	16
 2371              		.thumb_func
 2372              		.type	CySysTickGetReload, %function
 2373              	CySysTickGetReload:
 2374              	.LFB43:
2757:Generated_Source\PSoC4/CyLib.c **** 
2758:Generated_Source\PSoC4/CyLib.c **** 
2759:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2760:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickGetReload
2761:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2762:Generated_Source\PSoC4/CyLib.c **** *
2763:Generated_Source\PSoC4/CyLib.c **** *  Gets value the counter is set to on startup and after it reaches zero.
2764:Generated_Source\PSoC4/CyLib.c **** *
2765:Generated_Source\PSoC4/CyLib.c **** * \return
2766:Generated_Source\PSoC4/CyLib.c **** *  Counter reset value.
2767:Generated_Source\PSoC4/CyLib.c **** *
2768:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2769:Generated_Source\PSoC4/CyLib.c **** uint32 CySysTickGetReload(void)
2770:Generated_Source\PSoC4/CyLib.c **** {
 2375              		.loc 1 2770 0
 2376              		.cfi_startproc
 2377              		@ args = 0, pretend = 0, frame = 0
 2378              		@ frame_needed = 1, uses_anonymous_args = 0
 2379 0000 80B5     		push	{r7, lr}
 2380              		.cfi_def_cfa_offset 8
 2381              		.cfi_offset 7, -8
 2382              		.cfi_offset 14, -4
 2383 0002 00AF     		add	r7, sp, #0
 2384              		.cfi_def_cfa_register 7
2771:Generated_Source\PSoC4/CyLib.c ****     return(CY_SYS_SYST_RVR_REG & CY_SYS_SYST_RVR_CNT_MASK);
 2385              		.loc 1 2771 0
 2386 0004 034B     		ldr	r3, .L152
 2387 0006 1B68     		ldr	r3, [r3]
 2388 0008 1B02     		lsls	r3, r3, #8
 2389 000a 1B0A     		lsrs	r3, r3, #8
2772:Generated_Source\PSoC4/CyLib.c **** }
 2390              		.loc 1 2772 0
 2391 000c 1800     		movs	r0, r3
 2392 000e BD46     		mov	sp, r7
 2393              		@ sp needed
 2394 0010 80BD     		pop	{r7, pc}
 2395              	.L153:
 2396 0012 C046     		.align	2
 2397              	.L152:
 2398 0014 14E000E0 		.word	-536813548
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 92


 2399              		.cfi_endproc
 2400              	.LFE43:
 2401              		.size	CySysTickGetReload, .-CySysTickGetReload
 2402              		.section	.text.CySysTickGetValue,"ax",%progbits
 2403              		.align	2
 2404              		.global	CySysTickGetValue
 2405              		.code	16
 2406              		.thumb_func
 2407              		.type	CySysTickGetValue, %function
 2408              	CySysTickGetValue:
 2409              	.LFB44:
2773:Generated_Source\PSoC4/CyLib.c **** 
2774:Generated_Source\PSoC4/CyLib.c **** 
2775:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2776:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickGetValue
2777:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2778:Generated_Source\PSoC4/CyLib.c **** *
2779:Generated_Source\PSoC4/CyLib.c **** *  Gets current SysTick counter value.
2780:Generated_Source\PSoC4/CyLib.c **** *
2781:Generated_Source\PSoC4/CyLib.c **** * \return
2782:Generated_Source\PSoC4/CyLib.c **** *  Current SysTick counter value
2783:Generated_Source\PSoC4/CyLib.c **** *
2784:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2785:Generated_Source\PSoC4/CyLib.c **** uint32 CySysTickGetValue(void)
2786:Generated_Source\PSoC4/CyLib.c **** {
 2410              		.loc 1 2786 0
 2411              		.cfi_startproc
 2412              		@ args = 0, pretend = 0, frame = 0
 2413              		@ frame_needed = 1, uses_anonymous_args = 0
 2414 0000 80B5     		push	{r7, lr}
 2415              		.cfi_def_cfa_offset 8
 2416              		.cfi_offset 7, -8
 2417              		.cfi_offset 14, -4
 2418 0002 00AF     		add	r7, sp, #0
 2419              		.cfi_def_cfa_register 7
2787:Generated_Source\PSoC4/CyLib.c ****     return(CY_SYS_SYST_CVR_REG & CY_SYS_SYST_CVR_CNT_MASK);
 2420              		.loc 1 2787 0
 2421 0004 034B     		ldr	r3, .L156
 2422 0006 1B68     		ldr	r3, [r3]
 2423 0008 1B02     		lsls	r3, r3, #8
 2424 000a 1B0A     		lsrs	r3, r3, #8
2788:Generated_Source\PSoC4/CyLib.c **** }
 2425              		.loc 1 2788 0
 2426 000c 1800     		movs	r0, r3
 2427 000e BD46     		mov	sp, r7
 2428              		@ sp needed
 2429 0010 80BD     		pop	{r7, pc}
 2430              	.L157:
 2431 0012 C046     		.align	2
 2432              	.L156:
 2433 0014 18E000E0 		.word	-536813544
 2434              		.cfi_endproc
 2435              	.LFE44:
 2436              		.size	CySysTickGetValue, .-CySysTickGetValue
 2437              		.section	.text.CySysTickSetClockSource,"ax",%progbits
 2438              		.align	2
 2439              		.global	CySysTickSetClockSource
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 93


 2440              		.code	16
 2441              		.thumb_func
 2442              		.type	CySysTickSetClockSource, %function
 2443              	CySysTickSetClockSource:
 2444              	.LFB45:
2789:Generated_Source\PSoC4/CyLib.c **** 
2790:Generated_Source\PSoC4/CyLib.c **** 
2791:Generated_Source\PSoC4/CyLib.c **** #if(CY_SYSTICK_LFCLK_SOURCE)
2792:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
2793:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysTickSetClockSource
2794:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
2795:Generated_Source\PSoC4/CyLib.c ****     *
2796:Generated_Source\PSoC4/CyLib.c ****     *  Sets the clock source for the SysTick counter.
2797:Generated_Source\PSoC4/CyLib.c ****     *
2798:Generated_Source\PSoC4/CyLib.c ****     *  Clears SysTick count flag if it was set. If clock source is not ready this
2799:Generated_Source\PSoC4/CyLib.c ****     *  function call will have no effect. After changing clock source to the low
2800:Generated_Source\PSoC4/CyLib.c ****     *  frequency clock the counter and reload register values will remain unchanged
2801:Generated_Source\PSoC4/CyLib.c ****     *  so time to the interrupt will be significantly longer and vice versa.
2802:Generated_Source\PSoC4/CyLib.c ****     *
2803:Generated_Source\PSoC4/CyLib.c ****     *  The changing of SysTick clock source and\or its frequency will change 
2804:Generated_Source\PSoC4/CyLib.c ****     *  the interrupt interval and that CySysTickSetReload() should be 
2805:Generated_Source\PSoC4/CyLib.c ****     *  called to compensate this change.    
2806:Generated_Source\PSoC4/CyLib.c ****     *
2807:Generated_Source\PSoC4/CyLib.c ****     *  The function is not available on PSoC 4000, PSoC 4100, and PSoC 42000
2808:Generated_Source\PSoC4/CyLib.c ****     *  devices. The SysTick timer clocked by the System clock on these devices.
2809:Generated_Source\PSoC4/CyLib.c ****     *
2810:Generated_Source\PSoC4/CyLib.c ****     *  \param clockSource Clock source for SysTick counter
2811:Generated_Source\PSoC4/CyLib.c ****     *         Define                     Clock Source
2812:Generated_Source\PSoC4/CyLib.c ****     *   CY_SYS_SYST_CSR_CLK_SRC_SYSCLK     SysTick is clocked by the CPU clock.
2813:Generated_Source\PSoC4/CyLib.c ****     *   CY_SYS_SYST_CSR_CLK_SRC_LFCLK      SysTick is clocked by the low frequency
2814:Generated_Source\PSoC4/CyLib.c ****     *                                      clock. (ILO 100 KHz for PSoC 5LP, and
2815:Generated_Source\PSoC4/CyLib.c ****     *                                      LFCLK for PSoC 4).
2816:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
2817:Generated_Source\PSoC4/CyLib.c ****     void CySysTickSetClockSource(uint32 clockSource)
2818:Generated_Source\PSoC4/CyLib.c ****     {
 2445              		.loc 1 2818 0
 2446              		.cfi_startproc
 2447              		@ args = 0, pretend = 0, frame = 8
 2448              		@ frame_needed = 1, uses_anonymous_args = 0
 2449 0000 80B5     		push	{r7, lr}
 2450              		.cfi_def_cfa_offset 8
 2451              		.cfi_offset 7, -8
 2452              		.cfi_offset 14, -4
 2453 0002 82B0     		sub	sp, sp, #8
 2454              		.cfi_def_cfa_offset 16
 2455 0004 00AF     		add	r7, sp, #0
 2456              		.cfi_def_cfa_register 7
 2457 0006 7860     		str	r0, [r7, #4]
2819:Generated_Source\PSoC4/CyLib.c ****         if (clockSource == CY_SYS_SYST_CSR_CLK_SRC_SYSCLK)
 2458              		.loc 1 2819 0
 2459 0008 7B68     		ldr	r3, [r7, #4]
 2460 000a 012B     		cmp	r3, #1
 2461 000c 06D1     		bne	.L159
2820:Generated_Source\PSoC4/CyLib.c ****         {
2821:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_SYST_CSR_REG |= (uint32)(CY_SYS_SYST_CSR_CLK_SRC_SYSCLK << CY_SYS_SYST_CSR_CLK_S
 2462              		.loc 1 2821 0
 2463 000e 084B     		ldr	r3, .L162
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 94


 2464 0010 074A     		ldr	r2, .L162
 2465 0012 1268     		ldr	r2, [r2]
 2466 0014 0421     		movs	r1, #4
 2467 0016 0A43     		orrs	r2, r1
 2468 0018 1A60     		str	r2, [r3]
2822:Generated_Source\PSoC4/CyLib.c ****         }
2823:Generated_Source\PSoC4/CyLib.c ****         else
2824:Generated_Source\PSoC4/CyLib.c ****         {
2825:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_SYST_CSR_REG &= ((uint32) ~((uint32)(CY_SYS_SYST_CSR_CLK_SRC_SYSCLK << CY_SYS_SY
2826:Generated_Source\PSoC4/CyLib.c ****         }
2827:Generated_Source\PSoC4/CyLib.c ****     }
 2469              		.loc 1 2827 0
 2470 001a 05E0     		b	.L161
 2471              	.L159:
2825:Generated_Source\PSoC4/CyLib.c ****         }
 2472              		.loc 1 2825 0
 2473 001c 044B     		ldr	r3, .L162
 2474 001e 044A     		ldr	r2, .L162
 2475 0020 1268     		ldr	r2, [r2]
 2476 0022 0421     		movs	r1, #4
 2477 0024 8A43     		bics	r2, r1
 2478 0026 1A60     		str	r2, [r3]
 2479              	.L161:
 2480              		.loc 1 2827 0
 2481 0028 C046     		nop
 2482 002a BD46     		mov	sp, r7
 2483 002c 02B0     		add	sp, sp, #8
 2484              		@ sp needed
 2485 002e 80BD     		pop	{r7, pc}
 2486              	.L163:
 2487              		.align	2
 2488              	.L162:
 2489 0030 10E000E0 		.word	-536813552
 2490              		.cfi_endproc
 2491              	.LFE45:
 2492              		.size	CySysTickSetClockSource, .-CySysTickSetClockSource
 2493              		.section	.text.CySysTickGetClockSource,"ax",%progbits
 2494              		.align	2
 2495              		.global	CySysTickGetClockSource
 2496              		.code	16
 2497              		.thumb_func
 2498              		.type	CySysTickGetClockSource, %function
 2499              	CySysTickGetClockSource:
 2500              	.LFB46:
2828:Generated_Source\PSoC4/CyLib.c **** 
2829:Generated_Source\PSoC4/CyLib.c ****     
2830:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
2831:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysTickGetClockSource
2832:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
2833:Generated_Source\PSoC4/CyLib.c ****     *
2834:Generated_Source\PSoC4/CyLib.c ****     *  Returns the current clock source of the SysTick counter.
2835:Generated_Source\PSoC4/CyLib.c ****     *
2836:Generated_Source\PSoC4/CyLib.c ****     *  \return 
2837:Generated_Source\PSoC4/CyLib.c ****     *   CY_SYS_SYST_CSR_CLK_SRC_SYSCLK     SysTick is clocked by CPU clock.
2838:Generated_Source\PSoC4/CyLib.c ****     *   CY_SYS_SYST_CSR_CLK_SRC_LFCLK      SysTick is clocked by the low frequency
2839:Generated_Source\PSoC4/CyLib.c ****     *                                      clock. (ILO 100 KHz for PSoC 5LP, and
2840:Generated_Source\PSoC4/CyLib.c ****     *                                      LFCLK for PSoC 4).
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 95


2841:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
2842:Generated_Source\PSoC4/CyLib.c ****     uint32 CySysTickGetClockSource(void)
2843:Generated_Source\PSoC4/CyLib.c ****     {
 2501              		.loc 1 2843 0
 2502              		.cfi_startproc
 2503              		@ args = 0, pretend = 0, frame = 0
 2504              		@ frame_needed = 1, uses_anonymous_args = 0
 2505 0000 80B5     		push	{r7, lr}
 2506              		.cfi_def_cfa_offset 8
 2507              		.cfi_offset 7, -8
 2508              		.cfi_offset 14, -4
 2509 0002 00AF     		add	r7, sp, #0
 2510              		.cfi_def_cfa_register 7
2844:Generated_Source\PSoC4/CyLib.c ****         return ((CY_SYS_SYST_CSR_REG >> CY_SYS_SYST_CSR_CLK_SOURCE_SHIFT) & CY_SYS_SYST_CSR_CLK_SRC
 2511              		.loc 1 2844 0
 2512 0004 034B     		ldr	r3, .L166
 2513 0006 1B68     		ldr	r3, [r3]
 2514 0008 9B08     		lsrs	r3, r3, #2
 2515 000a 0122     		movs	r2, #1
 2516 000c 1340     		ands	r3, r2
2845:Generated_Source\PSoC4/CyLib.c ****     }
 2517              		.loc 1 2845 0
 2518 000e 1800     		movs	r0, r3
 2519 0010 BD46     		mov	sp, r7
 2520              		@ sp needed
 2521 0012 80BD     		pop	{r7, pc}
 2522              	.L167:
 2523              		.align	2
 2524              	.L166:
 2525 0014 10E000E0 		.word	-536813552
 2526              		.cfi_endproc
 2527              	.LFE46:
 2528              		.size	CySysTickGetClockSource, .-CySysTickGetClockSource
 2529              		.section	.text.CySysTickGetCountFlag,"ax",%progbits
 2530              		.align	2
 2531              		.global	CySysTickGetCountFlag
 2532              		.code	16
 2533              		.thumb_func
 2534              		.type	CySysTickGetCountFlag, %function
 2535              	CySysTickGetCountFlag:
 2536              	.LFB47:
2846:Generated_Source\PSoC4/CyLib.c ****     
2847:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_SYSTICK_LFCLK_SOURCE) */
2848:Generated_Source\PSoC4/CyLib.c **** 
2849:Generated_Source\PSoC4/CyLib.c **** 
2850:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2851:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickGetCountFlag
2852:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2853:Generated_Source\PSoC4/CyLib.c **** *
2854:Generated_Source\PSoC4/CyLib.c **** *  The count flag is set once SysTick counter reaches zero.
2855:Generated_Source\PSoC4/CyLib.c **** *  The flag cleared on read.
2856:Generated_Source\PSoC4/CyLib.c **** *
2857:Generated_Source\PSoC4/CyLib.c **** * \return
2858:Generated_Source\PSoC4/CyLib.c ****     *  Returns non-zero value if flag is set, otherwise zero is returned.
2859:Generated_Source\PSoC4/CyLib.c **** *
2860:Generated_Source\PSoC4/CyLib.c **** *
2861:Generated_Source\PSoC4/CyLib.c **** * \sideeffect
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 96


2862:Generated_Source\PSoC4/CyLib.c **** *  Clears SysTick count flag if it was set.
2863:Generated_Source\PSoC4/CyLib.c **** *
2864:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2865:Generated_Source\PSoC4/CyLib.c **** uint32 CySysTickGetCountFlag(void)
2866:Generated_Source\PSoC4/CyLib.c **** {
 2537              		.loc 1 2866 0
 2538              		.cfi_startproc
 2539              		@ args = 0, pretend = 0, frame = 0
 2540              		@ frame_needed = 1, uses_anonymous_args = 0
 2541 0000 80B5     		push	{r7, lr}
 2542              		.cfi_def_cfa_offset 8
 2543              		.cfi_offset 7, -8
 2544              		.cfi_offset 14, -4
 2545 0002 00AF     		add	r7, sp, #0
 2546              		.cfi_def_cfa_register 7
2867:Generated_Source\PSoC4/CyLib.c ****     return ((CY_SYS_SYST_CSR_REG >> CY_SYS_SYST_CSR_COUNTFLAG_SHIFT) & 0x01u);
 2547              		.loc 1 2867 0
 2548 0004 034B     		ldr	r3, .L170
 2549 0006 1B68     		ldr	r3, [r3]
 2550 0008 1B0C     		lsrs	r3, r3, #16
 2551 000a 0122     		movs	r2, #1
 2552 000c 1340     		ands	r3, r2
2868:Generated_Source\PSoC4/CyLib.c **** }
 2553              		.loc 1 2868 0
 2554 000e 1800     		movs	r0, r3
 2555 0010 BD46     		mov	sp, r7
 2556              		@ sp needed
 2557 0012 80BD     		pop	{r7, pc}
 2558              	.L171:
 2559              		.align	2
 2560              	.L170:
 2561 0014 10E000E0 		.word	-536813552
 2562              		.cfi_endproc
 2563              	.LFE47:
 2564              		.size	CySysTickGetCountFlag, .-CySysTickGetCountFlag
 2565              		.section	.text.CySysTickClear,"ax",%progbits
 2566              		.align	2
 2567              		.global	CySysTickClear
 2568              		.code	16
 2569              		.thumb_func
 2570              		.type	CySysTickClear, %function
 2571              	CySysTickClear:
 2572              	.LFB48:
2869:Generated_Source\PSoC4/CyLib.c **** 
2870:Generated_Source\PSoC4/CyLib.c **** 
2871:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2872:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickClear
2873:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2874:Generated_Source\PSoC4/CyLib.c **** *
2875:Generated_Source\PSoC4/CyLib.c **** *  Clears the SysTick counter for well-defined startup.
2876:Generated_Source\PSoC4/CyLib.c **** *
2877:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2878:Generated_Source\PSoC4/CyLib.c **** void CySysTickClear(void)
2879:Generated_Source\PSoC4/CyLib.c **** {
 2573              		.loc 1 2879 0
 2574              		.cfi_startproc
 2575              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 97


 2576              		@ frame_needed = 1, uses_anonymous_args = 0
 2577 0000 80B5     		push	{r7, lr}
 2578              		.cfi_def_cfa_offset 8
 2579              		.cfi_offset 7, -8
 2580              		.cfi_offset 14, -4
 2581 0002 00AF     		add	r7, sp, #0
 2582              		.cfi_def_cfa_register 7
2880:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_SYST_CVR_REG = 0u;
 2583              		.loc 1 2880 0
 2584 0004 024B     		ldr	r3, .L173
 2585 0006 0022     		movs	r2, #0
 2586 0008 1A60     		str	r2, [r3]
2881:Generated_Source\PSoC4/CyLib.c **** }
 2587              		.loc 1 2881 0
 2588 000a C046     		nop
 2589 000c BD46     		mov	sp, r7
 2590              		@ sp needed
 2591 000e 80BD     		pop	{r7, pc}
 2592              	.L174:
 2593              		.align	2
 2594              	.L173:
 2595 0010 18E000E0 		.word	-536813544
 2596              		.cfi_endproc
 2597              	.LFE48:
 2598              		.size	CySysTickClear, .-CySysTickClear
 2599              		.section	.text.CySysTickSetCallback,"ax",%progbits
 2600              		.align	2
 2601              		.global	CySysTickSetCallback
 2602              		.code	16
 2603              		.thumb_func
 2604              		.type	CySysTickSetCallback, %function
 2605              	CySysTickSetCallback:
 2606              	.LFB49:
2882:Generated_Source\PSoC4/CyLib.c **** 
2883:Generated_Source\PSoC4/CyLib.c **** 
2884:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2885:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickSetCallback
2886:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2887:Generated_Source\PSoC4/CyLib.c **** *
2888:Generated_Source\PSoC4/CyLib.c **** *  This function allows up to five user-defined interrupt service routine
2889:Generated_Source\PSoC4/CyLib.c **** *  functions to be associated with the SysTick interrupt. These are specified
2890:Generated_Source\PSoC4/CyLib.c **** *  through the use of pointers to the function.
2891:Generated_Source\PSoC4/CyLib.c **** *
2892:Generated_Source\PSoC4/CyLib.c **** *  To set a custom callback function without the overhead of the system provided
2893:Generated_Source\PSoC4/CyLib.c **** *  one, use CyIntSetSysVector(CY_INT_SYSTICK_IRQN, cyisraddress <address>),
2894:Generated_Source\PSoC4/CyLib.c **** *  where <address> is address of the custom defined interrupt service routine.
2895:Generated_Source\PSoC4/CyLib.c **** *  Note: a custom callback function overrides the system defined callback
2896:Generated_Source\PSoC4/CyLib.c **** *  functions.
2897:Generated_Source\PSoC4/CyLib.c **** *
2898:Generated_Source\PSoC4/CyLib.c **** *  \param number: The number of the callback function addresses to be set. The valid
2899:Generated_Source\PSoC4/CyLib.c **** *          range is from 0 to 4.
2900:Generated_Source\PSoC4/CyLib.c **** *
2901:Generated_Source\PSoC4/CyLib.c **** *  void(*CallbackFunction(void): A pointer to the function that will be
2902:Generated_Source\PSoC4/CyLib.c **** *                                associated with the SysTick ISR for the
2903:Generated_Source\PSoC4/CyLib.c **** *                                specified number.
2904:Generated_Source\PSoC4/CyLib.c **** *
2905:Generated_Source\PSoC4/CyLib.c **** * \return
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 98


2906:Generated_Source\PSoC4/CyLib.c **** *  Returns the address of the previous callback function.
2907:Generated_Source\PSoC4/CyLib.c **** *  The NULL is returned if the specified address in not set.
2908:Generated_Source\PSoC4/CyLib.c **** *
2909:Generated_Source\PSoC4/CyLib.c **** * \sideeffect
2910:Generated_Source\PSoC4/CyLib.c **** *  The registered callback functions will be executed in the interrupt.
2911:Generated_Source\PSoC4/CyLib.c **** *
2912:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2913:Generated_Source\PSoC4/CyLib.c **** cySysTickCallback CySysTickSetCallback(uint32 number, cySysTickCallback function)
2914:Generated_Source\PSoC4/CyLib.c **** {
 2607              		.loc 1 2914 0
 2608              		.cfi_startproc
 2609              		@ args = 0, pretend = 0, frame = 16
 2610              		@ frame_needed = 1, uses_anonymous_args = 0
 2611 0000 80B5     		push	{r7, lr}
 2612              		.cfi_def_cfa_offset 8
 2613              		.cfi_offset 7, -8
 2614              		.cfi_offset 14, -4
 2615 0002 84B0     		sub	sp, sp, #16
 2616              		.cfi_def_cfa_offset 24
 2617 0004 00AF     		add	r7, sp, #0
 2618              		.cfi_def_cfa_register 7
 2619 0006 7860     		str	r0, [r7, #4]
 2620 0008 3960     		str	r1, [r7]
2915:Generated_Source\PSoC4/CyLib.c ****     cySysTickCallback retVal;
2916:Generated_Source\PSoC4/CyLib.c **** 
2917:Generated_Source\PSoC4/CyLib.c ****     retVal = CySysTickCallbacks[number];
 2621              		.loc 1 2917 0
 2622 000a 074B     		ldr	r3, .L177
 2623 000c 7A68     		ldr	r2, [r7, #4]
 2624 000e 9200     		lsls	r2, r2, #2
 2625 0010 D358     		ldr	r3, [r2, r3]
 2626 0012 FB60     		str	r3, [r7, #12]
2918:Generated_Source\PSoC4/CyLib.c ****     CySysTickCallbacks[number] = function;
 2627              		.loc 1 2918 0
 2628 0014 044B     		ldr	r3, .L177
 2629 0016 7A68     		ldr	r2, [r7, #4]
 2630 0018 9200     		lsls	r2, r2, #2
 2631 001a 3968     		ldr	r1, [r7]
 2632 001c D150     		str	r1, [r2, r3]
2919:Generated_Source\PSoC4/CyLib.c ****     return (retVal);
 2633              		.loc 1 2919 0
 2634 001e FB68     		ldr	r3, [r7, #12]
2920:Generated_Source\PSoC4/CyLib.c **** }
 2635              		.loc 1 2920 0
 2636 0020 1800     		movs	r0, r3
 2637 0022 BD46     		mov	sp, r7
 2638 0024 04B0     		add	sp, sp, #16
 2639              		@ sp needed
 2640 0026 80BD     		pop	{r7, pc}
 2641              	.L178:
 2642              		.align	2
 2643              	.L177:
 2644 0028 00000000 		.word	CySysTickCallbacks
 2645              		.cfi_endproc
 2646              	.LFE49:
 2647              		.size	CySysTickSetCallback, .-CySysTickSetCallback
 2648              		.section	.text.CySysTickGetCallback,"ax",%progbits
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 99


 2649              		.align	2
 2650              		.global	CySysTickGetCallback
 2651              		.code	16
 2652              		.thumb_func
 2653              		.type	CySysTickGetCallback, %function
 2654              	CySysTickGetCallback:
 2655              	.LFB50:
2921:Generated_Source\PSoC4/CyLib.c **** 
2922:Generated_Source\PSoC4/CyLib.c **** 
2923:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2924:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickGetCallback
2925:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2926:Generated_Source\PSoC4/CyLib.c **** *
2927:Generated_Source\PSoC4/CyLib.c **** *  The function get the specified callback pointer.
2928:Generated_Source\PSoC4/CyLib.c **** *
2929:Generated_Source\PSoC4/CyLib.c **** *  \param number: The number of callback function address to get. The valid
2930:Generated_Source\PSoC4/CyLib.c **** *          range is from 0 to 4.
2931:Generated_Source\PSoC4/CyLib.c **** *
2932:Generated_Source\PSoC4/CyLib.c **** * \return
2933:Generated_Source\PSoC4/CyLib.c **** *  Returns the address of the specified callback function.
2934:Generated_Source\PSoC4/CyLib.c **** *  The NULL is returned if the specified address in not initialized.
2935:Generated_Source\PSoC4/CyLib.c **** *
2936:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2937:Generated_Source\PSoC4/CyLib.c **** cySysTickCallback CySysTickGetCallback(uint32 number)
2938:Generated_Source\PSoC4/CyLib.c **** {
 2656              		.loc 1 2938 0
 2657              		.cfi_startproc
 2658              		@ args = 0, pretend = 0, frame = 8
 2659              		@ frame_needed = 1, uses_anonymous_args = 0
 2660 0000 80B5     		push	{r7, lr}
 2661              		.cfi_def_cfa_offset 8
 2662              		.cfi_offset 7, -8
 2663              		.cfi_offset 14, -4
 2664 0002 82B0     		sub	sp, sp, #8
 2665              		.cfi_def_cfa_offset 16
 2666 0004 00AF     		add	r7, sp, #0
 2667              		.cfi_def_cfa_register 7
 2668 0006 7860     		str	r0, [r7, #4]
2939:Generated_Source\PSoC4/CyLib.c ****     return ((cySysTickCallback) CySysTickCallbacks[number]);
 2669              		.loc 1 2939 0
 2670 0008 034B     		ldr	r3, .L181
 2671 000a 7A68     		ldr	r2, [r7, #4]
 2672 000c 9200     		lsls	r2, r2, #2
 2673 000e D358     		ldr	r3, [r2, r3]
2940:Generated_Source\PSoC4/CyLib.c **** }
 2674              		.loc 1 2940 0
 2675 0010 1800     		movs	r0, r3
 2676 0012 BD46     		mov	sp, r7
 2677 0014 02B0     		add	sp, sp, #8
 2678              		@ sp needed
 2679 0016 80BD     		pop	{r7, pc}
 2680              	.L182:
 2681              		.align	2
 2682              	.L181:
 2683 0018 00000000 		.word	CySysTickCallbacks
 2684              		.cfi_endproc
 2685              	.LFE50:
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 100


 2686              		.size	CySysTickGetCallback, .-CySysTickGetCallback
 2687              		.section	.text.CySysTickServiceCallbacks,"ax",%progbits
 2688              		.align	2
 2689              		.code	16
 2690              		.thumb_func
 2691              		.type	CySysTickServiceCallbacks, %function
 2692              	CySysTickServiceCallbacks:
 2693              	.LFB51:
2941:Generated_Source\PSoC4/CyLib.c **** 
2942:Generated_Source\PSoC4/CyLib.c **** 
2943:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2944:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickServiceCallbacks
2945:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2946:Generated_Source\PSoC4/CyLib.c **** *
2947:Generated_Source\PSoC4/CyLib.c **** *  System Tick timer interrupt routine
2948:Generated_Source\PSoC4/CyLib.c **** *
2949:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2950:Generated_Source\PSoC4/CyLib.c **** static void CySysTickServiceCallbacks(void)
2951:Generated_Source\PSoC4/CyLib.c **** {
 2694              		.loc 1 2951 0
 2695              		.cfi_startproc
 2696              		@ args = 0, pretend = 0, frame = 8
 2697              		@ frame_needed = 1, uses_anonymous_args = 0
 2698 0000 80B5     		push	{r7, lr}
 2699              		.cfi_def_cfa_offset 8
 2700              		.cfi_offset 7, -8
 2701              		.cfi_offset 14, -4
 2702 0002 82B0     		sub	sp, sp, #8
 2703              		.cfi_def_cfa_offset 16
 2704 0004 00AF     		add	r7, sp, #0
 2705              		.cfi_def_cfa_register 7
2952:Generated_Source\PSoC4/CyLib.c ****     uint32 i;
2953:Generated_Source\PSoC4/CyLib.c **** 
2954:Generated_Source\PSoC4/CyLib.c ****     /* Verify that tick timer flag was set */
2955:Generated_Source\PSoC4/CyLib.c ****     if (1u == CySysTickGetCountFlag())
 2706              		.loc 1 2955 0
 2707 0006 FFF7FEFF 		bl	CySysTickGetCountFlag
 2708 000a 0300     		movs	r3, r0
 2709 000c 012B     		cmp	r3, #1
 2710 000e 13D1     		bne	.L188
2956:Generated_Source\PSoC4/CyLib.c ****     {
2957:Generated_Source\PSoC4/CyLib.c ****         for (i=0u; i < CY_SYS_SYST_NUM_OF_CALLBACKS; i++)
 2711              		.loc 1 2957 0
 2712 0010 0023     		movs	r3, #0
 2713 0012 7B60     		str	r3, [r7, #4]
 2714 0014 0DE0     		b	.L185
 2715              	.L187:
2958:Generated_Source\PSoC4/CyLib.c ****         {
2959:Generated_Source\PSoC4/CyLib.c ****             if (CySysTickCallbacks[i] != (void *) 0)
 2716              		.loc 1 2959 0
 2717 0016 0A4B     		ldr	r3, .L189
 2718 0018 7A68     		ldr	r2, [r7, #4]
 2719 001a 9200     		lsls	r2, r2, #2
 2720 001c D358     		ldr	r3, [r2, r3]
 2721 001e 002B     		cmp	r3, #0
 2722 0020 04D0     		beq	.L186
2960:Generated_Source\PSoC4/CyLib.c ****             {
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 101


2961:Generated_Source\PSoC4/CyLib.c ****                 (void)(CySysTickCallbacks[i])();
 2723              		.loc 1 2961 0
 2724 0022 074B     		ldr	r3, .L189
 2725 0024 7A68     		ldr	r2, [r7, #4]
 2726 0026 9200     		lsls	r2, r2, #2
 2727 0028 D358     		ldr	r3, [r2, r3]
 2728 002a 9847     		blx	r3
 2729              	.L186:
2957:Generated_Source\PSoC4/CyLib.c ****         {
 2730              		.loc 1 2957 0 discriminator 2
 2731 002c 7B68     		ldr	r3, [r7, #4]
 2732 002e 0133     		adds	r3, r3, #1
 2733 0030 7B60     		str	r3, [r7, #4]
 2734              	.L185:
2957:Generated_Source\PSoC4/CyLib.c ****         {
 2735              		.loc 1 2957 0 is_stmt 0 discriminator 1
 2736 0032 7B68     		ldr	r3, [r7, #4]
 2737 0034 042B     		cmp	r3, #4
 2738 0036 EED9     		bls	.L187
 2739              	.L188:
2962:Generated_Source\PSoC4/CyLib.c ****             }
2963:Generated_Source\PSoC4/CyLib.c ****         }
2964:Generated_Source\PSoC4/CyLib.c ****     }
2965:Generated_Source\PSoC4/CyLib.c **** }
 2740              		.loc 1 2965 0 is_stmt 1
 2741 0038 C046     		nop
 2742 003a BD46     		mov	sp, r7
 2743 003c 02B0     		add	sp, sp, #8
 2744              		@ sp needed
 2745 003e 80BD     		pop	{r7, pc}
 2746              	.L190:
 2747              		.align	2
 2748              	.L189:
 2749 0040 00000000 		.word	CySysTickCallbacks
 2750              		.cfi_endproc
 2751              	.LFE51:
 2752              		.size	CySysTickServiceCallbacks, .-CySysTickServiceCallbacks
 2753              		.section	.text.CyGetUniqueId,"ax",%progbits
 2754              		.align	2
 2755              		.global	CyGetUniqueId
 2756              		.code	16
 2757              		.thumb_func
 2758              		.type	CyGetUniqueId, %function
 2759              	CyGetUniqueId:
 2760              	.LFB52:
2966:Generated_Source\PSoC4/CyLib.c **** 
2967:Generated_Source\PSoC4/CyLib.c **** 
2968:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2969:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyGetUniqueId
2970:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2971:Generated_Source\PSoC4/CyLib.c **** *
2972:Generated_Source\PSoC4/CyLib.c **** *  Returns the 64-bit unique ID of the device. The uniqueness of the number is
2973:Generated_Source\PSoC4/CyLib.c **** *  guaranteed for 10 years due to the die lot number having a cycle life of 10
2974:Generated_Source\PSoC4/CyLib.c **** *  years and even after 10 years, the probability of getting two identical
2975:Generated_Source\PSoC4/CyLib.c **** *  numbers is very small.
2976:Generated_Source\PSoC4/CyLib.c **** *
2977:Generated_Source\PSoC4/CyLib.c **** *  \param uniqueId: The pointer to a two element 32-bit unsigned integer array. Returns
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 102


2978:Generated_Source\PSoC4/CyLib.c **** *  the 64-bit unique ID of the device by loading them into the integer array
2979:Generated_Source\PSoC4/CyLib.c **** *  pointed to by uniqueId.
2980:Generated_Source\PSoC4/CyLib.c **** *
2981:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2982:Generated_Source\PSoC4/CyLib.c **** void CyGetUniqueId(uint32* uniqueId)
2983:Generated_Source\PSoC4/CyLib.c **** {
 2761              		.loc 1 2983 0
 2762              		.cfi_startproc
 2763              		@ args = 0, pretend = 0, frame = 8
 2764              		@ frame_needed = 1, uses_anonymous_args = 0
 2765 0000 80B5     		push	{r7, lr}
 2766              		.cfi_def_cfa_offset 8
 2767              		.cfi_offset 7, -8
 2768              		.cfi_offset 14, -4
 2769 0002 82B0     		sub	sp, sp, #8
 2770              		.cfi_def_cfa_offset 16
 2771 0004 00AF     		add	r7, sp, #0
 2772              		.cfi_def_cfa_register 7
 2773 0006 7860     		str	r0, [r7, #4]
2984:Generated_Source\PSoC4/CyLib.c **** #if(CY_PSOC4)
2985:Generated_Source\PSoC4/CyLib.c ****     uniqueId[0u]  =  (uint32)(* (reg8 *) CYREG_SFLASH_DIE_LOT0  );
 2774              		.loc 1 2985 0
 2775 0008 254B     		ldr	r3, .L192
 2776 000a 1B78     		ldrb	r3, [r3]
 2777 000c DBB2     		uxtb	r3, r3
 2778 000e 1A00     		movs	r2, r3
 2779 0010 7B68     		ldr	r3, [r7, #4]
 2780 0012 1A60     		str	r2, [r3]
2986:Generated_Source\PSoC4/CyLib.c ****     uniqueId[0u] |= ((uint32)(* (reg8 *) CYREG_SFLASH_DIE_LOT1  ) <<  8u);
 2781              		.loc 1 2986 0
 2782 0014 234B     		ldr	r3, .L192+4
 2783 0016 1B78     		ldrb	r3, [r3]
 2784 0018 DBB2     		uxtb	r3, r3
 2785 001a 1A02     		lsls	r2, r3, #8
 2786 001c 7B68     		ldr	r3, [r7, #4]
 2787 001e 1B68     		ldr	r3, [r3]
 2788 0020 1A43     		orrs	r2, r3
 2789 0022 7B68     		ldr	r3, [r7, #4]
 2790 0024 1A60     		str	r2, [r3]
2987:Generated_Source\PSoC4/CyLib.c ****     uniqueId[0u] |= ((uint32)(* (reg8 *) CYREG_SFLASH_DIE_LOT2  ) << 16u);
 2791              		.loc 1 2987 0
 2792 0026 204B     		ldr	r3, .L192+8
 2793 0028 1B78     		ldrb	r3, [r3]
 2794 002a DBB2     		uxtb	r3, r3
 2795 002c 1A04     		lsls	r2, r3, #16
 2796 002e 7B68     		ldr	r3, [r7, #4]
 2797 0030 1B68     		ldr	r3, [r3]
 2798 0032 1A43     		orrs	r2, r3
 2799 0034 7B68     		ldr	r3, [r7, #4]
 2800 0036 1A60     		str	r2, [r3]
2988:Generated_Source\PSoC4/CyLib.c ****     uniqueId[0u] |= ((uint32)(* (reg8 *) CYREG_SFLASH_DIE_WAFER ) << 24u);
 2801              		.loc 1 2988 0
 2802 0038 1C4B     		ldr	r3, .L192+12
 2803 003a 1B78     		ldrb	r3, [r3]
 2804 003c DBB2     		uxtb	r3, r3
 2805 003e 1A06     		lsls	r2, r3, #24
 2806 0040 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 103


 2807 0042 1B68     		ldr	r3, [r3]
 2808 0044 1A43     		orrs	r2, r3
 2809 0046 7B68     		ldr	r3, [r7, #4]
 2810 0048 1A60     		str	r2, [r3]
2989:Generated_Source\PSoC4/CyLib.c **** 
2990:Generated_Source\PSoC4/CyLib.c ****     uniqueId[1u]  =  (uint32)(* (reg8 *) CYREG_SFLASH_DIE_X     );
 2811              		.loc 1 2990 0
 2812 004a 7B68     		ldr	r3, [r7, #4]
 2813 004c 0433     		adds	r3, r3, #4
 2814 004e 184A     		ldr	r2, .L192+16
 2815 0050 1278     		ldrb	r2, [r2]
 2816 0052 D2B2     		uxtb	r2, r2
 2817 0054 1A60     		str	r2, [r3]
2991:Generated_Source\PSoC4/CyLib.c ****     uniqueId[1u] |= ((uint32)(* (reg8 *) CYREG_SFLASH_DIE_Y     ) <<  8u);
 2818              		.loc 1 2991 0
 2819 0056 174B     		ldr	r3, .L192+20
 2820 0058 1B78     		ldrb	r3, [r3]
 2821 005a DBB2     		uxtb	r3, r3
 2822 005c 1902     		lsls	r1, r3, #8
 2823 005e 7B68     		ldr	r3, [r7, #4]
 2824 0060 0433     		adds	r3, r3, #4
 2825 0062 7A68     		ldr	r2, [r7, #4]
 2826 0064 0432     		adds	r2, r2, #4
 2827 0066 1268     		ldr	r2, [r2]
 2828 0068 0A43     		orrs	r2, r1
 2829 006a 1A60     		str	r2, [r3]
2992:Generated_Source\PSoC4/CyLib.c ****     uniqueId[1u] |= ((uint32)(* (reg8 *) CYREG_SFLASH_DIE_SORT  ) << 16u);
 2830              		.loc 1 2992 0
 2831 006c 124B     		ldr	r3, .L192+24
 2832 006e 1B78     		ldrb	r3, [r3]
 2833 0070 DBB2     		uxtb	r3, r3
 2834 0072 1904     		lsls	r1, r3, #16
 2835 0074 7B68     		ldr	r3, [r7, #4]
 2836 0076 0433     		adds	r3, r3, #4
 2837 0078 7A68     		ldr	r2, [r7, #4]
 2838 007a 0432     		adds	r2, r2, #4
 2839 007c 1268     		ldr	r2, [r2]
 2840 007e 0A43     		orrs	r2, r1
 2841 0080 1A60     		str	r2, [r3]
2993:Generated_Source\PSoC4/CyLib.c ****     uniqueId[1u] |= ((uint32)(* (reg8 *) CYREG_SFLASH_DIE_MINOR ) << 24u);
 2842              		.loc 1 2993 0
 2843 0082 0E4B     		ldr	r3, .L192+28
 2844 0084 1B78     		ldrb	r3, [r3]
 2845 0086 DBB2     		uxtb	r3, r3
 2846 0088 1906     		lsls	r1, r3, #24
 2847 008a 7B68     		ldr	r3, [r7, #4]
 2848 008c 0433     		adds	r3, r3, #4
 2849 008e 7A68     		ldr	r2, [r7, #4]
 2850 0090 0432     		adds	r2, r2, #4
 2851 0092 1268     		ldr	r2, [r2]
 2852 0094 0A43     		orrs	r2, r1
 2853 0096 1A60     		str	r2, [r3]
2994:Generated_Source\PSoC4/CyLib.c **** #else
2995:Generated_Source\PSoC4/CyLib.c ****     uniqueId[0u]  =  (uint32) CY_GET_XTND_REG8((void CYFAR *) (CYREG_FLSHID_CUST_TABLES_LOT_LSB   )
2996:Generated_Source\PSoC4/CyLib.c ****     uniqueId[0u] |= ((uint32) CY_GET_XTND_REG8((void CYFAR *) (CYREG_FLSHID_CUST_TABLES_LOT_MSB   )
2997:Generated_Source\PSoC4/CyLib.c ****     uniqueId[0u] |= ((uint32) CY_GET_XTND_REG8((void CYFAR *) (CYREG_MLOGIC_REV_ID                )
2998:Generated_Source\PSoC4/CyLib.c ****     uniqueId[0u] |= ((uint32) CY_GET_XTND_REG8((void CYFAR *) (CYREG_FLSHID_CUST_TABLES_WAFER_NUM )
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 104


2999:Generated_Source\PSoC4/CyLib.c **** 
3000:Generated_Source\PSoC4/CyLib.c ****     uniqueId[1u]  =  (uint32) CY_GET_XTND_REG8((void CYFAR *) (CYREG_FLSHID_CUST_TABLES_X_LOC     )
3001:Generated_Source\PSoC4/CyLib.c ****     uniqueId[1u] |= ((uint32) CY_GET_XTND_REG8((void CYFAR *) (CYREG_FLSHID_CUST_TABLES_Y_LOC     )
3002:Generated_Source\PSoC4/CyLib.c ****     uniqueId[1u] |= ((uint32) CY_GET_XTND_REG8((void CYFAR *) (CYREG_FLSHID_CUST_TABLES_WRK_WK    )
3003:Generated_Source\PSoC4/CyLib.c ****     uniqueId[1u] |= ((uint32) CY_GET_XTND_REG8((void CYFAR *) (CYREG_FLSHID_CUST_TABLES_FAB_YR    )
3004:Generated_Source\PSoC4/CyLib.c **** #endif  /* (CY_PSOC4) */
3005:Generated_Source\PSoC4/CyLib.c **** }
 2854              		.loc 1 3005 0
 2855 0098 C046     		nop
 2856 009a BD46     		mov	sp, r7
 2857 009c 02B0     		add	sp, sp, #8
 2858              		@ sp needed
 2859 009e 80BD     		pop	{r7, pc}
 2860              	.L193:
 2861              		.align	2
 2862              	.L192:
 2863 00a0 78F1FF0F 		.word	268431736
 2864 00a4 79F1FF0F 		.word	268431737
 2865 00a8 7AF1FF0F 		.word	268431738
 2866 00ac 7BF1FF0F 		.word	268431739
 2867 00b0 7CF1FF0F 		.word	268431740
 2868 00b4 7DF1FF0F 		.word	268431741
 2869 00b8 7EF1FF0F 		.word	268431742
 2870 00bc 7FF1FF0F 		.word	268431743
 2871              		.cfi_endproc
 2872              	.LFE52:
 2873              		.size	CyGetUniqueId, .-CyGetUniqueId
 2874              		.text
 2875              	.Letext0:
 2876              		.file 2 "Generated_Source\\PSoC4\\cytypes.h"
 2877              		.file 3 "Generated_Source\\PSoC4\\CyLib.h"
 2878              		.section	.debug_info,"",%progbits
 2879              	.Ldebug_info0:
 2880 0000 7E0A0000 		.4byte	0xa7e
 2881 0004 0300     		.2byte	0x3
 2882 0006 00000000 		.4byte	.Ldebug_abbrev0
 2883 000a 04       		.byte	0x4
 2884 000b 01       		.uleb128 0x1
 2885 000c A3040000 		.4byte	.LASF109
 2886 0010 0C       		.byte	0xc
 2887 0011 B1060000 		.4byte	.LASF110
 2888 0015 FE050000 		.4byte	.LASF111
 2889 0019 00000000 		.4byte	.Ldebug_ranges0+0
 2890 001d 00000000 		.4byte	0
 2891 0021 00000000 		.4byte	0
 2892 0025 00000000 		.4byte	.Ldebug_line0
 2893 0029 02       		.uleb128 0x2
 2894 002a 01       		.byte	0x1
 2895 002b 06       		.byte	0x6
 2896 002c DB000000 		.4byte	.LASF0
 2897 0030 02       		.uleb128 0x2
 2898 0031 01       		.byte	0x1
 2899 0032 08       		.byte	0x8
 2900 0033 41040000 		.4byte	.LASF1
 2901 0037 02       		.uleb128 0x2
 2902 0038 02       		.byte	0x2
 2903 0039 05       		.byte	0x5
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 105


 2904 003a 4F040000 		.4byte	.LASF2
 2905 003e 02       		.uleb128 0x2
 2906 003f 02       		.byte	0x2
 2907 0040 07       		.byte	0x7
 2908 0041 A8020000 		.4byte	.LASF3
 2909 0045 02       		.uleb128 0x2
 2910 0046 04       		.byte	0x4
 2911 0047 05       		.byte	0x5
 2912 0048 1A010000 		.4byte	.LASF4
 2913 004c 02       		.uleb128 0x2
 2914 004d 04       		.byte	0x4
 2915 004e 07       		.byte	0x7
 2916 004f 32020000 		.4byte	.LASF5
 2917 0053 02       		.uleb128 0x2
 2918 0054 08       		.byte	0x8
 2919 0055 05       		.byte	0x5
 2920 0056 CD000000 		.4byte	.LASF6
 2921 005a 02       		.uleb128 0x2
 2922 005b 08       		.byte	0x8
 2923 005c 07       		.byte	0x7
 2924 005d 67000000 		.4byte	.LASF7
 2925 0061 03       		.uleb128 0x3
 2926 0062 04       		.byte	0x4
 2927 0063 05       		.byte	0x5
 2928 0064 696E7400 		.ascii	"int\000"
 2929 0068 02       		.uleb128 0x2
 2930 0069 04       		.byte	0x4
 2931 006a 07       		.byte	0x7
 2932 006b 16020000 		.4byte	.LASF8
 2933 006f 04       		.uleb128 0x4
 2934 0070 3A010000 		.4byte	.LASF9
 2935 0074 02       		.byte	0x2
 2936 0075 D201     		.2byte	0x1d2
 2937 0077 30000000 		.4byte	0x30
 2938 007b 04       		.uleb128 0x4
 2939 007c 0F000000 		.4byte	.LASF10
 2940 0080 02       		.byte	0x2
 2941 0081 D301     		.2byte	0x1d3
 2942 0083 3E000000 		.4byte	0x3e
 2943 0087 04       		.uleb128 0x4
 2944 0088 7A010000 		.4byte	.LASF11
 2945 008c 02       		.byte	0x2
 2946 008d D401     		.2byte	0x1d4
 2947 008f 4C000000 		.4byte	0x4c
 2948 0093 02       		.uleb128 0x2
 2949 0094 04       		.byte	0x4
 2950 0095 04       		.byte	0x4
 2951 0096 E8030000 		.4byte	.LASF12
 2952 009a 02       		.uleb128 0x2
 2953 009b 08       		.byte	0x8
 2954 009c 04       		.byte	0x4
 2955 009d 56010000 		.4byte	.LASF13
 2956 00a1 02       		.uleb128 0x2
 2957 00a2 01       		.byte	0x1
 2958 00a3 08       		.byte	0x8
 2959 00a4 3B050000 		.4byte	.LASF14
 2960 00a8 04       		.uleb128 0x4
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 106


 2961 00a9 97060000 		.4byte	.LASF15
 2962 00ad 02       		.byte	0x2
 2963 00ae 7402     		.2byte	0x274
 2964 00b0 4C000000 		.4byte	0x4c
 2965 00b4 04       		.uleb128 0x4
 2966 00b5 2B040000 		.4byte	.LASF16
 2967 00b9 02       		.byte	0x2
 2968 00ba 7C02     		.2byte	0x27c
 2969 00bc C0000000 		.4byte	0xc0
 2970 00c0 05       		.uleb128 0x5
 2971 00c1 6F000000 		.4byte	0x6f
 2972 00c5 04       		.uleb128 0x4
 2973 00c6 2E030000 		.4byte	.LASF17
 2974 00ca 02       		.byte	0x2
 2975 00cb 7E02     		.2byte	0x27e
 2976 00cd D1000000 		.4byte	0xd1
 2977 00d1 05       		.uleb128 0x5
 2978 00d2 87000000 		.4byte	0x87
 2979 00d6 04       		.uleb128 0x4
 2980 00d7 40050000 		.4byte	.LASF18
 2981 00db 02       		.byte	0x2
 2982 00dc 8E02     		.2byte	0x28e
 2983 00de E2000000 		.4byte	0xe2
 2984 00e2 06       		.uleb128 0x6
 2985 00e3 04       		.byte	0x4
 2986 00e4 E8000000 		.4byte	0xe8
 2987 00e8 07       		.uleb128 0x7
 2988 00e9 01       		.byte	0x1
 2989 00ea 02       		.uleb128 0x2
 2990 00eb 08       		.byte	0x8
 2991 00ec 04       		.byte	0x4
 2992 00ed 7C030000 		.4byte	.LASF19
 2993 00f1 02       		.uleb128 0x2
 2994 00f2 04       		.byte	0x4
 2995 00f3 07       		.byte	0x7
 2996 00f4 50030000 		.4byte	.LASF20
 2997 00f8 08       		.uleb128 0x8
 2998 00f9 FD030000 		.4byte	.LASF21
 2999 00fd 03       		.byte	0x3
 3000 00fe F5       		.byte	0xf5
 3001 00ff E2000000 		.4byte	0xe2
 3002 0103 09       		.uleb128 0x9
 3003 0104 01       		.byte	0x1
 3004 0105 A0060000 		.4byte	.LASF22
 3005 0109 01       		.byte	0x1
 3006 010a 6B       		.byte	0x6b
 3007 010b 01       		.byte	0x1
 3008 010c 00000000 		.4byte	.LFB2
 3009 0110 1C000000 		.4byte	.LFE2
 3010 0114 01       		.byte	0x1
 3011 0115 9C       		.byte	0x9c
 3012 0116 01       		.byte	0x1
 3013 0117 09       		.uleb128 0x9
 3014 0118 01       		.byte	0x1
 3015 0119 5F020000 		.4byte	.LASF23
 3016 011d 01       		.byte	0x1
 3017 011e 8B       		.byte	0x8b
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 107


 3018 011f 01       		.byte	0x1
 3019 0120 00000000 		.4byte	.LFB3
 3020 0124 1C000000 		.4byte	.LFE3
 3021 0128 01       		.byte	0x1
 3022 0129 9C       		.byte	0x9c
 3023 012a 01       		.byte	0x1
 3024 012b 0A       		.uleb128 0xa
 3025 012c 01       		.byte	0x1
 3026 012d 1F000000 		.4byte	.LASF26
 3027 0131 01       		.byte	0x1
 3028 0132 AD01     		.2byte	0x1ad
 3029 0134 01       		.byte	0x1
 3030 0135 00000000 		.4byte	.LFB4
 3031 0139 48000000 		.4byte	.LFE4
 3032 013d 01       		.byte	0x1
 3033 013e 9C       		.byte	0x9c
 3034 013f 01       		.byte	0x1
 3035 0140 72010000 		.4byte	0x172
 3036 0144 0B       		.uleb128 0xb
 3037 0145 77040000 		.4byte	.LASF28
 3038 0149 01       		.byte	0x1
 3039 014a AD01     		.2byte	0x1ad
 3040 014c 87000000 		.4byte	0x87
 3041 0150 02       		.byte	0x2
 3042 0151 91       		.byte	0x91
 3043 0152 64       		.sleb128 -28
 3044 0153 0C       		.uleb128 0xc
 3045 0154 F8000000 		.4byte	.LASF24
 3046 0158 01       		.byte	0x1
 3047 0159 AF01     		.2byte	0x1af
 3048 015b 6F000000 		.4byte	0x6f
 3049 015f 02       		.byte	0x2
 3050 0160 91       		.byte	0x91
 3051 0161 6F       		.sleb128 -17
 3052 0162 0C       		.uleb128 0xc
 3053 0163 DD060000 		.4byte	.LASF25
 3054 0167 01       		.byte	0x1
 3055 0168 B001     		.2byte	0x1b0
 3056 016a 87000000 		.4byte	0x87
 3057 016e 02       		.byte	0x2
 3058 016f 91       		.byte	0x91
 3059 0170 68       		.sleb128 -24
 3060 0171 00       		.byte	0
 3061 0172 0D       		.uleb128 0xd
 3062 0173 01       		.byte	0x1
 3063 0174 19030000 		.4byte	.LASF27
 3064 0178 01       		.byte	0x1
 3065 0179 D901     		.2byte	0x1d9
 3066 017b 01       		.byte	0x1
 3067 017c 00000000 		.4byte	.LFB5
 3068 0180 50000000 		.4byte	.LFE5
 3069 0184 01       		.byte	0x1
 3070 0185 9C       		.byte	0x9c
 3071 0186 01       		.byte	0x1
 3072 0187 9B010000 		.4byte	0x19b
 3073 018b 0B       		.uleb128 0xb
 3074 018c 4F010000 		.4byte	.LASF29
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 108


 3075 0190 01       		.byte	0x1
 3076 0191 D901     		.2byte	0x1d9
 3077 0193 87000000 		.4byte	0x87
 3078 0197 02       		.byte	0x2
 3079 0198 91       		.byte	0x91
 3080 0199 74       		.sleb128 -12
 3081 019a 00       		.byte	0
 3082 019b 0E       		.uleb128 0xe
 3083 019c 01       		.byte	0x1
 3084 019d 9C010000 		.4byte	.LASF37
 3085 01a1 01       		.byte	0x1
 3086 01a2 FE01     		.2byte	0x1fe
 3087 01a4 01       		.byte	0x1
 3088 01a5 87000000 		.4byte	0x87
 3089 01a9 00000000 		.4byte	.LFB6
 3090 01ad 34000000 		.4byte	.LFE6
 3091 01b1 01       		.byte	0x1
 3092 01b2 9C       		.byte	0x9c
 3093 01b3 01       		.byte	0x1
 3094 01b4 D7010000 		.4byte	0x1d7
 3095 01b8 0C       		.uleb128 0xc
 3096 01b9 F8000000 		.4byte	.LASF24
 3097 01bd 01       		.byte	0x1
 3098 01be 0002     		.2byte	0x200
 3099 01c0 6F000000 		.4byte	0x6f
 3100 01c4 02       		.byte	0x2
 3101 01c5 91       		.byte	0x91
 3102 01c6 6F       		.sleb128 -17
 3103 01c7 0C       		.uleb128 0xc
 3104 01c8 90030000 		.4byte	.LASF30
 3105 01cc 01       		.byte	0x1
 3106 01cd 0102     		.2byte	0x201
 3107 01cf 87000000 		.4byte	0x87
 3108 01d3 02       		.byte	0x2
 3109 01d4 91       		.byte	0x91
 3110 01d5 68       		.sleb128 -24
 3111 01d6 00       		.byte	0
 3112 01d7 0A       		.uleb128 0xa
 3113 01d8 01       		.byte	0x1
 3114 01d9 5D050000 		.4byte	.LASF31
 3115 01dd 01       		.byte	0x1
 3116 01de 3502     		.2byte	0x235
 3117 01e0 01       		.byte	0x1
 3118 01e1 00000000 		.4byte	.LFB7
 3119 01e5 48000000 		.4byte	.LFE7
 3120 01e9 01       		.byte	0x1
 3121 01ea 9C       		.byte	0x9c
 3122 01eb 01       		.byte	0x1
 3123 01ec 0F020000 		.4byte	0x20f
 3124 01f0 0B       		.uleb128 0xb
 3125 01f1 7B060000 		.4byte	.LASF32
 3126 01f5 01       		.byte	0x1
 3127 01f6 3502     		.2byte	0x235
 3128 01f8 87000000 		.4byte	0x87
 3129 01fc 02       		.byte	0x2
 3130 01fd 91       		.byte	0x91
 3131 01fe 64       		.sleb128 -28
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 109


 3132 01ff 0C       		.uleb128 0xc
 3133 0200 F8000000 		.4byte	.LASF24
 3134 0204 01       		.byte	0x1
 3135 0205 3702     		.2byte	0x237
 3136 0207 6F000000 		.4byte	0x6f
 3137 020b 02       		.byte	0x2
 3138 020c 91       		.byte	0x91
 3139 020d 6F       		.sleb128 -17
 3140 020e 00       		.byte	0
 3141 020f 0A       		.uleb128 0xa
 3142 0210 01       		.byte	0x1
 3143 0211 F2020000 		.4byte	.LASF33
 3144 0215 01       		.byte	0x1
 3145 0216 6F02     		.2byte	0x26f
 3146 0218 01       		.byte	0x1
 3147 0219 00000000 		.4byte	.LFB8
 3148 021d 9C000000 		.4byte	.LFE8
 3149 0221 01       		.byte	0x1
 3150 0222 9C       		.byte	0x9c
 3151 0223 01       		.byte	0x1
 3152 0224 65020000 		.4byte	0x265
 3153 0228 0B       		.uleb128 0xb
 3154 0229 E7000000 		.4byte	.LASF34
 3155 022d 01       		.byte	0x1
 3156 022e 6F02     		.2byte	0x26f
 3157 0230 87000000 		.4byte	0x87
 3158 0234 02       		.byte	0x2
 3159 0235 91       		.byte	0x91
 3160 0236 4C       		.sleb128 -52
 3161 0237 0C       		.uleb128 0xc
 3162 0238 7E000000 		.4byte	.LASF35
 3163 023c 01       		.byte	0x1
 3164 023d 7202     		.2byte	0x272
 3165 023f 75020000 		.4byte	0x275
 3166 0243 02       		.byte	0x2
 3167 0244 91       		.byte	0x91
 3168 0245 64       		.sleb128 -28
 3169 0246 0C       		.uleb128 0xc
 3170 0247 30010000 		.4byte	.LASF36
 3171 024b 01       		.byte	0x1
 3172 024c 7302     		.2byte	0x273
 3173 024e 8A020000 		.4byte	0x28a
 3174 0252 02       		.byte	0x2
 3175 0253 91       		.byte	0x91
 3176 0254 54       		.sleb128 -44
 3177 0255 0C       		.uleb128 0xc
 3178 0256 F8000000 		.4byte	.LASF24
 3179 025a 01       		.byte	0x1
 3180 025b 8402     		.2byte	0x284
 3181 025d 6F000000 		.4byte	0x6f
 3182 0261 02       		.byte	0x2
 3183 0262 91       		.byte	0x91
 3184 0263 6F       		.sleb128 -17
 3185 0264 00       		.byte	0
 3186 0265 0F       		.uleb128 0xf
 3187 0266 D1000000 		.4byte	0xd1
 3188 026a 75020000 		.4byte	0x275
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 110


 3189 026e 10       		.uleb128 0x10
 3190 026f F1000000 		.4byte	0xf1
 3191 0273 01       		.byte	0x1
 3192 0274 00       		.byte	0
 3193 0275 05       		.uleb128 0x5
 3194 0276 65020000 		.4byte	0x265
 3195 027a 0F       		.uleb128 0xf
 3196 027b D1000000 		.4byte	0xd1
 3197 027f 8A020000 		.4byte	0x28a
 3198 0283 10       		.uleb128 0x10
 3199 0284 F1000000 		.4byte	0xf1
 3200 0288 03       		.byte	0x3
 3201 0289 00       		.byte	0
 3202 028a 05       		.uleb128 0x5
 3203 028b 7A020000 		.4byte	0x27a
 3204 028f 0E       		.uleb128 0xe
 3205 0290 01       		.byte	0x1
 3206 0291 81040000 		.4byte	.LASF38
 3207 0295 01       		.byte	0x1
 3208 0296 0304     		.2byte	0x403
 3209 0298 01       		.byte	0x1
 3210 0299 A8000000 		.4byte	0xa8
 3211 029d 00000000 		.4byte	.LFB9
 3212 02a1 74000000 		.4byte	.LFE9
 3213 02a5 01       		.byte	0x1
 3214 02a6 9C       		.byte	0x9c
 3215 02a7 01       		.byte	0x1
 3216 02a8 CB020000 		.4byte	0x2cb
 3217 02ac 0B       		.uleb128 0xb
 3218 02ad 71060000 		.4byte	.LASF39
 3219 02b1 01       		.byte	0x1
 3220 02b2 0304     		.2byte	0x403
 3221 02b4 87000000 		.4byte	0x87
 3222 02b8 02       		.byte	0x2
 3223 02b9 91       		.byte	0x91
 3224 02ba 6C       		.sleb128 -20
 3225 02bb 0C       		.uleb128 0xc
 3226 02bc 43030000 		.4byte	.LASF40
 3227 02c0 01       		.byte	0x1
 3228 02c1 0504     		.2byte	0x405
 3229 02c3 A8000000 		.4byte	0xa8
 3230 02c7 02       		.byte	0x2
 3231 02c8 91       		.byte	0x91
 3232 02c9 74       		.sleb128 -12
 3233 02ca 00       		.byte	0
 3234 02cb 11       		.uleb128 0x11
 3235 02cc 01       		.byte	0x1
 3236 02cd 53060000 		.4byte	.LASF41
 3237 02d1 01       		.byte	0x1
 3238 02d2 9104     		.2byte	0x491
 3239 02d4 01       		.byte	0x1
 3240 02d5 00000000 		.4byte	.LFB10
 3241 02d9 30000000 		.4byte	.LFE10
 3242 02dd 01       		.byte	0x1
 3243 02de 9C       		.byte	0x9c
 3244 02df 01       		.byte	0x1
 3245 02e0 12       		.uleb128 0x12
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 111


 3246 02e1 01       		.byte	0x1
 3247 02e2 81010000 		.4byte	.LASF42
 3248 02e6 01       		.byte	0x1
 3249 02e7 B304     		.2byte	0x4b3
 3250 02e9 01       		.byte	0x1
 3251 02ea 87000000 		.4byte	0x87
 3252 02ee 00000000 		.4byte	.LFB11
 3253 02f2 20000000 		.4byte	.LFE11
 3254 02f6 01       		.byte	0x1
 3255 02f7 9C       		.byte	0x9c
 3256 02f8 01       		.byte	0x1
 3257 02f9 0D030000 		.4byte	0x30d
 3258 02fd 0C       		.uleb128 0xc
 3259 02fe 11070000 		.4byte	.LASF43
 3260 0302 01       		.byte	0x1
 3261 0303 B504     		.2byte	0x4b5
 3262 0305 87000000 		.4byte	0x87
 3263 0309 02       		.byte	0x2
 3264 030a 91       		.byte	0x91
 3265 030b 74       		.sleb128 -12
 3266 030c 00       		.byte	0
 3267 030d 0A       		.uleb128 0xa
 3268 030e 01       		.byte	0x1
 3269 030f 83060000 		.4byte	.LASF44
 3270 0313 01       		.byte	0x1
 3271 0314 E204     		.2byte	0x4e2
 3272 0316 01       		.byte	0x1
 3273 0317 00000000 		.4byte	.LFB12
 3274 031b 58000000 		.4byte	.LFE12
 3275 031f 01       		.byte	0x1
 3276 0320 9C       		.byte	0x9c
 3277 0321 01       		.byte	0x1
 3278 0322 45030000 		.4byte	0x345
 3279 0326 0B       		.uleb128 0xb
 3280 0327 7B060000 		.4byte	.LASF32
 3281 032b 01       		.byte	0x1
 3282 032c E204     		.2byte	0x4e2
 3283 032e 87000000 		.4byte	0x87
 3284 0332 02       		.byte	0x2
 3285 0333 91       		.byte	0x91
 3286 0334 64       		.sleb128 -28
 3287 0335 0C       		.uleb128 0xc
 3288 0336 F8000000 		.4byte	.LASF24
 3289 033a 01       		.byte	0x1
 3290 033b E404     		.2byte	0x4e4
 3291 033d 6F000000 		.4byte	0x6f
 3292 0341 02       		.byte	0x2
 3293 0342 91       		.byte	0x91
 3294 0343 6F       		.sleb128 -17
 3295 0344 00       		.byte	0
 3296 0345 0A       		.uleb128 0xa
 3297 0346 01       		.byte	0x1
 3298 0347 EE030000 		.4byte	.LASF45
 3299 034b 01       		.byte	0x1
 3300 034c 4608     		.2byte	0x846
 3301 034e 01       		.byte	0x1
 3302 034f 00000000 		.4byte	.LFB13
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 112


 3303 0353 64000000 		.4byte	.LFE13
 3304 0357 01       		.byte	0x1
 3305 0358 9C       		.byte	0x9c
 3306 0359 01       		.byte	0x1
 3307 035a 6E030000 		.4byte	0x36e
 3308 035e 0B       		.uleb128 0xb
 3309 035f 30040000 		.4byte	.LASF46
 3310 0363 01       		.byte	0x1
 3311 0364 4608     		.2byte	0x846
 3312 0366 87000000 		.4byte	0x87
 3313 036a 02       		.byte	0x2
 3314 036b 91       		.byte	0x91
 3315 036c 74       		.sleb128 -12
 3316 036d 00       		.byte	0
 3317 036e 11       		.uleb128 0x11
 3318 036f 01       		.byte	0x1
 3319 0370 DF050000 		.4byte	.LASF47
 3320 0374 01       		.byte	0x1
 3321 0375 6408     		.2byte	0x864
 3322 0377 01       		.byte	0x1
 3323 0378 00000000 		.4byte	.LFB14
 3324 037c 2C000000 		.4byte	.LFE14
 3325 0380 01       		.byte	0x1
 3326 0381 9C       		.byte	0x9c
 3327 0382 01       		.byte	0x1
 3328 0383 13       		.uleb128 0x13
 3329 0384 01       		.byte	0x1
 3330 0385 44020000 		.4byte	.LASF87
 3331 0389 01       		.byte	0x1
 3332 038a 7608     		.2byte	0x876
 3333 038c 01       		.byte	0x1
 3334 038d 87000000 		.4byte	0x87
 3335 0391 00000000 		.4byte	.LFB15
 3336 0395 18000000 		.4byte	.LFE15
 3337 0399 01       		.byte	0x1
 3338 039a 9C       		.byte	0x9c
 3339 039b 01       		.byte	0x1
 3340 039c 11       		.uleb128 0x11
 3341 039d 01       		.byte	0x1
 3342 039e 63010000 		.4byte	.LASF48
 3343 03a2 01       		.byte	0x1
 3344 03a3 8608     		.2byte	0x886
 3345 03a5 01       		.byte	0x1
 3346 03a6 00000000 		.4byte	.LFB16
 3347 03aa 14000000 		.4byte	.LFE16
 3348 03ae 01       		.byte	0x1
 3349 03af 9C       		.byte	0x9c
 3350 03b0 01       		.byte	0x1
 3351 03b1 12       		.uleb128 0x12
 3352 03b2 01       		.byte	0x1
 3353 03b3 94020000 		.4byte	.LASF49
 3354 03b7 01       		.byte	0x1
 3355 03b8 A008     		.2byte	0x8a0
 3356 03ba 01       		.byte	0x1
 3357 03bb 87000000 		.4byte	0x87
 3358 03bf 00000000 		.4byte	.LFB17
 3359 03c3 30000000 		.4byte	.LFE17
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 113


 3360 03c7 01       		.byte	0x1
 3361 03c8 9C       		.byte	0x9c
 3362 03c9 01       		.byte	0x1
 3363 03ca ED030000 		.4byte	0x3ed
 3364 03ce 0B       		.uleb128 0xb
 3365 03cf 9C040000 		.4byte	.LASF50
 3366 03d3 01       		.byte	0x1
 3367 03d4 A008     		.2byte	0x8a0
 3368 03d6 87000000 		.4byte	0x87
 3369 03da 02       		.byte	0x2
 3370 03db 91       		.byte	0x91
 3371 03dc 6C       		.sleb128 -20
 3372 03dd 0C       		.uleb128 0xc
 3373 03de 43030000 		.4byte	.LASF40
 3374 03e2 01       		.byte	0x1
 3375 03e3 A208     		.2byte	0x8a2
 3376 03e5 87000000 		.4byte	0x87
 3377 03e9 02       		.byte	0x2
 3378 03ea 91       		.byte	0x91
 3379 03eb 74       		.sleb128 -12
 3380 03ec 00       		.byte	0
 3381 03ed 12       		.uleb128 0x12
 3382 03ee 01       		.byte	0x1
 3383 03ef 59000000 		.4byte	.LASF51
 3384 03f3 01       		.byte	0x1
 3385 03f4 B708     		.2byte	0x8b7
 3386 03f6 01       		.byte	0x1
 3387 03f7 87000000 		.4byte	0x87
 3388 03fb 00000000 		.4byte	.LFB18
 3389 03ff 24000000 		.4byte	.LFE18
 3390 0403 01       		.byte	0x1
 3391 0404 9C       		.byte	0x9c
 3392 0405 01       		.byte	0x1
 3393 0406 1A040000 		.4byte	0x41a
 3394 040a 0C       		.uleb128 0xc
 3395 040b 16000000 		.4byte	.LASF52
 3396 040f 01       		.byte	0x1
 3397 0410 B908     		.2byte	0x8b9
 3398 0412 87000000 		.4byte	0x87
 3399 0416 02       		.byte	0x2
 3400 0417 91       		.byte	0x91
 3401 0418 74       		.sleb128 -12
 3402 0419 00       		.byte	0
 3403 041a 0D       		.uleb128 0xd
 3404 041b 01       		.byte	0x1
 3405 041c 89000000 		.4byte	.LASF53
 3406 0420 01       		.byte	0x1
 3407 0421 CE08     		.2byte	0x8ce
 3408 0423 01       		.byte	0x1
 3409 0424 00000000 		.4byte	.LFB19
 3410 0428 1C000000 		.4byte	.LFE19
 3411 042c 01       		.byte	0x1
 3412 042d 9C       		.byte	0x9c
 3413 042e 01       		.byte	0x1
 3414 042f 43040000 		.4byte	0x443
 3415 0433 0B       		.uleb128 0xb
 3416 0434 97010000 		.4byte	.LASF54
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 114


 3417 0438 01       		.byte	0x1
 3418 0439 CE08     		.2byte	0x8ce
 3419 043b 87000000 		.4byte	0x87
 3420 043f 02       		.byte	0x2
 3421 0440 91       		.byte	0x91
 3422 0441 74       		.sleb128 -12
 3423 0442 00       		.byte	0
 3424 0443 0E       		.uleb128 0xe
 3425 0444 01       		.byte	0x1
 3426 0445 07030000 		.4byte	.LASF55
 3427 0449 01       		.byte	0x1
 3428 044a E708     		.2byte	0x8e7
 3429 044c 01       		.byte	0x1
 3430 044d D6000000 		.4byte	0xd6
 3431 0451 00000000 		.4byte	.LFB20
 3432 0455 48000000 		.4byte	.LFE20
 3433 0459 01       		.byte	0x1
 3434 045a 9C       		.byte	0x9c
 3435 045b 01       		.byte	0x1
 3436 045c 9D040000 		.4byte	0x49d
 3437 0460 0B       		.uleb128 0xb
 3438 0461 E2020000 		.4byte	.LASF56
 3439 0465 01       		.byte	0x1
 3440 0466 E708     		.2byte	0x8e7
 3441 0468 6F000000 		.4byte	0x6f
 3442 046c 02       		.byte	0x2
 3443 046d 91       		.byte	0x91
 3444 046e 6F       		.sleb128 -17
 3445 046f 0B       		.uleb128 0xb
 3446 0470 88030000 		.4byte	.LASF57
 3447 0474 01       		.byte	0x1
 3448 0475 E708     		.2byte	0x8e7
 3449 0477 D6000000 		.4byte	0xd6
 3450 047b 02       		.byte	0x2
 3451 047c 91       		.byte	0x91
 3452 047d 68       		.sleb128 -24
 3453 047e 0C       		.uleb128 0xc
 3454 047f 4B000000 		.4byte	.LASF58
 3455 0483 01       		.byte	0x1
 3456 0484 E908     		.2byte	0x8e9
 3457 0486 D6000000 		.4byte	0xd6
 3458 048a 02       		.byte	0x2
 3459 048b 91       		.byte	0x91
 3460 048c 70       		.sleb128 -16
 3461 048d 0C       		.uleb128 0xc
 3462 048e 00000000 		.4byte	.LASF59
 3463 0492 01       		.byte	0x1
 3464 0493 EA08     		.2byte	0x8ea
 3465 0495 9D040000 		.4byte	0x49d
 3466 0499 02       		.byte	0x2
 3467 049a 91       		.byte	0x91
 3468 049b 74       		.sleb128 -12
 3469 049c 00       		.byte	0
 3470 049d 06       		.uleb128 0x6
 3471 049e 04       		.byte	0x4
 3472 049f D6000000 		.4byte	0xd6
 3473 04a3 0E       		.uleb128 0xe
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 115


 3474 04a4 01       		.byte	0x1
 3475 04a5 65040000 		.4byte	.LASF60
 3476 04a9 01       		.byte	0x1
 3477 04aa 0909     		.2byte	0x909
 3478 04ac 01       		.byte	0x1
 3479 04ad D6000000 		.4byte	0xd6
 3480 04b1 00000000 		.4byte	.LFB21
 3481 04b5 34000000 		.4byte	.LFE21
 3482 04b9 01       		.byte	0x1
 3483 04ba 9C       		.byte	0x9c
 3484 04bb 01       		.byte	0x1
 3485 04bc DF040000 		.4byte	0x4df
 3486 04c0 0B       		.uleb128 0xb
 3487 04c1 E2020000 		.4byte	.LASF56
 3488 04c5 01       		.byte	0x1
 3489 04c6 0909     		.2byte	0x909
 3490 04c8 6F000000 		.4byte	0x6f
 3491 04cc 02       		.byte	0x2
 3492 04cd 91       		.byte	0x91
 3493 04ce 6F       		.sleb128 -17
 3494 04cf 0C       		.uleb128 0xc
 3495 04d0 00000000 		.4byte	.LASF59
 3496 04d4 01       		.byte	0x1
 3497 04d5 0B09     		.2byte	0x90b
 3498 04d7 9D040000 		.4byte	0x49d
 3499 04db 02       		.byte	0x2
 3500 04dc 91       		.byte	0x91
 3501 04dd 74       		.sleb128 -12
 3502 04de 00       		.byte	0
 3503 04df 0E       		.uleb128 0xe
 3504 04e0 01       		.byte	0x1
 3505 04e1 D3020000 		.4byte	.LASF61
 3506 04e5 01       		.byte	0x1
 3507 04e6 1F09     		.2byte	0x91f
 3508 04e8 01       		.byte	0x1
 3509 04e9 D6000000 		.4byte	0xd6
 3510 04ed 00000000 		.4byte	.LFB22
 3511 04f1 4C000000 		.4byte	.LFE22
 3512 04f5 01       		.byte	0x1
 3513 04f6 9C       		.byte	0x9c
 3514 04f7 01       		.byte	0x1
 3515 04f8 39050000 		.4byte	0x539
 3516 04fc 0B       		.uleb128 0xb
 3517 04fd E2020000 		.4byte	.LASF56
 3518 0501 01       		.byte	0x1
 3519 0502 1F09     		.2byte	0x91f
 3520 0504 6F000000 		.4byte	0x6f
 3521 0508 02       		.byte	0x2
 3522 0509 91       		.byte	0x91
 3523 050a 6F       		.sleb128 -17
 3524 050b 0B       		.uleb128 0xb
 3525 050c 88030000 		.4byte	.LASF57
 3526 0510 01       		.byte	0x1
 3527 0511 1F09     		.2byte	0x91f
 3528 0513 D6000000 		.4byte	0xd6
 3529 0517 02       		.byte	0x2
 3530 0518 91       		.byte	0x91
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 116


 3531 0519 68       		.sleb128 -24
 3532 051a 0C       		.uleb128 0xc
 3533 051b 4B000000 		.4byte	.LASF58
 3534 051f 01       		.byte	0x1
 3535 0520 2109     		.2byte	0x921
 3536 0522 D6000000 		.4byte	0xd6
 3537 0526 02       		.byte	0x2
 3538 0527 91       		.byte	0x91
 3539 0528 70       		.sleb128 -16
 3540 0529 0C       		.uleb128 0xc
 3541 052a 00000000 		.4byte	.LASF59
 3542 052e 01       		.byte	0x1
 3543 052f 2209     		.2byte	0x922
 3544 0531 9D040000 		.4byte	0x49d
 3545 0535 02       		.byte	0x2
 3546 0536 91       		.byte	0x91
 3547 0537 74       		.sleb128 -12
 3548 0538 00       		.byte	0
 3549 0539 0E       		.uleb128 0xe
 3550 053a 01       		.byte	0x1
 3551 053b 0F040000 		.4byte	.LASF62
 3552 053f 01       		.byte	0x1
 3553 0540 3B09     		.2byte	0x93b
 3554 0542 01       		.byte	0x1
 3555 0543 D6000000 		.4byte	0xd6
 3556 0547 00000000 		.4byte	.LFB23
 3557 054b 36000000 		.4byte	.LFE23
 3558 054f 01       		.byte	0x1
 3559 0550 9C       		.byte	0x9c
 3560 0551 01       		.byte	0x1
 3561 0552 75050000 		.4byte	0x575
 3562 0556 0B       		.uleb128 0xb
 3563 0557 E2020000 		.4byte	.LASF56
 3564 055b 01       		.byte	0x1
 3565 055c 3B09     		.2byte	0x93b
 3566 055e 6F000000 		.4byte	0x6f
 3567 0562 02       		.byte	0x2
 3568 0563 91       		.byte	0x91
 3569 0564 6F       		.sleb128 -17
 3570 0565 0C       		.uleb128 0xc
 3571 0566 00000000 		.4byte	.LASF59
 3572 056a 01       		.byte	0x1
 3573 056b 3D09     		.2byte	0x93d
 3574 056d 9D040000 		.4byte	0x49d
 3575 0571 02       		.byte	0x2
 3576 0572 91       		.byte	0x91
 3577 0573 74       		.sleb128 -12
 3578 0574 00       		.byte	0
 3579 0575 0A       		.uleb128 0xa
 3580 0576 01       		.byte	0x1
 3581 0577 D7030000 		.4byte	.LASF63
 3582 057b 01       		.byte	0x1
 3583 057c 4E09     		.2byte	0x94e
 3584 057e 01       		.byte	0x1
 3585 057f 00000000 		.4byte	.LFB24
 3586 0583 A8000000 		.4byte	.LFE24
 3587 0587 01       		.byte	0x1
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 117


 3588 0588 9C       		.byte	0x9c
 3589 0589 01       		.byte	0x1
 3590 058a DA050000 		.4byte	0x5da
 3591 058e 0B       		.uleb128 0xb
 3592 058f E2020000 		.4byte	.LASF56
 3593 0593 01       		.byte	0x1
 3594 0594 4E09     		.2byte	0x94e
 3595 0596 6F000000 		.4byte	0x6f
 3596 059a 02       		.byte	0x2
 3597 059b 91       		.byte	0x91
 3598 059c 5F       		.sleb128 -33
 3599 059d 0B       		.uleb128 0xb
 3600 059e E9020000 		.4byte	.LASF64
 3601 05a2 01       		.byte	0x1
 3602 05a3 4E09     		.2byte	0x94e
 3603 05a5 6F000000 		.4byte	0x6f
 3604 05a9 02       		.byte	0x2
 3605 05aa 91       		.byte	0x91
 3606 05ab 5E       		.sleb128 -34
 3607 05ac 0C       		.uleb128 0xc
 3608 05ad F8000000 		.4byte	.LASF24
 3609 05b1 01       		.byte	0x1
 3610 05b2 5009     		.2byte	0x950
 3611 05b4 6F000000 		.4byte	0x6f
 3612 05b8 02       		.byte	0x2
 3613 05b9 91       		.byte	0x91
 3614 05ba 6B       		.sleb128 -21
 3615 05bb 0C       		.uleb128 0xc
 3616 05bc 5D010000 		.4byte	.LASF65
 3617 05c0 01       		.byte	0x1
 3618 05c1 5109     		.2byte	0x951
 3619 05c3 87000000 		.4byte	0x87
 3620 05c7 02       		.byte	0x2
 3621 05c8 91       		.byte	0x91
 3622 05c9 6C       		.sleb128 -20
 3623 05ca 0C       		.uleb128 0xc
 3624 05cb E0010000 		.4byte	.LASF66
 3625 05cf 01       		.byte	0x1
 3626 05d0 5209     		.2byte	0x952
 3627 05d2 87000000 		.4byte	0x87
 3628 05d6 02       		.byte	0x2
 3629 05d7 91       		.byte	0x91
 3630 05d8 64       		.sleb128 -28
 3631 05d9 00       		.byte	0
 3632 05da 0E       		.uleb128 0xe
 3633 05db 01       		.byte	0x1
 3634 05dc B4010000 		.4byte	.LASF67
 3635 05e0 01       		.byte	0x1
 3636 05e1 7009     		.2byte	0x970
 3637 05e3 01       		.byte	0x1
 3638 05e4 6F000000 		.4byte	0x6f
 3639 05e8 00000000 		.4byte	.LFB25
 3640 05ec 58000000 		.4byte	.LFE25
 3641 05f0 01       		.byte	0x1
 3642 05f1 9C       		.byte	0x9c
 3643 05f2 01       		.byte	0x1
 3644 05f3 16060000 		.4byte	0x616
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 118


 3645 05f7 0B       		.uleb128 0xb
 3646 05f8 E2020000 		.4byte	.LASF56
 3647 05fc 01       		.byte	0x1
 3648 05fd 7009     		.2byte	0x970
 3649 05ff 6F000000 		.4byte	0x6f
 3650 0603 02       		.byte	0x2
 3651 0604 91       		.byte	0x91
 3652 0605 6F       		.sleb128 -17
 3653 0606 0C       		.uleb128 0xc
 3654 0607 E9020000 		.4byte	.LASF64
 3655 060b 01       		.byte	0x1
 3656 060c 7209     		.2byte	0x972
 3657 060e 6F000000 		.4byte	0x6f
 3658 0612 02       		.byte	0x2
 3659 0613 91       		.byte	0x91
 3660 0614 77       		.sleb128 -9
 3661 0615 00       		.byte	0
 3662 0616 0D       		.uleb128 0xd
 3663 0617 01       		.byte	0x1
 3664 0618 59040000 		.4byte	.LASF68
 3665 061c 01       		.byte	0x1
 3666 061d 8509     		.2byte	0x985
 3667 061f 01       		.byte	0x1
 3668 0620 00000000 		.4byte	.LFB26
 3669 0624 2C000000 		.4byte	.LFE26
 3670 0628 01       		.byte	0x1
 3671 0629 9C       		.byte	0x9c
 3672 062a 01       		.byte	0x1
 3673 062b 3F060000 		.4byte	0x63f
 3674 062f 0B       		.uleb128 0xb
 3675 0630 E2020000 		.4byte	.LASF56
 3676 0634 01       		.byte	0x1
 3677 0635 8509     		.2byte	0x985
 3678 0637 6F000000 		.4byte	0x6f
 3679 063b 02       		.byte	0x2
 3680 063c 91       		.byte	0x91
 3681 063d 77       		.sleb128 -9
 3682 063e 00       		.byte	0
 3683 063f 12       		.uleb128 0x12
 3684 0640 01       		.byte	0x1
 3685 0641 BF000000 		.4byte	.LASF69
 3686 0645 01       		.byte	0x1
 3687 0646 9709     		.2byte	0x997
 3688 0648 01       		.byte	0x1
 3689 0649 6F000000 		.4byte	0x6f
 3690 064d 00000000 		.4byte	.LFB27
 3691 0651 30000000 		.4byte	.LFE27
 3692 0655 01       		.byte	0x1
 3693 0656 9C       		.byte	0x9c
 3694 0657 01       		.byte	0x1
 3695 0658 6C060000 		.4byte	0x66c
 3696 065c 0B       		.uleb128 0xb
 3697 065d E2020000 		.4byte	.LASF56
 3698 0661 01       		.byte	0x1
 3699 0662 9709     		.2byte	0x997
 3700 0664 6F000000 		.4byte	0x6f
 3701 0668 02       		.byte	0x2
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 119


 3702 0669 91       		.byte	0x91
 3703 066a 77       		.sleb128 -9
 3704 066b 00       		.byte	0
 3705 066c 0D       		.uleb128 0xd
 3706 066d 01       		.byte	0x1
 3707 066e 23010000 		.4byte	.LASF70
 3708 0672 01       		.byte	0x1
 3709 0673 A709     		.2byte	0x9a7
 3710 0675 01       		.byte	0x1
 3711 0676 00000000 		.4byte	.LFB28
 3712 067a 2C000000 		.4byte	.LFE28
 3713 067e 01       		.byte	0x1
 3714 067f 9C       		.byte	0x9c
 3715 0680 01       		.byte	0x1
 3716 0681 95060000 		.4byte	0x695
 3717 0685 0B       		.uleb128 0xb
 3718 0686 E2020000 		.4byte	.LASF56
 3719 068a 01       		.byte	0x1
 3720 068b A709     		.2byte	0x9a7
 3721 068d 6F000000 		.4byte	0x6f
 3722 0691 02       		.byte	0x2
 3723 0692 91       		.byte	0x91
 3724 0693 77       		.sleb128 -9
 3725 0694 00       		.byte	0
 3726 0695 0D       		.uleb128 0xd
 3727 0696 01       		.byte	0x1
 3728 0697 6F020000 		.4byte	.LASF71
 3729 069b 01       		.byte	0x1
 3730 069c B509     		.2byte	0x9b5
 3731 069e 01       		.byte	0x1
 3732 069f 00000000 		.4byte	.LFB29
 3733 06a3 2C000000 		.4byte	.LFE29
 3734 06a7 01       		.byte	0x1
 3735 06a8 9C       		.byte	0x9c
 3736 06a9 01       		.byte	0x1
 3737 06aa BE060000 		.4byte	0x6be
 3738 06ae 0B       		.uleb128 0xb
 3739 06af E2020000 		.4byte	.LASF56
 3740 06b3 01       		.byte	0x1
 3741 06b4 B509     		.2byte	0x9b5
 3742 06b6 6F000000 		.4byte	0x6f
 3743 06ba 02       		.byte	0x2
 3744 06bb 91       		.byte	0x91
 3745 06bc 77       		.sleb128 -9
 3746 06bd 00       		.byte	0
 3747 06be 0D       		.uleb128 0xd
 3748 06bf 01       		.byte	0x1
 3749 06c0 6A030000 		.4byte	.LASF72
 3750 06c4 01       		.byte	0x1
 3751 06c5 C409     		.2byte	0x9c4
 3752 06c7 01       		.byte	0x1
 3753 06c8 00000000 		.4byte	.LFB30
 3754 06cc 2C000000 		.4byte	.LFE30
 3755 06d0 01       		.byte	0x1
 3756 06d1 9C       		.byte	0x9c
 3757 06d2 01       		.byte	0x1
 3758 06d3 E7060000 		.4byte	0x6e7
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 120


 3759 06d7 0B       		.uleb128 0xb
 3760 06d8 E2020000 		.4byte	.LASF56
 3761 06dc 01       		.byte	0x1
 3762 06dd C409     		.2byte	0x9c4
 3763 06df 6F000000 		.4byte	0x6f
 3764 06e3 02       		.byte	0x2
 3765 06e4 91       		.byte	0x91
 3766 06e5 77       		.sleb128 -9
 3767 06e6 00       		.byte	0
 3768 06e7 0D       		.uleb128 0xd
 3769 06e8 01       		.byte	0x1
 3770 06e9 3A040000 		.4byte	.LASF73
 3771 06ed 01       		.byte	0x1
 3772 06ee D309     		.2byte	0x9d3
 3773 06f0 01       		.byte	0x1
 3774 06f1 00000000 		.4byte	.LFB31
 3775 06f5 16000000 		.4byte	.LFE31
 3776 06f9 01       		.byte	0x1
 3777 06fa 9C       		.byte	0x9c
 3778 06fb 01       		.byte	0x1
 3779 06fc 10070000 		.4byte	0x710
 3780 0700 0B       		.uleb128 0xb
 3781 0701 9C040000 		.4byte	.LASF50
 3782 0705 01       		.byte	0x1
 3783 0706 D309     		.2byte	0x9d3
 3784 0708 6F000000 		.4byte	0x6f
 3785 070c 02       		.byte	0x2
 3786 070d 91       		.byte	0x91
 3787 070e 77       		.sleb128 -9
 3788 070f 00       		.byte	0
 3789 0710 11       		.uleb128 0x11
 3790 0711 01       		.byte	0x1
 3791 0712 96000000 		.4byte	.LASF74
 3792 0716 01       		.byte	0x1
 3793 0717 EB09     		.2byte	0x9eb
 3794 0719 01       		.byte	0x1
 3795 071a 00000000 		.4byte	.LFB32
 3796 071e 24000000 		.4byte	.LFE32
 3797 0722 01       		.byte	0x1
 3798 0723 9C       		.byte	0x9c
 3799 0724 01       		.byte	0x1
 3800 0725 0A       		.uleb128 0xa
 3801 0726 01       		.byte	0x1
 3802 0727 A5050000 		.4byte	.LASF75
 3803 072b 01       		.byte	0x1
 3804 072c FF09     		.2byte	0x9ff
 3805 072e 01       		.byte	0x1
 3806 072f 00000000 		.4byte	.LFB33
 3807 0733 4C000000 		.4byte	.LFE33
 3808 0737 01       		.byte	0x1
 3809 0738 9C       		.byte	0x9c
 3810 0739 01       		.byte	0x1
 3811 073a 4E070000 		.4byte	0x74e
 3812 073e 0B       		.uleb128 0xb
 3813 073f 1E040000 		.4byte	.LASF76
 3814 0743 01       		.byte	0x1
 3815 0744 FF09     		.2byte	0x9ff
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 121


 3816 0746 87000000 		.4byte	0x87
 3817 074a 02       		.byte	0x2
 3818 074b 91       		.byte	0x91
 3819 074c 74       		.sleb128 -12
 3820 074d 00       		.byte	0
 3821 074e 0A       		.uleb128 0xa
 3822 074f 01       		.byte	0x1
 3823 0750 92040000 		.4byte	.LASF77
 3824 0754 01       		.byte	0x1
 3825 0755 160A     		.2byte	0xa16
 3826 0757 01       		.byte	0x1
 3827 0758 00000000 		.4byte	.LFB34
 3828 075c 28000000 		.4byte	.LFE34
 3829 0760 01       		.byte	0x1
 3830 0761 9C       		.byte	0x9c
 3831 0762 01       		.byte	0x1
 3832 0763 77070000 		.4byte	0x777
 3833 0767 0B       		.uleb128 0xb
 3834 0768 D0060000 		.4byte	.LASF78
 3835 076c 01       		.byte	0x1
 3836 076d 160A     		.2byte	0xa16
 3837 076f 7B000000 		.4byte	0x7b
 3838 0773 02       		.byte	0x2
 3839 0774 91       		.byte	0x91
 3840 0775 76       		.sleb128 -10
 3841 0776 00       		.byte	0
 3842 0777 0A       		.uleb128 0xa
 3843 0778 01       		.byte	0x1
 3844 0779 EC000000 		.4byte	.LASF79
 3845 077d 01       		.byte	0x1
 3846 077e 240A     		.2byte	0xa24
 3847 0780 01       		.byte	0x1
 3848 0781 00000000 		.4byte	.LFB35
 3849 0785 84000000 		.4byte	.LFE35
 3850 0789 01       		.byte	0x1
 3851 078a 9C       		.byte	0x9c
 3852 078b 01       		.byte	0x1
 3853 078c A0070000 		.4byte	0x7a0
 3854 0790 0B       		.uleb128 0xb
 3855 0791 E7000000 		.4byte	.LASF34
 3856 0795 01       		.byte	0x1
 3857 0796 240A     		.2byte	0xa24
 3858 0798 87000000 		.4byte	0x87
 3859 079c 02       		.byte	0x2
 3860 079d 91       		.byte	0x91
 3861 079e 74       		.sleb128 -12
 3862 079f 00       		.byte	0
 3863 07a0 14       		.uleb128 0x14
 3864 07a1 01       		.byte	0x1
 3865 07a2 34030000 		.4byte	.LASF80
 3866 07a6 01       		.byte	0x1
 3867 07a7 440A     		.2byte	0xa44
 3868 07a9 01       		.byte	0x1
 3869 07aa 00000000 		.4byte	.LFB36
 3870 07ae 24000000 		.4byte	.LFE36
 3871 07b2 01       		.byte	0x1
 3872 07b3 9C       		.byte	0x9c
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 122


 3873 07b4 01       		.byte	0x1
 3874 07b5 0A       		.uleb128 0xa
 3875 07b6 01       		.byte	0x1
 3876 07b7 D2010000 		.4byte	.LASF81
 3877 07bb 01       		.byte	0x1
 3878 07bc 610A     		.2byte	0xa61
 3879 07be 01       		.byte	0x1
 3880 07bf 00000000 		.4byte	.LFB37
 3881 07c3 60000000 		.4byte	.LFE37
 3882 07c7 01       		.byte	0x1
 3883 07c8 9C       		.byte	0x9c
 3884 07c9 01       		.byte	0x1
 3885 07ca DC070000 		.4byte	0x7dc
 3886 07ce 15       		.uleb128 0x15
 3887 07cf 6900     		.ascii	"i\000"
 3888 07d1 01       		.byte	0x1
 3889 07d2 630A     		.2byte	0xa63
 3890 07d4 87000000 		.4byte	0x87
 3891 07d8 02       		.byte	0x2
 3892 07d9 91       		.byte	0x91
 3893 07da 74       		.sleb128 -12
 3894 07db 00       		.byte	0
 3895 07dc 14       		.uleb128 0x14
 3896 07dd 01       		.byte	0x1
 3897 07de 4D050000 		.4byte	.LASF82
 3898 07e2 01       		.byte	0x1
 3899 07e3 7F0A     		.2byte	0xa7f
 3900 07e5 01       		.byte	0x1
 3901 07e6 00000000 		.4byte	.LFB38
 3902 07ea 20000000 		.4byte	.LFE38
 3903 07ee 01       		.byte	0x1
 3904 07ef 9C       		.byte	0x9c
 3905 07f0 01       		.byte	0x1
 3906 07f1 11       		.uleb128 0x11
 3907 07f2 01       		.byte	0x1
 3908 07f3 63060000 		.4byte	.LASF83
 3909 07f7 01       		.byte	0x1
 3910 07f8 900A     		.2byte	0xa90
 3911 07fa 01       		.byte	0x1
 3912 07fb 00000000 		.4byte	.LFB39
 3913 07ff 1C000000 		.4byte	.LFE39
 3914 0803 01       		.byte	0x1
 3915 0804 9C       		.byte	0x9c
 3916 0805 01       		.byte	0x1
 3917 0806 11       		.uleb128 0x11
 3918 0807 01       		.byte	0x1
 3919 0808 A6000000 		.4byte	.LASF84
 3920 080c 01       		.byte	0x1
 3921 080d A00A     		.2byte	0xaa0
 3922 080f 01       		.byte	0x1
 3923 0810 00000000 		.4byte	.LFB40
 3924 0814 1C000000 		.4byte	.LFE40
 3925 0818 01       		.byte	0x1
 3926 0819 9C       		.byte	0x9c
 3927 081a 01       		.byte	0x1
 3928 081b 11       		.uleb128 0x11
 3929 081c 01       		.byte	0x1
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 123


 3930 081d C5050000 		.4byte	.LASF85
 3931 0821 01       		.byte	0x1
 3932 0822 B00A     		.2byte	0xab0
 3933 0824 01       		.byte	0x1
 3934 0825 00000000 		.4byte	.LFB41
 3935 0829 1C000000 		.4byte	.LFE41
 3936 082d 01       		.byte	0x1
 3937 082e 9C       		.byte	0x9c
 3938 082f 01       		.byte	0x1
 3939 0830 0D       		.uleb128 0xd
 3940 0831 01       		.byte	0x1
 3941 0832 E4060000 		.4byte	.LASF86
 3942 0836 01       		.byte	0x1
 3943 0837 C10A     		.2byte	0xac1
 3944 0839 01       		.byte	0x1
 3945 083a 00000000 		.4byte	.LFB42
 3946 083e 20000000 		.4byte	.LFE42
 3947 0842 01       		.byte	0x1
 3948 0843 9C       		.byte	0x9c
 3949 0844 01       		.byte	0x1
 3950 0845 59080000 		.4byte	0x859
 3951 0849 0B       		.uleb128 0xb
 3952 084a E0010000 		.4byte	.LASF66
 3953 084e 01       		.byte	0x1
 3954 084f C10A     		.2byte	0xac1
 3955 0851 87000000 		.4byte	0x87
 3956 0855 02       		.byte	0x2
 3957 0856 91       		.byte	0x91
 3958 0857 74       		.sleb128 -12
 3959 0858 00       		.byte	0
 3960 0859 13       		.uleb128 0x13
 3961 085a 01       		.byte	0x1
 3962 085b 07010000 		.4byte	.LASF88
 3963 085f 01       		.byte	0x1
 3964 0860 D10A     		.2byte	0xad1
 3965 0862 01       		.byte	0x1
 3966 0863 87000000 		.4byte	0x87
 3967 0867 00000000 		.4byte	.LFB43
 3968 086b 18000000 		.4byte	.LFE43
 3969 086f 01       		.byte	0x1
 3970 0870 9C       		.byte	0x9c
 3971 0871 01       		.byte	0x1
 3972 0872 13       		.uleb128 0x13
 3973 0873 01       		.byte	0x1
 3974 0874 B7030000 		.4byte	.LASF89
 3975 0878 01       		.byte	0x1
 3976 0879 E10A     		.2byte	0xae1
 3977 087b 01       		.byte	0x1
 3978 087c 87000000 		.4byte	0x87
 3979 0880 00000000 		.4byte	.LFB44
 3980 0884 18000000 		.4byte	.LFE44
 3981 0888 01       		.byte	0x1
 3982 0889 9C       		.byte	0x9c
 3983 088a 01       		.byte	0x1
 3984 088b 0D       		.uleb128 0xd
 3985 088c 01       		.byte	0x1
 3986 088d BB020000 		.4byte	.LASF90
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 124


 3987 0891 01       		.byte	0x1
 3988 0892 010B     		.2byte	0xb01
 3989 0894 01       		.byte	0x1
 3990 0895 00000000 		.4byte	.LFB45
 3991 0899 34000000 		.4byte	.LFE45
 3992 089d 01       		.byte	0x1
 3993 089e 9C       		.byte	0x9c
 3994 089f 01       		.byte	0x1
 3995 08a0 B4080000 		.4byte	0x8b4
 3996 08a4 0B       		.uleb128 0xb
 3997 08a5 E6010000 		.4byte	.LASF91
 3998 08a9 01       		.byte	0x1
 3999 08aa 010B     		.2byte	0xb01
 4000 08ac 87000000 		.4byte	0x87
 4001 08b0 02       		.byte	0x2
 4002 08b1 91       		.byte	0x91
 4003 08b2 74       		.sleb128 -12
 4004 08b3 00       		.byte	0
 4005 08b4 13       		.uleb128 0x13
 4006 08b5 01       		.byte	0x1
 4007 08b6 AD050000 		.4byte	.LASF92
 4008 08ba 01       		.byte	0x1
 4009 08bb 1A0B     		.2byte	0xb1a
 4010 08bd 01       		.byte	0x1
 4011 08be 87000000 		.4byte	0x87
 4012 08c2 00000000 		.4byte	.LFB46
 4013 08c6 18000000 		.4byte	.LFE46
 4014 08ca 01       		.byte	0x1
 4015 08cb 9C       		.byte	0x9c
 4016 08cc 01       		.byte	0x1
 4017 08cd 13       		.uleb128 0x13
 4018 08ce 01       		.byte	0x1
 4019 08cf 00020000 		.4byte	.LASF93
 4020 08d3 01       		.byte	0x1
 4021 08d4 310B     		.2byte	0xb31
 4022 08d6 01       		.byte	0x1
 4023 08d7 87000000 		.4byte	0x87
 4024 08db 00000000 		.4byte	.LFB47
 4025 08df 18000000 		.4byte	.LFE47
 4026 08e3 01       		.byte	0x1
 4027 08e4 9C       		.byte	0x9c
 4028 08e5 01       		.byte	0x1
 4029 08e6 11       		.uleb128 0x11
 4030 08e7 01       		.byte	0x1
 4031 08e8 23020000 		.4byte	.LASF94
 4032 08ec 01       		.byte	0x1
 4033 08ed 3E0B     		.2byte	0xb3e
 4034 08ef 01       		.byte	0x1
 4035 08f0 00000000 		.4byte	.LFB48
 4036 08f4 14000000 		.4byte	.LFE48
 4037 08f8 01       		.byte	0x1
 4038 08f9 9C       		.byte	0x9c
 4039 08fa 01       		.byte	0x1
 4040 08fb 12       		.uleb128 0x12
 4041 08fc 01       		.byte	0x1
 4042 08fd 74050000 		.4byte	.LASF95
 4043 0901 01       		.byte	0x1
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 125


 4044 0902 610B     		.2byte	0xb61
 4045 0904 01       		.byte	0x1
 4046 0905 F8000000 		.4byte	0xf8
 4047 0909 00000000 		.4byte	.LFB49
 4048 090d 2C000000 		.4byte	.LFE49
 4049 0911 01       		.byte	0x1
 4050 0912 9C       		.byte	0x9c
 4051 0913 01       		.byte	0x1
 4052 0914 46090000 		.4byte	0x946
 4053 0918 0B       		.uleb128 0xb
 4054 0919 E2020000 		.4byte	.LASF56
 4055 091d 01       		.byte	0x1
 4056 091e 610B     		.2byte	0xb61
 4057 0920 87000000 		.4byte	0x87
 4058 0924 02       		.byte	0x2
 4059 0925 91       		.byte	0x91
 4060 0926 6C       		.sleb128 -20
 4061 0927 0B       		.uleb128 0xb
 4062 0928 9D030000 		.4byte	.LASF96
 4063 092c 01       		.byte	0x1
 4064 092d 610B     		.2byte	0xb61
 4065 092f F8000000 		.4byte	0xf8
 4066 0933 02       		.byte	0x2
 4067 0934 91       		.byte	0x91
 4068 0935 68       		.sleb128 -24
 4069 0936 0C       		.uleb128 0xc
 4070 0937 52000000 		.4byte	.LASF97
 4071 093b 01       		.byte	0x1
 4072 093c 630B     		.2byte	0xb63
 4073 093e F8000000 		.4byte	0xf8
 4074 0942 02       		.byte	0x2
 4075 0943 91       		.byte	0x91
 4076 0944 74       		.sleb128 -12
 4077 0945 00       		.byte	0
 4078 0946 12       		.uleb128 0x12
 4079 0947 01       		.byte	0x1
 4080 0948 7F020000 		.4byte	.LASF98
 4081 094c 01       		.byte	0x1
 4082 094d 790B     		.2byte	0xb79
 4083 094f 01       		.byte	0x1
 4084 0950 F8000000 		.4byte	0xf8
 4085 0954 00000000 		.4byte	.LFB50
 4086 0958 1C000000 		.4byte	.LFE50
 4087 095c 01       		.byte	0x1
 4088 095d 9C       		.byte	0x9c
 4089 095e 01       		.byte	0x1
 4090 095f 73090000 		.4byte	0x973
 4091 0963 0B       		.uleb128 0xb
 4092 0964 E2020000 		.4byte	.LASF56
 4093 0968 01       		.byte	0x1
 4094 0969 790B     		.2byte	0xb79
 4095 096b 87000000 		.4byte	0x87
 4096 096f 02       		.byte	0x2
 4097 0970 91       		.byte	0x91
 4098 0971 74       		.sleb128 -12
 4099 0972 00       		.byte	0
 4100 0973 16       		.uleb128 0x16
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 126


 4101 0974 F7060000 		.4byte	.LASF112
 4102 0978 01       		.byte	0x1
 4103 0979 860B     		.2byte	0xb86
 4104 097b 01       		.byte	0x1
 4105 097c 00000000 		.4byte	.LFB51
 4106 0980 44000000 		.4byte	.LFE51
 4107 0984 01       		.byte	0x1
 4108 0985 9C       		.byte	0x9c
 4109 0986 01       		.byte	0x1
 4110 0987 99090000 		.4byte	0x999
 4111 098b 15       		.uleb128 0x15
 4112 098c 6900     		.ascii	"i\000"
 4113 098e 01       		.byte	0x1
 4114 098f 880B     		.2byte	0xb88
 4115 0991 87000000 		.4byte	0x87
 4116 0995 02       		.byte	0x2
 4117 0996 91       		.byte	0x91
 4118 0997 74       		.sleb128 -12
 4119 0998 00       		.byte	0
 4120 0999 0D       		.uleb128 0xd
 4121 099a 01       		.byte	0x1
 4122 099b F2010000 		.4byte	.LASF99
 4123 099f 01       		.byte	0x1
 4124 09a0 A60B     		.2byte	0xba6
 4125 09a2 01       		.byte	0x1
 4126 09a3 00000000 		.4byte	.LFB52
 4127 09a7 C0000000 		.4byte	.LFE52
 4128 09ab 01       		.byte	0x1
 4129 09ac 9C       		.byte	0x9c
 4130 09ad 01       		.byte	0x1
 4131 09ae C2090000 		.4byte	0x9c2
 4132 09b2 0B       		.uleb128 0xb
 4133 09b3 9C050000 		.4byte	.LASF100
 4134 09b7 01       		.byte	0x1
 4135 09b8 A60B     		.2byte	0xba6
 4136 09ba C2090000 		.4byte	0x9c2
 4137 09be 02       		.byte	0x2
 4138 09bf 91       		.byte	0x91
 4139 09c0 74       		.sleb128 -12
 4140 09c1 00       		.byte	0
 4141 09c2 06       		.uleb128 0x6
 4142 09c3 04       		.byte	0x4
 4143 09c4 87000000 		.4byte	0x87
 4144 09c8 0F       		.uleb128 0xf
 4145 09c9 F8000000 		.4byte	0xf8
 4146 09cd D8090000 		.4byte	0x9d8
 4147 09d1 10       		.uleb128 0x10
 4148 09d2 F1000000 		.4byte	0xf1
 4149 09d6 04       		.byte	0x4
 4150 09d7 00       		.byte	0
 4151 09d8 17       		.uleb128 0x17
 4152 09d9 89050000 		.4byte	.LASF101
 4153 09dd 01       		.byte	0x1
 4154 09de 22       		.byte	0x22
 4155 09df C8090000 		.4byte	0x9c8
 4156 09e3 05       		.byte	0x5
 4157 09e4 03       		.byte	0x3
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 127


 4158 09e5 00000000 		.4byte	CySysTickCallbacks
 4159 09e9 18       		.uleb128 0x18
 4160 09ea C9030000 		.4byte	.LASF102
 4161 09ee 01       		.byte	0x1
 4162 09ef 1B       		.byte	0x1b
 4163 09f0 87000000 		.4byte	0x87
 4164 09f4 01       		.byte	0x1
 4165 09f5 05       		.byte	0x5
 4166 09f6 03       		.byte	0x3
 4167 09f7 00000000 		.4byte	cydelayFreqHz
 4168 09fb 18       		.uleb128 0x18
 4169 09fc 40010000 		.4byte	.LASF103
 4170 0a00 01       		.byte	0x1
 4171 0a01 1C       		.byte	0x1c
 4172 0a02 87000000 		.4byte	0x87
 4173 0a06 01       		.byte	0x1
 4174 0a07 05       		.byte	0x5
 4175 0a08 03       		.byte	0x3
 4176 0a09 00000000 		.4byte	cydelayFreqKhz
 4177 0a0d 18       		.uleb128 0x18
 4178 0a0e EF050000 		.4byte	.LASF104
 4179 0a12 01       		.byte	0x1
 4180 0a13 1D       		.byte	0x1d
 4181 0a14 6F000000 		.4byte	0x6f
 4182 0a18 01       		.byte	0x1
 4183 0a19 05       		.byte	0x5
 4184 0a1a 03       		.byte	0x3
 4185 0a1b 00000000 		.4byte	cydelayFreqMhz
 4186 0a1f 18       		.uleb128 0x18
 4187 0a20 C5010000 		.4byte	.LASF105
 4188 0a24 01       		.byte	0x1
 4189 0a25 1E       		.byte	0x1e
 4190 0a26 87000000 		.4byte	0x87
 4191 0a2a 01       		.byte	0x1
 4192 0a2b 05       		.byte	0x5
 4193 0a2c 03       		.byte	0x3
 4194 0a2d 00000000 		.4byte	cydelay32kMs
 4195 0a31 18       		.uleb128 0x18
 4196 0a32 59030000 		.4byte	.LASF106
 4197 0a36 01       		.byte	0x1
 4198 0a37 36       		.byte	0x36
 4199 0a38 87000000 		.4byte	0x87
 4200 0a3c 01       		.byte	0x1
 4201 0a3d 05       		.byte	0x5
 4202 0a3e 03       		.byte	0x3
 4203 0a3f 00000000 		.4byte	CySysTickInitVar
 4204 0a43 0F       		.uleb128 0xf
 4205 0a44 530A0000 		.4byte	0xa53
 4206 0a48 530A0000 		.4byte	0xa53
 4207 0a4c 10       		.uleb128 0x10
 4208 0a4d F1000000 		.4byte	0xf1
 4209 0a51 2D       		.byte	0x2d
 4210 0a52 00       		.byte	0
 4211 0a53 19       		.uleb128 0x19
 4212 0a54 6F000000 		.4byte	0x6f
 4213 0a58 18       		.uleb128 0x18
 4214 0a59 A6030000 		.4byte	.LASF107
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 128


 4215 0a5d 01       		.byte	0x1
 4216 0a5e 3B       		.byte	0x3b
 4217 0a5f 6A0A0000 		.4byte	0xa6a
 4218 0a63 01       		.byte	0x1
 4219 0a64 05       		.byte	0x5
 4220 0a65 03       		.byte	0x3
 4221 0a66 00000000 		.4byte	cyImoFreqMhz2Reg
 4222 0a6a 19       		.uleb128 0x19
 4223 0a6b 430A0000 		.4byte	0xa43
 4224 0a6f 18       		.uleb128 0x18
 4225 0a70 38000000 		.4byte	.LASF108
 4226 0a74 01       		.byte	0x1
 4227 0a75 5B       		.byte	0x5b
 4228 0a76 87000000 		.4byte	0x87
 4229 0a7a 01       		.byte	0x1
 4230 0a7b 05       		.byte	0x5
 4231 0a7c 03       		.byte	0x3
 4232 0a7d 00000000 		.4byte	CySysClkPumpConfig
 4233 0a81 00       		.byte	0
 4234              		.section	.debug_abbrev,"",%progbits
 4235              	.Ldebug_abbrev0:
 4236 0000 01       		.uleb128 0x1
 4237 0001 11       		.uleb128 0x11
 4238 0002 01       		.byte	0x1
 4239 0003 25       		.uleb128 0x25
 4240 0004 0E       		.uleb128 0xe
 4241 0005 13       		.uleb128 0x13
 4242 0006 0B       		.uleb128 0xb
 4243 0007 03       		.uleb128 0x3
 4244 0008 0E       		.uleb128 0xe
 4245 0009 1B       		.uleb128 0x1b
 4246 000a 0E       		.uleb128 0xe
 4247 000b 55       		.uleb128 0x55
 4248 000c 06       		.uleb128 0x6
 4249 000d 11       		.uleb128 0x11
 4250 000e 01       		.uleb128 0x1
 4251 000f 52       		.uleb128 0x52
 4252 0010 01       		.uleb128 0x1
 4253 0011 10       		.uleb128 0x10
 4254 0012 06       		.uleb128 0x6
 4255 0013 00       		.byte	0
 4256 0014 00       		.byte	0
 4257 0015 02       		.uleb128 0x2
 4258 0016 24       		.uleb128 0x24
 4259 0017 00       		.byte	0
 4260 0018 0B       		.uleb128 0xb
 4261 0019 0B       		.uleb128 0xb
 4262 001a 3E       		.uleb128 0x3e
 4263 001b 0B       		.uleb128 0xb
 4264 001c 03       		.uleb128 0x3
 4265 001d 0E       		.uleb128 0xe
 4266 001e 00       		.byte	0
 4267 001f 00       		.byte	0
 4268 0020 03       		.uleb128 0x3
 4269 0021 24       		.uleb128 0x24
 4270 0022 00       		.byte	0
 4271 0023 0B       		.uleb128 0xb
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 129


 4272 0024 0B       		.uleb128 0xb
 4273 0025 3E       		.uleb128 0x3e
 4274 0026 0B       		.uleb128 0xb
 4275 0027 03       		.uleb128 0x3
 4276 0028 08       		.uleb128 0x8
 4277 0029 00       		.byte	0
 4278 002a 00       		.byte	0
 4279 002b 04       		.uleb128 0x4
 4280 002c 16       		.uleb128 0x16
 4281 002d 00       		.byte	0
 4282 002e 03       		.uleb128 0x3
 4283 002f 0E       		.uleb128 0xe
 4284 0030 3A       		.uleb128 0x3a
 4285 0031 0B       		.uleb128 0xb
 4286 0032 3B       		.uleb128 0x3b
 4287 0033 05       		.uleb128 0x5
 4288 0034 49       		.uleb128 0x49
 4289 0035 13       		.uleb128 0x13
 4290 0036 00       		.byte	0
 4291 0037 00       		.byte	0
 4292 0038 05       		.uleb128 0x5
 4293 0039 35       		.uleb128 0x35
 4294 003a 00       		.byte	0
 4295 003b 49       		.uleb128 0x49
 4296 003c 13       		.uleb128 0x13
 4297 003d 00       		.byte	0
 4298 003e 00       		.byte	0
 4299 003f 06       		.uleb128 0x6
 4300 0040 0F       		.uleb128 0xf
 4301 0041 00       		.byte	0
 4302 0042 0B       		.uleb128 0xb
 4303 0043 0B       		.uleb128 0xb
 4304 0044 49       		.uleb128 0x49
 4305 0045 13       		.uleb128 0x13
 4306 0046 00       		.byte	0
 4307 0047 00       		.byte	0
 4308 0048 07       		.uleb128 0x7
 4309 0049 15       		.uleb128 0x15
 4310 004a 00       		.byte	0
 4311 004b 27       		.uleb128 0x27
 4312 004c 0C       		.uleb128 0xc
 4313 004d 00       		.byte	0
 4314 004e 00       		.byte	0
 4315 004f 08       		.uleb128 0x8
 4316 0050 16       		.uleb128 0x16
 4317 0051 00       		.byte	0
 4318 0052 03       		.uleb128 0x3
 4319 0053 0E       		.uleb128 0xe
 4320 0054 3A       		.uleb128 0x3a
 4321 0055 0B       		.uleb128 0xb
 4322 0056 3B       		.uleb128 0x3b
 4323 0057 0B       		.uleb128 0xb
 4324 0058 49       		.uleb128 0x49
 4325 0059 13       		.uleb128 0x13
 4326 005a 00       		.byte	0
 4327 005b 00       		.byte	0
 4328 005c 09       		.uleb128 0x9
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 130


 4329 005d 2E       		.uleb128 0x2e
 4330 005e 00       		.byte	0
 4331 005f 3F       		.uleb128 0x3f
 4332 0060 0C       		.uleb128 0xc
 4333 0061 03       		.uleb128 0x3
 4334 0062 0E       		.uleb128 0xe
 4335 0063 3A       		.uleb128 0x3a
 4336 0064 0B       		.uleb128 0xb
 4337 0065 3B       		.uleb128 0x3b
 4338 0066 0B       		.uleb128 0xb
 4339 0067 27       		.uleb128 0x27
 4340 0068 0C       		.uleb128 0xc
 4341 0069 11       		.uleb128 0x11
 4342 006a 01       		.uleb128 0x1
 4343 006b 12       		.uleb128 0x12
 4344 006c 01       		.uleb128 0x1
 4345 006d 40       		.uleb128 0x40
 4346 006e 0A       		.uleb128 0xa
 4347 006f 9742     		.uleb128 0x2117
 4348 0071 0C       		.uleb128 0xc
 4349 0072 00       		.byte	0
 4350 0073 00       		.byte	0
 4351 0074 0A       		.uleb128 0xa
 4352 0075 2E       		.uleb128 0x2e
 4353 0076 01       		.byte	0x1
 4354 0077 3F       		.uleb128 0x3f
 4355 0078 0C       		.uleb128 0xc
 4356 0079 03       		.uleb128 0x3
 4357 007a 0E       		.uleb128 0xe
 4358 007b 3A       		.uleb128 0x3a
 4359 007c 0B       		.uleb128 0xb
 4360 007d 3B       		.uleb128 0x3b
 4361 007e 05       		.uleb128 0x5
 4362 007f 27       		.uleb128 0x27
 4363 0080 0C       		.uleb128 0xc
 4364 0081 11       		.uleb128 0x11
 4365 0082 01       		.uleb128 0x1
 4366 0083 12       		.uleb128 0x12
 4367 0084 01       		.uleb128 0x1
 4368 0085 40       		.uleb128 0x40
 4369 0086 0A       		.uleb128 0xa
 4370 0087 9642     		.uleb128 0x2116
 4371 0089 0C       		.uleb128 0xc
 4372 008a 01       		.uleb128 0x1
 4373 008b 13       		.uleb128 0x13
 4374 008c 00       		.byte	0
 4375 008d 00       		.byte	0
 4376 008e 0B       		.uleb128 0xb
 4377 008f 05       		.uleb128 0x5
 4378 0090 00       		.byte	0
 4379 0091 03       		.uleb128 0x3
 4380 0092 0E       		.uleb128 0xe
 4381 0093 3A       		.uleb128 0x3a
 4382 0094 0B       		.uleb128 0xb
 4383 0095 3B       		.uleb128 0x3b
 4384 0096 05       		.uleb128 0x5
 4385 0097 49       		.uleb128 0x49
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 131


 4386 0098 13       		.uleb128 0x13
 4387 0099 02       		.uleb128 0x2
 4388 009a 0A       		.uleb128 0xa
 4389 009b 00       		.byte	0
 4390 009c 00       		.byte	0
 4391 009d 0C       		.uleb128 0xc
 4392 009e 34       		.uleb128 0x34
 4393 009f 00       		.byte	0
 4394 00a0 03       		.uleb128 0x3
 4395 00a1 0E       		.uleb128 0xe
 4396 00a2 3A       		.uleb128 0x3a
 4397 00a3 0B       		.uleb128 0xb
 4398 00a4 3B       		.uleb128 0x3b
 4399 00a5 05       		.uleb128 0x5
 4400 00a6 49       		.uleb128 0x49
 4401 00a7 13       		.uleb128 0x13
 4402 00a8 02       		.uleb128 0x2
 4403 00a9 0A       		.uleb128 0xa
 4404 00aa 00       		.byte	0
 4405 00ab 00       		.byte	0
 4406 00ac 0D       		.uleb128 0xd
 4407 00ad 2E       		.uleb128 0x2e
 4408 00ae 01       		.byte	0x1
 4409 00af 3F       		.uleb128 0x3f
 4410 00b0 0C       		.uleb128 0xc
 4411 00b1 03       		.uleb128 0x3
 4412 00b2 0E       		.uleb128 0xe
 4413 00b3 3A       		.uleb128 0x3a
 4414 00b4 0B       		.uleb128 0xb
 4415 00b5 3B       		.uleb128 0x3b
 4416 00b6 05       		.uleb128 0x5
 4417 00b7 27       		.uleb128 0x27
 4418 00b8 0C       		.uleb128 0xc
 4419 00b9 11       		.uleb128 0x11
 4420 00ba 01       		.uleb128 0x1
 4421 00bb 12       		.uleb128 0x12
 4422 00bc 01       		.uleb128 0x1
 4423 00bd 40       		.uleb128 0x40
 4424 00be 0A       		.uleb128 0xa
 4425 00bf 9742     		.uleb128 0x2117
 4426 00c1 0C       		.uleb128 0xc
 4427 00c2 01       		.uleb128 0x1
 4428 00c3 13       		.uleb128 0x13
 4429 00c4 00       		.byte	0
 4430 00c5 00       		.byte	0
 4431 00c6 0E       		.uleb128 0xe
 4432 00c7 2E       		.uleb128 0x2e
 4433 00c8 01       		.byte	0x1
 4434 00c9 3F       		.uleb128 0x3f
 4435 00ca 0C       		.uleb128 0xc
 4436 00cb 03       		.uleb128 0x3
 4437 00cc 0E       		.uleb128 0xe
 4438 00cd 3A       		.uleb128 0x3a
 4439 00ce 0B       		.uleb128 0xb
 4440 00cf 3B       		.uleb128 0x3b
 4441 00d0 05       		.uleb128 0x5
 4442 00d1 27       		.uleb128 0x27
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 132


 4443 00d2 0C       		.uleb128 0xc
 4444 00d3 49       		.uleb128 0x49
 4445 00d4 13       		.uleb128 0x13
 4446 00d5 11       		.uleb128 0x11
 4447 00d6 01       		.uleb128 0x1
 4448 00d7 12       		.uleb128 0x12
 4449 00d8 01       		.uleb128 0x1
 4450 00d9 40       		.uleb128 0x40
 4451 00da 0A       		.uleb128 0xa
 4452 00db 9642     		.uleb128 0x2116
 4453 00dd 0C       		.uleb128 0xc
 4454 00de 01       		.uleb128 0x1
 4455 00df 13       		.uleb128 0x13
 4456 00e0 00       		.byte	0
 4457 00e1 00       		.byte	0
 4458 00e2 0F       		.uleb128 0xf
 4459 00e3 01       		.uleb128 0x1
 4460 00e4 01       		.byte	0x1
 4461 00e5 49       		.uleb128 0x49
 4462 00e6 13       		.uleb128 0x13
 4463 00e7 01       		.uleb128 0x1
 4464 00e8 13       		.uleb128 0x13
 4465 00e9 00       		.byte	0
 4466 00ea 00       		.byte	0
 4467 00eb 10       		.uleb128 0x10
 4468 00ec 21       		.uleb128 0x21
 4469 00ed 00       		.byte	0
 4470 00ee 49       		.uleb128 0x49
 4471 00ef 13       		.uleb128 0x13
 4472 00f0 2F       		.uleb128 0x2f
 4473 00f1 0B       		.uleb128 0xb
 4474 00f2 00       		.byte	0
 4475 00f3 00       		.byte	0
 4476 00f4 11       		.uleb128 0x11
 4477 00f5 2E       		.uleb128 0x2e
 4478 00f6 00       		.byte	0
 4479 00f7 3F       		.uleb128 0x3f
 4480 00f8 0C       		.uleb128 0xc
 4481 00f9 03       		.uleb128 0x3
 4482 00fa 0E       		.uleb128 0xe
 4483 00fb 3A       		.uleb128 0x3a
 4484 00fc 0B       		.uleb128 0xb
 4485 00fd 3B       		.uleb128 0x3b
 4486 00fe 05       		.uleb128 0x5
 4487 00ff 27       		.uleb128 0x27
 4488 0100 0C       		.uleb128 0xc
 4489 0101 11       		.uleb128 0x11
 4490 0102 01       		.uleb128 0x1
 4491 0103 12       		.uleb128 0x12
 4492 0104 01       		.uleb128 0x1
 4493 0105 40       		.uleb128 0x40
 4494 0106 0A       		.uleb128 0xa
 4495 0107 9742     		.uleb128 0x2117
 4496 0109 0C       		.uleb128 0xc
 4497 010a 00       		.byte	0
 4498 010b 00       		.byte	0
 4499 010c 12       		.uleb128 0x12
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 133


 4500 010d 2E       		.uleb128 0x2e
 4501 010e 01       		.byte	0x1
 4502 010f 3F       		.uleb128 0x3f
 4503 0110 0C       		.uleb128 0xc
 4504 0111 03       		.uleb128 0x3
 4505 0112 0E       		.uleb128 0xe
 4506 0113 3A       		.uleb128 0x3a
 4507 0114 0B       		.uleb128 0xb
 4508 0115 3B       		.uleb128 0x3b
 4509 0116 05       		.uleb128 0x5
 4510 0117 27       		.uleb128 0x27
 4511 0118 0C       		.uleb128 0xc
 4512 0119 49       		.uleb128 0x49
 4513 011a 13       		.uleb128 0x13
 4514 011b 11       		.uleb128 0x11
 4515 011c 01       		.uleb128 0x1
 4516 011d 12       		.uleb128 0x12
 4517 011e 01       		.uleb128 0x1
 4518 011f 40       		.uleb128 0x40
 4519 0120 0A       		.uleb128 0xa
 4520 0121 9742     		.uleb128 0x2117
 4521 0123 0C       		.uleb128 0xc
 4522 0124 01       		.uleb128 0x1
 4523 0125 13       		.uleb128 0x13
 4524 0126 00       		.byte	0
 4525 0127 00       		.byte	0
 4526 0128 13       		.uleb128 0x13
 4527 0129 2E       		.uleb128 0x2e
 4528 012a 00       		.byte	0
 4529 012b 3F       		.uleb128 0x3f
 4530 012c 0C       		.uleb128 0xc
 4531 012d 03       		.uleb128 0x3
 4532 012e 0E       		.uleb128 0xe
 4533 012f 3A       		.uleb128 0x3a
 4534 0130 0B       		.uleb128 0xb
 4535 0131 3B       		.uleb128 0x3b
 4536 0132 05       		.uleb128 0x5
 4537 0133 27       		.uleb128 0x27
 4538 0134 0C       		.uleb128 0xc
 4539 0135 49       		.uleb128 0x49
 4540 0136 13       		.uleb128 0x13
 4541 0137 11       		.uleb128 0x11
 4542 0138 01       		.uleb128 0x1
 4543 0139 12       		.uleb128 0x12
 4544 013a 01       		.uleb128 0x1
 4545 013b 40       		.uleb128 0x40
 4546 013c 0A       		.uleb128 0xa
 4547 013d 9742     		.uleb128 0x2117
 4548 013f 0C       		.uleb128 0xc
 4549 0140 00       		.byte	0
 4550 0141 00       		.byte	0
 4551 0142 14       		.uleb128 0x14
 4552 0143 2E       		.uleb128 0x2e
 4553 0144 00       		.byte	0
 4554 0145 3F       		.uleb128 0x3f
 4555 0146 0C       		.uleb128 0xc
 4556 0147 03       		.uleb128 0x3
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 134


 4557 0148 0E       		.uleb128 0xe
 4558 0149 3A       		.uleb128 0x3a
 4559 014a 0B       		.uleb128 0xb
 4560 014b 3B       		.uleb128 0x3b
 4561 014c 05       		.uleb128 0x5
 4562 014d 27       		.uleb128 0x27
 4563 014e 0C       		.uleb128 0xc
 4564 014f 11       		.uleb128 0x11
 4565 0150 01       		.uleb128 0x1
 4566 0151 12       		.uleb128 0x12
 4567 0152 01       		.uleb128 0x1
 4568 0153 40       		.uleb128 0x40
 4569 0154 0A       		.uleb128 0xa
 4570 0155 9642     		.uleb128 0x2116
 4571 0157 0C       		.uleb128 0xc
 4572 0158 00       		.byte	0
 4573 0159 00       		.byte	0
 4574 015a 15       		.uleb128 0x15
 4575 015b 34       		.uleb128 0x34
 4576 015c 00       		.byte	0
 4577 015d 03       		.uleb128 0x3
 4578 015e 08       		.uleb128 0x8
 4579 015f 3A       		.uleb128 0x3a
 4580 0160 0B       		.uleb128 0xb
 4581 0161 3B       		.uleb128 0x3b
 4582 0162 05       		.uleb128 0x5
 4583 0163 49       		.uleb128 0x49
 4584 0164 13       		.uleb128 0x13
 4585 0165 02       		.uleb128 0x2
 4586 0166 0A       		.uleb128 0xa
 4587 0167 00       		.byte	0
 4588 0168 00       		.byte	0
 4589 0169 16       		.uleb128 0x16
 4590 016a 2E       		.uleb128 0x2e
 4591 016b 01       		.byte	0x1
 4592 016c 03       		.uleb128 0x3
 4593 016d 0E       		.uleb128 0xe
 4594 016e 3A       		.uleb128 0x3a
 4595 016f 0B       		.uleb128 0xb
 4596 0170 3B       		.uleb128 0x3b
 4597 0171 05       		.uleb128 0x5
 4598 0172 27       		.uleb128 0x27
 4599 0173 0C       		.uleb128 0xc
 4600 0174 11       		.uleb128 0x11
 4601 0175 01       		.uleb128 0x1
 4602 0176 12       		.uleb128 0x12
 4603 0177 01       		.uleb128 0x1
 4604 0178 40       		.uleb128 0x40
 4605 0179 0A       		.uleb128 0xa
 4606 017a 9642     		.uleb128 0x2116
 4607 017c 0C       		.uleb128 0xc
 4608 017d 01       		.uleb128 0x1
 4609 017e 13       		.uleb128 0x13
 4610 017f 00       		.byte	0
 4611 0180 00       		.byte	0
 4612 0181 17       		.uleb128 0x17
 4613 0182 34       		.uleb128 0x34
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 135


 4614 0183 00       		.byte	0
 4615 0184 03       		.uleb128 0x3
 4616 0185 0E       		.uleb128 0xe
 4617 0186 3A       		.uleb128 0x3a
 4618 0187 0B       		.uleb128 0xb
 4619 0188 3B       		.uleb128 0x3b
 4620 0189 0B       		.uleb128 0xb
 4621 018a 49       		.uleb128 0x49
 4622 018b 13       		.uleb128 0x13
 4623 018c 02       		.uleb128 0x2
 4624 018d 0A       		.uleb128 0xa
 4625 018e 00       		.byte	0
 4626 018f 00       		.byte	0
 4627 0190 18       		.uleb128 0x18
 4628 0191 34       		.uleb128 0x34
 4629 0192 00       		.byte	0
 4630 0193 03       		.uleb128 0x3
 4631 0194 0E       		.uleb128 0xe
 4632 0195 3A       		.uleb128 0x3a
 4633 0196 0B       		.uleb128 0xb
 4634 0197 3B       		.uleb128 0x3b
 4635 0198 0B       		.uleb128 0xb
 4636 0199 49       		.uleb128 0x49
 4637 019a 13       		.uleb128 0x13
 4638 019b 3F       		.uleb128 0x3f
 4639 019c 0C       		.uleb128 0xc
 4640 019d 02       		.uleb128 0x2
 4641 019e 0A       		.uleb128 0xa
 4642 019f 00       		.byte	0
 4643 01a0 00       		.byte	0
 4644 01a1 19       		.uleb128 0x19
 4645 01a2 26       		.uleb128 0x26
 4646 01a3 00       		.byte	0
 4647 01a4 49       		.uleb128 0x49
 4648 01a5 13       		.uleb128 0x13
 4649 01a6 00       		.byte	0
 4650 01a7 00       		.byte	0
 4651 01a8 00       		.byte	0
 4652              		.section	.debug_aranges,"",%progbits
 4653 0000 AC010000 		.4byte	0x1ac
 4654 0004 0200     		.2byte	0x2
 4655 0006 00000000 		.4byte	.Ldebug_info0
 4656 000a 04       		.byte	0x4
 4657 000b 00       		.byte	0
 4658 000c 0000     		.2byte	0
 4659 000e 0000     		.2byte	0
 4660 0010 00000000 		.4byte	.LFB2
 4661 0014 1C000000 		.4byte	.LFE2-.LFB2
 4662 0018 00000000 		.4byte	.LFB3
 4663 001c 1C000000 		.4byte	.LFE3-.LFB3
 4664 0020 00000000 		.4byte	.LFB4
 4665 0024 48000000 		.4byte	.LFE4-.LFB4
 4666 0028 00000000 		.4byte	.LFB5
 4667 002c 50000000 		.4byte	.LFE5-.LFB5
 4668 0030 00000000 		.4byte	.LFB6
 4669 0034 34000000 		.4byte	.LFE6-.LFB6
 4670 0038 00000000 		.4byte	.LFB7
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 136


 4671 003c 48000000 		.4byte	.LFE7-.LFB7
 4672 0040 00000000 		.4byte	.LFB8
 4673 0044 9C000000 		.4byte	.LFE8-.LFB8
 4674 0048 00000000 		.4byte	.LFB9
 4675 004c 74000000 		.4byte	.LFE9-.LFB9
 4676 0050 00000000 		.4byte	.LFB10
 4677 0054 30000000 		.4byte	.LFE10-.LFB10
 4678 0058 00000000 		.4byte	.LFB11
 4679 005c 20000000 		.4byte	.LFE11-.LFB11
 4680 0060 00000000 		.4byte	.LFB12
 4681 0064 58000000 		.4byte	.LFE12-.LFB12
 4682 0068 00000000 		.4byte	.LFB13
 4683 006c 64000000 		.4byte	.LFE13-.LFB13
 4684 0070 00000000 		.4byte	.LFB14
 4685 0074 2C000000 		.4byte	.LFE14-.LFB14
 4686 0078 00000000 		.4byte	.LFB15
 4687 007c 18000000 		.4byte	.LFE15-.LFB15
 4688 0080 00000000 		.4byte	.LFB16
 4689 0084 14000000 		.4byte	.LFE16-.LFB16
 4690 0088 00000000 		.4byte	.LFB17
 4691 008c 30000000 		.4byte	.LFE17-.LFB17
 4692 0090 00000000 		.4byte	.LFB18
 4693 0094 24000000 		.4byte	.LFE18-.LFB18
 4694 0098 00000000 		.4byte	.LFB19
 4695 009c 1C000000 		.4byte	.LFE19-.LFB19
 4696 00a0 00000000 		.4byte	.LFB20
 4697 00a4 48000000 		.4byte	.LFE20-.LFB20
 4698 00a8 00000000 		.4byte	.LFB21
 4699 00ac 34000000 		.4byte	.LFE21-.LFB21
 4700 00b0 00000000 		.4byte	.LFB22
 4701 00b4 4C000000 		.4byte	.LFE22-.LFB22
 4702 00b8 00000000 		.4byte	.LFB23
 4703 00bc 36000000 		.4byte	.LFE23-.LFB23
 4704 00c0 00000000 		.4byte	.LFB24
 4705 00c4 A8000000 		.4byte	.LFE24-.LFB24
 4706 00c8 00000000 		.4byte	.LFB25
 4707 00cc 58000000 		.4byte	.LFE25-.LFB25
 4708 00d0 00000000 		.4byte	.LFB26
 4709 00d4 2C000000 		.4byte	.LFE26-.LFB26
 4710 00d8 00000000 		.4byte	.LFB27
 4711 00dc 30000000 		.4byte	.LFE27-.LFB27
 4712 00e0 00000000 		.4byte	.LFB28
 4713 00e4 2C000000 		.4byte	.LFE28-.LFB28
 4714 00e8 00000000 		.4byte	.LFB29
 4715 00ec 2C000000 		.4byte	.LFE29-.LFB29
 4716 00f0 00000000 		.4byte	.LFB30
 4717 00f4 2C000000 		.4byte	.LFE30-.LFB30
 4718 00f8 00000000 		.4byte	.LFB31
 4719 00fc 16000000 		.4byte	.LFE31-.LFB31
 4720 0100 00000000 		.4byte	.LFB32
 4721 0104 24000000 		.4byte	.LFE32-.LFB32
 4722 0108 00000000 		.4byte	.LFB33
 4723 010c 4C000000 		.4byte	.LFE33-.LFB33
 4724 0110 00000000 		.4byte	.LFB34
 4725 0114 28000000 		.4byte	.LFE34-.LFB34
 4726 0118 00000000 		.4byte	.LFB35
 4727 011c 84000000 		.4byte	.LFE35-.LFB35
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 137


 4728 0120 00000000 		.4byte	.LFB36
 4729 0124 24000000 		.4byte	.LFE36-.LFB36
 4730 0128 00000000 		.4byte	.LFB37
 4731 012c 60000000 		.4byte	.LFE37-.LFB37
 4732 0130 00000000 		.4byte	.LFB38
 4733 0134 20000000 		.4byte	.LFE38-.LFB38
 4734 0138 00000000 		.4byte	.LFB39
 4735 013c 1C000000 		.4byte	.LFE39-.LFB39
 4736 0140 00000000 		.4byte	.LFB40
 4737 0144 1C000000 		.4byte	.LFE40-.LFB40
 4738 0148 00000000 		.4byte	.LFB41
 4739 014c 1C000000 		.4byte	.LFE41-.LFB41
 4740 0150 00000000 		.4byte	.LFB42
 4741 0154 20000000 		.4byte	.LFE42-.LFB42
 4742 0158 00000000 		.4byte	.LFB43
 4743 015c 18000000 		.4byte	.LFE43-.LFB43
 4744 0160 00000000 		.4byte	.LFB44
 4745 0164 18000000 		.4byte	.LFE44-.LFB44
 4746 0168 00000000 		.4byte	.LFB45
 4747 016c 34000000 		.4byte	.LFE45-.LFB45
 4748 0170 00000000 		.4byte	.LFB46
 4749 0174 18000000 		.4byte	.LFE46-.LFB46
 4750 0178 00000000 		.4byte	.LFB47
 4751 017c 18000000 		.4byte	.LFE47-.LFB47
 4752 0180 00000000 		.4byte	.LFB48
 4753 0184 14000000 		.4byte	.LFE48-.LFB48
 4754 0188 00000000 		.4byte	.LFB49
 4755 018c 2C000000 		.4byte	.LFE49-.LFB49
 4756 0190 00000000 		.4byte	.LFB50
 4757 0194 1C000000 		.4byte	.LFE50-.LFB50
 4758 0198 00000000 		.4byte	.LFB51
 4759 019c 44000000 		.4byte	.LFE51-.LFB51
 4760 01a0 00000000 		.4byte	.LFB52
 4761 01a4 C0000000 		.4byte	.LFE52-.LFB52
 4762 01a8 00000000 		.4byte	0
 4763 01ac 00000000 		.4byte	0
 4764              		.section	.debug_ranges,"",%progbits
 4765              	.Ldebug_ranges0:
 4766 0000 00000000 		.4byte	.LFB2
 4767 0004 1C000000 		.4byte	.LFE2
 4768 0008 00000000 		.4byte	.LFB3
 4769 000c 1C000000 		.4byte	.LFE3
 4770 0010 00000000 		.4byte	.LFB4
 4771 0014 48000000 		.4byte	.LFE4
 4772 0018 00000000 		.4byte	.LFB5
 4773 001c 50000000 		.4byte	.LFE5
 4774 0020 00000000 		.4byte	.LFB6
 4775 0024 34000000 		.4byte	.LFE6
 4776 0028 00000000 		.4byte	.LFB7
 4777 002c 48000000 		.4byte	.LFE7
 4778 0030 00000000 		.4byte	.LFB8
 4779 0034 9C000000 		.4byte	.LFE8
 4780 0038 00000000 		.4byte	.LFB9
 4781 003c 74000000 		.4byte	.LFE9
 4782 0040 00000000 		.4byte	.LFB10
 4783 0044 30000000 		.4byte	.LFE10
 4784 0048 00000000 		.4byte	.LFB11
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 138


 4785 004c 20000000 		.4byte	.LFE11
 4786 0050 00000000 		.4byte	.LFB12
 4787 0054 58000000 		.4byte	.LFE12
 4788 0058 00000000 		.4byte	.LFB13
 4789 005c 64000000 		.4byte	.LFE13
 4790 0060 00000000 		.4byte	.LFB14
 4791 0064 2C000000 		.4byte	.LFE14
 4792 0068 00000000 		.4byte	.LFB15
 4793 006c 18000000 		.4byte	.LFE15
 4794 0070 00000000 		.4byte	.LFB16
 4795 0074 14000000 		.4byte	.LFE16
 4796 0078 00000000 		.4byte	.LFB17
 4797 007c 30000000 		.4byte	.LFE17
 4798 0080 00000000 		.4byte	.LFB18
 4799 0084 24000000 		.4byte	.LFE18
 4800 0088 00000000 		.4byte	.LFB19
 4801 008c 1C000000 		.4byte	.LFE19
 4802 0090 00000000 		.4byte	.LFB20
 4803 0094 48000000 		.4byte	.LFE20
 4804 0098 00000000 		.4byte	.LFB21
 4805 009c 34000000 		.4byte	.LFE21
 4806 00a0 00000000 		.4byte	.LFB22
 4807 00a4 4C000000 		.4byte	.LFE22
 4808 00a8 00000000 		.4byte	.LFB23
 4809 00ac 36000000 		.4byte	.LFE23
 4810 00b0 00000000 		.4byte	.LFB24
 4811 00b4 A8000000 		.4byte	.LFE24
 4812 00b8 00000000 		.4byte	.LFB25
 4813 00bc 58000000 		.4byte	.LFE25
 4814 00c0 00000000 		.4byte	.LFB26
 4815 00c4 2C000000 		.4byte	.LFE26
 4816 00c8 00000000 		.4byte	.LFB27
 4817 00cc 30000000 		.4byte	.LFE27
 4818 00d0 00000000 		.4byte	.LFB28
 4819 00d4 2C000000 		.4byte	.LFE28
 4820 00d8 00000000 		.4byte	.LFB29
 4821 00dc 2C000000 		.4byte	.LFE29
 4822 00e0 00000000 		.4byte	.LFB30
 4823 00e4 2C000000 		.4byte	.LFE30
 4824 00e8 00000000 		.4byte	.LFB31
 4825 00ec 16000000 		.4byte	.LFE31
 4826 00f0 00000000 		.4byte	.LFB32
 4827 00f4 24000000 		.4byte	.LFE32
 4828 00f8 00000000 		.4byte	.LFB33
 4829 00fc 4C000000 		.4byte	.LFE33
 4830 0100 00000000 		.4byte	.LFB34
 4831 0104 28000000 		.4byte	.LFE34
 4832 0108 00000000 		.4byte	.LFB35
 4833 010c 84000000 		.4byte	.LFE35
 4834 0110 00000000 		.4byte	.LFB36
 4835 0114 24000000 		.4byte	.LFE36
 4836 0118 00000000 		.4byte	.LFB37
 4837 011c 60000000 		.4byte	.LFE37
 4838 0120 00000000 		.4byte	.LFB38
 4839 0124 20000000 		.4byte	.LFE38
 4840 0128 00000000 		.4byte	.LFB39
 4841 012c 1C000000 		.4byte	.LFE39
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 139


 4842 0130 00000000 		.4byte	.LFB40
 4843 0134 1C000000 		.4byte	.LFE40
 4844 0138 00000000 		.4byte	.LFB41
 4845 013c 1C000000 		.4byte	.LFE41
 4846 0140 00000000 		.4byte	.LFB42
 4847 0144 20000000 		.4byte	.LFE42
 4848 0148 00000000 		.4byte	.LFB43
 4849 014c 18000000 		.4byte	.LFE43
 4850 0150 00000000 		.4byte	.LFB44
 4851 0154 18000000 		.4byte	.LFE44
 4852 0158 00000000 		.4byte	.LFB45
 4853 015c 34000000 		.4byte	.LFE45
 4854 0160 00000000 		.4byte	.LFB46
 4855 0164 18000000 		.4byte	.LFE46
 4856 0168 00000000 		.4byte	.LFB47
 4857 016c 18000000 		.4byte	.LFE47
 4858 0170 00000000 		.4byte	.LFB48
 4859 0174 14000000 		.4byte	.LFE48
 4860 0178 00000000 		.4byte	.LFB49
 4861 017c 2C000000 		.4byte	.LFE49
 4862 0180 00000000 		.4byte	.LFB50
 4863 0184 1C000000 		.4byte	.LFE50
 4864 0188 00000000 		.4byte	.LFB51
 4865 018c 44000000 		.4byte	.LFE51
 4866 0190 00000000 		.4byte	.LFB52
 4867 0194 C0000000 		.4byte	.LFE52
 4868 0198 00000000 		.4byte	0
 4869 019c 00000000 		.4byte	0
 4870              		.section	.debug_line,"",%progbits
 4871              	.Ldebug_line0:
 4872 0000 DD040000 		.section	.debug_str,"MS",%progbits,1
 4872      02004D00 
 4872      00000201 
 4872      FB0E0D00 
 4872      01010101 
 4873              	.LASF59:
 4874 0000 72616D56 		.ascii	"ramVectorTable\000"
 4874      6563746F 
 4874      72546162 
 4874      6C6500
 4875              	.LASF10:
 4876 000f 75696E74 		.ascii	"uint16\000"
 4876      313600
 4877              	.LASF52:
 4878 0016 696E7453 		.ascii	"intState\000"
 4878      74617465 
 4878      00
 4879              	.LASF26:
 4880 001f 43795379 		.ascii	"CySysClkWriteHfclkDirect\000"
 4880      73436C6B 
 4880      57726974 
 4880      65486663 
 4880      6C6B4469 
 4881              	.LASF108:
 4882 0038 43795379 		.ascii	"CySysClkPumpConfig\000"
 4882      73436C6B 
 4882      50756D70 
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 140


 4882      436F6E66 
 4882      696700
 4883              	.LASF58:
 4884 004b 6F6C6449 		.ascii	"oldIsr\000"
 4884      737200
 4885              	.LASF97:
 4886 0052 72657456 		.ascii	"retVal\000"
 4886      616C00
 4887              	.LASF51:
 4888 0059 43794469 		.ascii	"CyDisableInts\000"
 4888      7361626C 
 4888      65496E74 
 4888      7300
 4889              	.LASF7:
 4890 0067 6C6F6E67 		.ascii	"long long unsigned int\000"
 4890      206C6F6E 
 4890      6720756E 
 4890      7369676E 
 4890      65642069 
 4891              	.LASF35:
 4892 007e 70617261 		.ascii	"parameters\000"
 4892      6D657465 
 4892      727300
 4893              	.LASF53:
 4894 0089 4379456E 		.ascii	"CyEnableInts\000"
 4894      61626C65 
 4894      496E7473 
 4894      00
 4895              	.LASF74:
 4896 0096 4379536F 		.ascii	"CySoftwareReset\000"
 4896      66747761 
 4896      72655265 
 4896      73657400 
 4897              	.LASF84:
 4898 00a6 43795379 		.ascii	"CySysTickEnableInterrupt\000"
 4898      73546963 
 4898      6B456E61 
 4898      626C6549 
 4898      6E746572 
 4899              	.LASF69:
 4900 00bf 4379496E 		.ascii	"CyIntGetState\000"
 4900      74476574 
 4900      53746174 
 4900      6500
 4901              	.LASF6:
 4902 00cd 6C6F6E67 		.ascii	"long long int\000"
 4902      206C6F6E 
 4902      6720696E 
 4902      7400
 4903              	.LASF0:
 4904 00db 7369676E 		.ascii	"signed char\000"
 4904      65642063 
 4904      68617200 
 4905              	.LASF34:
 4906 00e7 66726571 		.ascii	"freq\000"
 4906      00
 4907              	.LASF79:
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 141


 4908 00ec 43794465 		.ascii	"CyDelayFreq\000"
 4908      6C617946 
 4908      72657100 
 4909              	.LASF24:
 4910 00f8 696E7465 		.ascii	"interruptState\000"
 4910      72727570 
 4910      74537461 
 4910      746500
 4911              	.LASF88:
 4912 0107 43795379 		.ascii	"CySysTickGetReload\000"
 4912      73546963 
 4912      6B476574 
 4912      52656C6F 
 4912      616400
 4913              	.LASF4:
 4914 011a 6C6F6E67 		.ascii	"long int\000"
 4914      20696E74 
 4914      00
 4915              	.LASF70:
 4916 0123 4379496E 		.ascii	"CyIntDisable\000"
 4916      74446973 
 4916      61626C65 
 4916      00
 4917              	.LASF36:
 4918 0130 72656756 		.ascii	"regValues\000"
 4918      616C7565 
 4918      7300
 4919              	.LASF9:
 4920 013a 75696E74 		.ascii	"uint8\000"
 4920      3800
 4921              	.LASF103:
 4922 0140 63796465 		.ascii	"cydelayFreqKhz\000"
 4922      6C617946 
 4922      7265714B 
 4922      687A00
 4923              	.LASF29:
 4924 014f 656E6162 		.ascii	"enable\000"
 4924      6C6500
 4925              	.LASF13:
 4926 0156 646F7562 		.ascii	"double\000"
 4926      6C6500
 4927              	.LASF65:
 4928 015d 73686966 		.ascii	"shift\000"
 4928      7400
 4929              	.LASF48:
 4930 0163 43795379 		.ascii	"CySysLvdClearInterrupt\000"
 4930      734C7664 
 4930      436C6561 
 4930      72496E74 
 4930      65727275 
 4931              	.LASF11:
 4932 017a 75696E74 		.ascii	"uint32\000"
 4932      333200
 4933              	.LASF42:
 4934 0181 43795379 		.ascii	"CySysClkEcoReadStatus\000"
 4934      73436C6B 
 4934      45636F52 
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 142


 4934      65616453 
 4934      74617475 
 4935              	.LASF54:
 4936 0197 6D61736B 		.ascii	"mask\000"
 4936      00
 4937              	.LASF37:
 4938 019c 43795379 		.ascii	"CySysClkGetSysclkSource\000"
 4938      73436C6B 
 4938      47657453 
 4938      7973636C 
 4938      6B536F75 
 4939              	.LASF67:
 4940 01b4 4379496E 		.ascii	"CyIntGetPriority\000"
 4940      74476574 
 4940      5072696F 
 4940      72697479 
 4940      00
 4941              	.LASF105:
 4942 01c5 63796465 		.ascii	"cydelay32kMs\000"
 4942      6C617933 
 4942      326B4D73 
 4942      00
 4943              	.LASF81:
 4944 01d2 43795379 		.ascii	"CySysTickInit\000"
 4944      73546963 
 4944      6B496E69 
 4944      7400
 4945              	.LASF66:
 4946 01e0 76616C75 		.ascii	"value\000"
 4946      6500
 4947              	.LASF91:
 4948 01e6 636C6F63 		.ascii	"clockSource\000"
 4948      6B536F75 
 4948      72636500 
 4949              	.LASF99:
 4950 01f2 43794765 		.ascii	"CyGetUniqueId\000"
 4950      74556E69 
 4950      71756549 
 4950      6400
 4951              	.LASF93:
 4952 0200 43795379 		.ascii	"CySysTickGetCountFlag\000"
 4952      73546963 
 4952      6B476574 
 4952      436F756E 
 4952      74466C61 
 4953              	.LASF8:
 4954 0216 756E7369 		.ascii	"unsigned int\000"
 4954      676E6564 
 4954      20696E74 
 4954      00
 4955              	.LASF94:
 4956 0223 43795379 		.ascii	"CySysTickClear\000"
 4956      73546963 
 4956      6B436C65 
 4956      617200
 4957              	.LASF5:
 4958 0232 6C6F6E67 		.ascii	"long unsigned int\000"
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 143


 4958      20756E73 
 4958      69676E65 
 4958      6420696E 
 4958      7400
 4959              	.LASF87:
 4960 0244 43795379 		.ascii	"CySysLvdGetInterruptSource\000"
 4960      734C7664 
 4960      47657449 
 4960      6E746572 
 4960      72757074 
 4961              	.LASF23:
 4962 025f 43795379 		.ascii	"CySysClkImoStop\000"
 4962      73436C6B 
 4962      496D6F53 
 4962      746F7000 
 4963              	.LASF71:
 4964 026f 4379496E 		.ascii	"CyIntSetPending\000"
 4964      74536574 
 4964      50656E64 
 4964      696E6700 
 4965              	.LASF98:
 4966 027f 43795379 		.ascii	"CySysTickGetCallback\000"
 4966      73546963 
 4966      6B476574 
 4966      43616C6C 
 4966      6261636B 
 4967              	.LASF49:
 4968 0294 43795379 		.ascii	"CySysGetResetReason\000"
 4968      73476574 
 4968      52657365 
 4968      74526561 
 4968      736F6E00 
 4969              	.LASF3:
 4970 02a8 73686F72 		.ascii	"short unsigned int\000"
 4970      7420756E 
 4970      7369676E 
 4970      65642069 
 4970      6E7400
 4971              	.LASF90:
 4972 02bb 43795379 		.ascii	"CySysTickSetClockSource\000"
 4972      73546963 
 4972      6B536574 
 4972      436C6F63 
 4972      6B536F75 
 4973              	.LASF61:
 4974 02d3 4379496E 		.ascii	"CyIntSetVector\000"
 4974      74536574 
 4974      56656374 
 4974      6F7200
 4975              	.LASF56:
 4976 02e2 6E756D62 		.ascii	"number\000"
 4976      657200
 4977              	.LASF64:
 4978 02e9 7072696F 		.ascii	"priority\000"
 4978      72697479 
 4978      00
 4979              	.LASF33:
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 144


 4980 02f2 43795379 		.ascii	"CySysClkWriteImoFreq\000"
 4980      73436C6B 
 4980      57726974 
 4980      65496D6F 
 4980      46726571 
 4981              	.LASF55:
 4982 0307 4379496E 		.ascii	"CyIntSetSysVector\000"
 4982      74536574 
 4982      53797356 
 4982      6563746F 
 4982      7200
 4983              	.LASF27:
 4984 0319 43795379 		.ascii	"CySysEnablePumpClock\000"
 4984      73456E61 
 4984      626C6550 
 4984      756D7043 
 4984      6C6F636B 
 4985              	.LASF17:
 4986 032e 72656733 		.ascii	"reg32\000"
 4986      3200
 4987              	.LASF80:
 4988 0334 43795379 		.ascii	"CySysTickStart\000"
 4988      73546963 
 4988      6B537461 
 4988      727400
 4989              	.LASF40:
 4990 0343 72657475 		.ascii	"returnStatus\000"
 4990      726E5374 
 4990      61747573 
 4990      00
 4991              	.LASF20:
 4992 0350 73697A65 		.ascii	"sizetype\000"
 4992      74797065 
 4992      00
 4993              	.LASF106:
 4994 0359 43795379 		.ascii	"CySysTickInitVar\000"
 4994      73546963 
 4994      6B496E69 
 4994      74566172 
 4994      00
 4995              	.LASF72:
 4996 036a 4379496E 		.ascii	"CyIntClearPending\000"
 4996      74436C65 
 4996      61725065 
 4996      6E64696E 
 4996      6700
 4997              	.LASF19:
 4998 037c 6C6F6E67 		.ascii	"long double\000"
 4998      20646F75 
 4998      626C6500 
 4999              	.LASF57:
 5000 0388 61646472 		.ascii	"address\000"
 5000      65737300 
 5001              	.LASF30:
 5002 0390 73797363 		.ascii	"sysclkSource\000"
 5002      6C6B536F 
 5002      75726365 
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 145


 5002      00
 5003              	.LASF96:
 5004 039d 66756E63 		.ascii	"function\000"
 5004      74696F6E 
 5004      00
 5005              	.LASF107:
 5006 03a6 6379496D 		.ascii	"cyImoFreqMhz2Reg\000"
 5006      6F467265 
 5006      714D687A 
 5006      32526567 
 5006      00
 5007              	.LASF89:
 5008 03b7 43795379 		.ascii	"CySysTickGetValue\000"
 5008      73546963 
 5008      6B476574 
 5008      56616C75 
 5008      6500
 5009              	.LASF102:
 5010 03c9 63796465 		.ascii	"cydelayFreqHz\000"
 5010      6C617946 
 5010      72657148 
 5010      7A00
 5011              	.LASF63:
 5012 03d7 4379496E 		.ascii	"CyIntSetPriority\000"
 5012      74536574 
 5012      5072696F 
 5012      72697479 
 5012      00
 5013              	.LASF12:
 5014 03e8 666C6F61 		.ascii	"float\000"
 5014      7400
 5015              	.LASF45:
 5016 03ee 43795379 		.ascii	"CySysLvdEnable\000"
 5016      734C7664 
 5016      456E6162 
 5016      6C6500
 5017              	.LASF21:
 5018 03fd 63795379 		.ascii	"cySysTickCallback\000"
 5018      73546963 
 5018      6B43616C 
 5018      6C626163 
 5018      6B00
 5019              	.LASF62:
 5020 040f 4379496E 		.ascii	"CyIntGetVector\000"
 5020      74476574 
 5020      56656374 
 5020      6F7200
 5021              	.LASF76:
 5022 041e 6D696C6C 		.ascii	"milliseconds\000"
 5022      69736563 
 5022      6F6E6473 
 5022      00
 5023              	.LASF16:
 5024 042b 72656738 		.ascii	"reg8\000"
 5024      00
 5025              	.LASF46:
 5026 0430 74687265 		.ascii	"threshold\000"
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 146


 5026      73686F6C 
 5026      6400
 5027              	.LASF73:
 5028 043a 43794861 		.ascii	"CyHalt\000"
 5028      6C7400
 5029              	.LASF1:
 5030 0441 756E7369 		.ascii	"unsigned char\000"
 5030      676E6564 
 5030      20636861 
 5030      7200
 5031              	.LASF2:
 5032 044f 73686F72 		.ascii	"short int\000"
 5032      7420696E 
 5032      7400
 5033              	.LASF68:
 5034 0459 4379496E 		.ascii	"CyIntEnable\000"
 5034      74456E61 
 5034      626C6500 
 5035              	.LASF60:
 5036 0465 4379496E 		.ascii	"CyIntGetSysVector\000"
 5036      74476574 
 5036      53797356 
 5036      6563746F 
 5036      7200
 5037              	.LASF28:
 5038 0477 636C6B53 		.ascii	"clkSelect\000"
 5038      656C6563 
 5038      7400
 5039              	.LASF38:
 5040 0481 43795379 		.ascii	"CySysClkEcoStart\000"
 5040      73436C6B 
 5040      45636F53 
 5040      74617274 
 5040      00
 5041              	.LASF77:
 5042 0492 43794465 		.ascii	"CyDelayUs\000"
 5042      6C617955 
 5042      7300
 5043              	.LASF50:
 5044 049c 72656173 		.ascii	"reason\000"
 5044      6F6E00
 5045              	.LASF109:
 5046 04a3 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 5046      43313120 
 5046      352E342E 
 5046      31203230 
 5046      31363036 
 5047 04d6 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m0 -mthumb -g -g"
 5047      20726576 
 5047      6973696F 
 5047      6E203233 
 5047      37373135 
 5048 0509 64776172 		.ascii	"dwarf-3 -O0 -ffunction-sections -ffat-lto-objects\000"
 5048      662D3320 
 5048      2D4F3020 
 5048      2D666675 
 5048      6E637469 
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 147


 5049              	.LASF14:
 5050 053b 63686172 		.ascii	"char\000"
 5050      00
 5051              	.LASF18:
 5052 0540 63796973 		.ascii	"cyisraddress\000"
 5052      72616464 
 5052      72657373 
 5052      00
 5053              	.LASF82:
 5054 054d 43795379 		.ascii	"CySysTickEnable\000"
 5054      73546963 
 5054      6B456E61 
 5054      626C6500 
 5055              	.LASF31:
 5056 055d 43795379 		.ascii	"CySysClkWriteSysclkDiv\000"
 5056      73436C6B 
 5056      57726974 
 5056      65537973 
 5056      636C6B44 
 5057              	.LASF95:
 5058 0574 43795379 		.ascii	"CySysTickSetCallback\000"
 5058      73546963 
 5058      6B536574 
 5058      43616C6C 
 5058      6261636B 
 5059              	.LASF101:
 5060 0589 43795379 		.ascii	"CySysTickCallbacks\000"
 5060      73546963 
 5060      6B43616C 
 5060      6C626163 
 5060      6B7300
 5061              	.LASF100:
 5062 059c 756E6971 		.ascii	"uniqueId\000"
 5062      75654964 
 5062      00
 5063              	.LASF75:
 5064 05a5 43794465 		.ascii	"CyDelay\000"
 5064      6C617900 
 5065              	.LASF92:
 5066 05ad 43795379 		.ascii	"CySysTickGetClockSource\000"
 5066      73546963 
 5066      6B476574 
 5066      436C6F63 
 5066      6B536F75 
 5067              	.LASF85:
 5068 05c5 43795379 		.ascii	"CySysTickDisableInterrupt\000"
 5068      73546963 
 5068      6B446973 
 5068      61626C65 
 5068      496E7465 
 5069              	.LASF47:
 5070 05df 43795379 		.ascii	"CySysLvdDisable\000"
 5070      734C7664 
 5070      44697361 
 5070      626C6500 
 5071              	.LASF104:
 5072 05ef 63796465 		.ascii	"cydelayFreqMhz\000"
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 148


 5072      6C617946 
 5072      7265714D 
 5072      687A00
 5073              	.LASF111:
 5074 05fe 433A5C55 		.ascii	"C:\\Users\\hasur\\Documents\\PSoC_4_BLE_Pressure_Se"
 5074      73657273 
 5074      5C686173 
 5074      75725C44 
 5074      6F63756D 
 5075 062d 6E736F72 		.ascii	"nsor\\PSoC_4_BLE_Pressure_Sensor.cydsn\000"
 5075      5C50536F 
 5075      435F345F 
 5075      424C455F 
 5075      50726573 
 5076              	.LASF41:
 5077 0653 43795379 		.ascii	"CySysClkEcoStop\000"
 5077      73436C6B 
 5077      45636F53 
 5077      746F7000 
 5078              	.LASF83:
 5079 0663 43795379 		.ascii	"CySysTickStop\000"
 5079      73546963 
 5079      6B53746F 
 5079      7000
 5080              	.LASF39:
 5081 0671 74696D65 		.ascii	"timeoutUs\000"
 5081      6F757455 
 5081      7300
 5082              	.LASF32:
 5083 067b 64697669 		.ascii	"divider\000"
 5083      64657200 
 5084              	.LASF44:
 5085 0683 43795379 		.ascii	"CySysClkWriteEcoDiv\000"
 5085      73436C6B 
 5085      57726974 
 5085      6545636F 
 5085      44697600 
 5086              	.LASF15:
 5087 0697 63797374 		.ascii	"cystatus\000"
 5087      61747573 
 5087      00
 5088              	.LASF22:
 5089 06a0 43795379 		.ascii	"CySysClkImoStart\000"
 5089      73436C6B 
 5089      496D6F53 
 5089      74617274 
 5089      00
 5090              	.LASF110:
 5091 06b1 47656E65 		.ascii	"Generated_Source\\PSoC4\\CyLib.c\000"
 5091      72617465 
 5091      645F536F 
 5091      75726365 
 5091      5C50536F 
 5092              	.LASF78:
 5093 06d0 6D696372 		.ascii	"microseconds\000"
 5093      6F736563 
 5093      6F6E6473 
ARM GAS  C:\Users\hasur\AppData\Local\Temp\ccGAzvr6.s 			page 149


 5093      00
 5094              	.LASF25:
 5095 06dd 746D7052 		.ascii	"tmpReg\000"
 5095      656700
 5096              	.LASF86:
 5097 06e4 43795379 		.ascii	"CySysTickSetReload\000"
 5097      73546963 
 5097      6B536574 
 5097      52656C6F 
 5097      616400
 5098              	.LASF112:
 5099 06f7 43795379 		.ascii	"CySysTickServiceCallbacks\000"
 5099      73546963 
 5099      6B536572 
 5099      76696365 
 5099      43616C6C 
 5100              	.LASF43:
 5101 0711 72657475 		.ascii	"returnValue\000"
 5101      726E5661 
 5101      6C756500 
 5102              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
